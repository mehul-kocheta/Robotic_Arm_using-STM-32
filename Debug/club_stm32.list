
club_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c28  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08009db0  08009db0  0000adb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f64  08009f64  0000b158  2**0
                  CONTENTS
  4 .ARM          00000008  08009f64  08009f64  0000af64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f6c  08009f6c  0000b158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f6c  08009f6c  0000af6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009f70  08009f70  0000af70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  08009f74  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b158  2**0
                  CONTENTS
 10 .bss          00001e34  20000158  20000158  0000b158  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001f8c  20001f8c  0000b158  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b158  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017266  00000000  00000000  0000b188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003899  00000000  00000000  000223ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001440  00000000  00000000  00025c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f92  00000000  00000000  000270c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024c00  00000000  00000000  0002805a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001996f  00000000  00000000  0004cc5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1184  00000000  00000000  000665c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013774d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005bb0  00000000  00000000  00137790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0013d340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000158 	.word	0x20000158
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009d98 	.word	0x08009d98

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000015c 	.word	0x2000015c
 80001c4:	08009d98 	.word	0x08009d98

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fdd2 	bl	8001064 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f834 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 fa02 	bl	80008cc <MX_GPIO_Init>
  MX_TIM1_Init();
 80004c8:	f000 f89a 	bl	8000600 <MX_TIM1_Init>
  MX_TIM2_Init();
 80004cc:	f000 f95e 	bl	800078c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80004d0:	f008 fa14 	bl	80088fc <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 80004d4:	f000 f9d0 	bl	8000878 <MX_USART2_UART_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80004d8:	2100      	movs	r1, #0
 80004da:	480f      	ldr	r0, [pc, #60]	@ (8000518 <main+0x60>)
 80004dc:	f003 f944 	bl	8003768 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80004e0:	2104      	movs	r1, #4
 80004e2:	480d      	ldr	r0, [pc, #52]	@ (8000518 <main+0x60>)
 80004e4:	f003 f940 	bl	8003768 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80004e8:	2108      	movs	r1, #8
 80004ea:	480b      	ldr	r0, [pc, #44]	@ (8000518 <main+0x60>)
 80004ec:	f003 f93c 	bl	8003768 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80004f0:	210c      	movs	r1, #12
 80004f2:	4809      	ldr	r0, [pc, #36]	@ (8000518 <main+0x60>)
 80004f4:	f003 f938 	bl	8003768 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80004f8:	2100      	movs	r1, #0
 80004fa:	4808      	ldr	r0, [pc, #32]	@ (800051c <main+0x64>)
 80004fc:	f003 f934 	bl	8003768 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, &rxBuffer[rxIndex], 1);
 8000500:	4b07      	ldr	r3, [pc, #28]	@ (8000520 <main+0x68>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	461a      	mov	r2, r3
 8000506:	4b07      	ldr	r3, [pc, #28]	@ (8000524 <main+0x6c>)
 8000508:	4413      	add	r3, r2
 800050a:	2201      	movs	r2, #1
 800050c:	4619      	mov	r1, r3
 800050e:	4806      	ldr	r0, [pc, #24]	@ (8000528 <main+0x70>)
 8000510:	f003 ffb6 	bl	8004480 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 8000514:	bf00      	nop
 8000516:	e7fd      	b.n	8000514 <main+0x5c>
 8000518:	2000017c 	.word	0x2000017c
 800051c:	200001c4 	.word	0x200001c4
 8000520:	20000179 	.word	0x20000179
 8000524:	20000174 	.word	0x20000174
 8000528:	2000020c 	.word	0x2000020c

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	@ 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2230      	movs	r2, #48	@ 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f009 f978 	bl	8009830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	4b28      	ldr	r3, [pc, #160]	@ (80005f8 <SystemClock_Config+0xcc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000558:	4a27      	ldr	r2, [pc, #156]	@ (80005f8 <SystemClock_Config+0xcc>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000560:	4b25      	ldr	r3, [pc, #148]	@ (80005f8 <SystemClock_Config+0xcc>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b22      	ldr	r3, [pc, #136]	@ (80005fc <SystemClock_Config+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a21      	ldr	r2, [pc, #132]	@ (80005fc <SystemClock_Config+0xd0>)
 8000576:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b1f      	ldr	r3, [pc, #124]	@ (80005fc <SystemClock_Config+0xd0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000588:	2301      	movs	r3, #1
 800058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800058c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000590:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000592:	2302      	movs	r3, #2
 8000594:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000596:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800059a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800059c:	2304      	movs	r3, #4
 800059e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005a0:	2348      	movs	r3, #72	@ 0x48
 80005a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005a8:	2303      	movs	r3, #3
 80005aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 0320 	add.w	r3, r7, #32
 80005b0:	4618      	mov	r0, r3
 80005b2:	f002 fb99 	bl	8002ce8 <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005bc:	f000 f9d6 	bl	800096c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c0:	230f      	movs	r3, #15
 80005c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c4:	2302      	movs	r3, #2
 80005c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2102      	movs	r1, #2
 80005de:	4618      	mov	r0, r3
 80005e0:	f002 fdfa 	bl	80031d8 <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005ea:	f000 f9bf 	bl	800096c <Error_Handler>
  }
}
 80005ee:	bf00      	nop
 80005f0:	3750      	adds	r7, #80	@ 0x50
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b096      	sub	sp, #88	@ 0x58
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000606:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000614:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800061e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]
 800062e:	615a      	str	r2, [r3, #20]
 8000630:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	2220      	movs	r2, #32
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f009 f8f9 	bl	8009830 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800063e:	4b51      	ldr	r3, [pc, #324]	@ (8000784 <MX_TIM1_Init+0x184>)
 8000640:	4a51      	ldr	r2, [pc, #324]	@ (8000788 <MX_TIM1_Init+0x188>)
 8000642:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1440-1;
 8000644:	4b4f      	ldr	r3, [pc, #316]	@ (8000784 <MX_TIM1_Init+0x184>)
 8000646:	f240 529f 	movw	r2, #1439	@ 0x59f
 800064a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800064c:	4b4d      	ldr	r3, [pc, #308]	@ (8000784 <MX_TIM1_Init+0x184>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000652:	4b4c      	ldr	r3, [pc, #304]	@ (8000784 <MX_TIM1_Init+0x184>)
 8000654:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000658:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800065a:	4b4a      	ldr	r3, [pc, #296]	@ (8000784 <MX_TIM1_Init+0x184>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000660:	4b48      	ldr	r3, [pc, #288]	@ (8000784 <MX_TIM1_Init+0x184>)
 8000662:	2200      	movs	r2, #0
 8000664:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000666:	4b47      	ldr	r3, [pc, #284]	@ (8000784 <MX_TIM1_Init+0x184>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800066c:	4845      	ldr	r0, [pc, #276]	@ (8000784 <MX_TIM1_Init+0x184>)
 800066e:	f002 ffd3 	bl	8003618 <HAL_TIM_Base_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000678:	f000 f978 	bl	800096c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800067c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000680:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000682:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000686:	4619      	mov	r1, r3
 8000688:	483e      	ldr	r0, [pc, #248]	@ (8000784 <MX_TIM1_Init+0x184>)
 800068a:	f003 f9f7 	bl	8003a7c <HAL_TIM_ConfigClockSource>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000694:	f000 f96a 	bl	800096c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000698:	483a      	ldr	r0, [pc, #232]	@ (8000784 <MX_TIM1_Init+0x184>)
 800069a:	f003 f80c 	bl	80036b6 <HAL_TIM_PWM_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80006a4:	f000 f962 	bl	800096c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a8:	2300      	movs	r3, #0
 80006aa:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006b0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80006b4:	4619      	mov	r1, r3
 80006b6:	4833      	ldr	r0, [pc, #204]	@ (8000784 <MX_TIM1_Init+0x184>)
 80006b8:	f003 fdc4 	bl	8004244 <HAL_TIMEx_MasterConfigSynchronization>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80006c2:	f000 f953 	bl	800096c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006c6:	2360      	movs	r3, #96	@ 0x60
 80006c8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ce:	2300      	movs	r3, #0
 80006d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006d2:	2300      	movs	r3, #0
 80006d4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006da:	2300      	movs	r3, #0
 80006dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006de:	2300      	movs	r3, #0
 80006e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006e6:	2200      	movs	r2, #0
 80006e8:	4619      	mov	r1, r3
 80006ea:	4826      	ldr	r0, [pc, #152]	@ (8000784 <MX_TIM1_Init+0x184>)
 80006ec:	f003 f904 	bl	80038f8 <HAL_TIM_PWM_ConfigChannel>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80006f6:	f000 f939 	bl	800096c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006fe:	2204      	movs	r2, #4
 8000700:	4619      	mov	r1, r3
 8000702:	4820      	ldr	r0, [pc, #128]	@ (8000784 <MX_TIM1_Init+0x184>)
 8000704:	f003 f8f8 	bl	80038f8 <HAL_TIM_PWM_ConfigChannel>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 800070e:	f000 f92d 	bl	800096c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000712:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000716:	2208      	movs	r2, #8
 8000718:	4619      	mov	r1, r3
 800071a:	481a      	ldr	r0, [pc, #104]	@ (8000784 <MX_TIM1_Init+0x184>)
 800071c:	f003 f8ec 	bl	80038f8 <HAL_TIM_PWM_ConfigChannel>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000726:	f000 f921 	bl	800096c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800072a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800072e:	220c      	movs	r2, #12
 8000730:	4619      	mov	r1, r3
 8000732:	4814      	ldr	r0, [pc, #80]	@ (8000784 <MX_TIM1_Init+0x184>)
 8000734:	f003 f8e0 	bl	80038f8 <HAL_TIM_PWM_ConfigChannel>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800073e:	f000 f915 	bl	800096c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000756:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800075a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	4619      	mov	r1, r3
 8000764:	4807      	ldr	r0, [pc, #28]	@ (8000784 <MX_TIM1_Init+0x184>)
 8000766:	f003 fde9 	bl	800433c <HAL_TIMEx_ConfigBreakDeadTime>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8000770:	f000 f8fc 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000774:	4803      	ldr	r0, [pc, #12]	@ (8000784 <MX_TIM1_Init+0x184>)
 8000776:	f000 faa1 	bl	8000cbc <HAL_TIM_MspPostInit>

}
 800077a:	bf00      	nop
 800077c:	3758      	adds	r7, #88	@ 0x58
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	2000017c 	.word	0x2000017c
 8000788:	40010000 	.word	0x40010000

0800078c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08e      	sub	sp, #56	@ 0x38
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000792:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a0:	f107 0320 	add.w	r3, r7, #32
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
 80007b8:	615a      	str	r2, [r3, #20]
 80007ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007bc:	4b2d      	ldr	r3, [pc, #180]	@ (8000874 <MX_TIM2_Init+0xe8>)
 80007be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440;
 80007c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000874 <MX_TIM2_Init+0xe8>)
 80007c6:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 80007ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007cc:	4b29      	ldr	r3, [pc, #164]	@ (8000874 <MX_TIM2_Init+0xe8>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80007d2:	4b28      	ldr	r3, [pc, #160]	@ (8000874 <MX_TIM2_Init+0xe8>)
 80007d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007da:	4b26      	ldr	r3, [pc, #152]	@ (8000874 <MX_TIM2_Init+0xe8>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e0:	4b24      	ldr	r3, [pc, #144]	@ (8000874 <MX_TIM2_Init+0xe8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007e6:	4823      	ldr	r0, [pc, #140]	@ (8000874 <MX_TIM2_Init+0xe8>)
 80007e8:	f002 ff16 	bl	8003618 <HAL_TIM_Base_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80007f2:	f000 f8bb 	bl	800096c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000800:	4619      	mov	r1, r3
 8000802:	481c      	ldr	r0, [pc, #112]	@ (8000874 <MX_TIM2_Init+0xe8>)
 8000804:	f003 f93a 	bl	8003a7c <HAL_TIM_ConfigClockSource>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800080e:	f000 f8ad 	bl	800096c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000812:	4818      	ldr	r0, [pc, #96]	@ (8000874 <MX_TIM2_Init+0xe8>)
 8000814:	f002 ff4f 	bl	80036b6 <HAL_TIM_PWM_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800081e:	f000 f8a5 	bl	800096c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000822:	2300      	movs	r3, #0
 8000824:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800082a:	f107 0320 	add.w	r3, r7, #32
 800082e:	4619      	mov	r1, r3
 8000830:	4810      	ldr	r0, [pc, #64]	@ (8000874 <MX_TIM2_Init+0xe8>)
 8000832:	f003 fd07 	bl	8004244 <HAL_TIMEx_MasterConfigSynchronization>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800083c:	f000 f896 	bl	800096c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000840:	2360      	movs	r3, #96	@ 0x60
 8000842:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	2200      	movs	r2, #0
 8000854:	4619      	mov	r1, r3
 8000856:	4807      	ldr	r0, [pc, #28]	@ (8000874 <MX_TIM2_Init+0xe8>)
 8000858:	f003 f84e 	bl	80038f8 <HAL_TIM_PWM_ConfigChannel>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000862:	f000 f883 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000866:	4803      	ldr	r0, [pc, #12]	@ (8000874 <MX_TIM2_Init+0xe8>)
 8000868:	f000 fa28 	bl	8000cbc <HAL_TIM_MspPostInit>

}
 800086c:	bf00      	nop
 800086e:	3738      	adds	r7, #56	@ 0x38
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200001c4 	.word	0x200001c4

08000878 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800087c:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <MX_USART2_UART_Init+0x4c>)
 800087e:	4a12      	ldr	r2, [pc, #72]	@ (80008c8 <MX_USART2_UART_Init+0x50>)
 8000880:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000882:	4b10      	ldr	r3, [pc, #64]	@ (80008c4 <MX_USART2_UART_Init+0x4c>)
 8000884:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000888:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800088a:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <MX_USART2_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000890:	4b0c      	ldr	r3, [pc, #48]	@ (80008c4 <MX_USART2_UART_Init+0x4c>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000896:	4b0b      	ldr	r3, [pc, #44]	@ (80008c4 <MX_USART2_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800089c:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <MX_USART2_UART_Init+0x4c>)
 800089e:	220c      	movs	r2, #12
 80008a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a2:	4b08      	ldr	r3, [pc, #32]	@ (80008c4 <MX_USART2_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a8:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <MX_USART2_UART_Init+0x4c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ae:	4805      	ldr	r0, [pc, #20]	@ (80008c4 <MX_USART2_UART_Init+0x4c>)
 80008b0:	f003 fd96 	bl	80043e0 <HAL_UART_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ba:	f000 f857 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	2000020c 	.word	0x2000020c
 80008c8:	40004400 	.word	0x40004400

080008cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b088      	sub	sp, #32
 80008d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 030c 	add.w	r3, r7, #12
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000964 <MX_GPIO_Init+0x98>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a1e      	ldr	r2, [pc, #120]	@ (8000964 <MX_GPIO_Init+0x98>)
 80008ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000964 <MX_GPIO_Init+0x98>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <MX_GPIO_Init+0x98>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a17      	ldr	r2, [pc, #92]	@ (8000964 <MX_GPIO_Init+0x98>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <MX_GPIO_Init+0x98>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	4b11      	ldr	r3, [pc, #68]	@ (8000964 <MX_GPIO_Init+0x98>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a10      	ldr	r2, [pc, #64]	@ (8000964 <MX_GPIO_Init+0x98>)
 8000924:	f043 0310 	orr.w	r3, r3, #16
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b0e      	ldr	r3, [pc, #56]	@ (8000964 <MX_GPIO_Init+0x98>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0310 	and.w	r3, r3, #16
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	2140      	movs	r1, #64	@ 0x40
 800093a:	480b      	ldr	r0, [pc, #44]	@ (8000968 <MX_GPIO_Init+0x9c>)
 800093c:	f000 ff68 	bl	8001810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000940:	2340      	movs	r3, #64	@ 0x40
 8000942:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	4619      	mov	r1, r3
 8000956:	4804      	ldr	r0, [pc, #16]	@ (8000968 <MX_GPIO_Init+0x9c>)
 8000958:	f000 fdbe 	bl	80014d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800095c:	bf00      	nop
 800095e:	3720      	adds	r7, #32
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40023800 	.word	0x40023800
 8000968:	40020000 	.word	0x40020000

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <Error_Handler+0x8>

08000978 <get_angle>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

int get_angle(uint8_t *rxBuffer) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
    // Check if rxBuffer is valid
    if (rxBuffer == NULL) {
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d105      	bne.n	8000992 <get_angle+0x1a>
        printf("Invalid input\n");
 8000986:	4816      	ldr	r0, [pc, #88]	@ (80009e0 <get_angle+0x68>)
 8000988:	f008 fe72 	bl	8009670 <puts>
        return -1;
 800098c:	f04f 33ff 	mov.w	r3, #4294967295
 8000990:	e021      	b.n	80009d6 <get_angle+0x5e>
    }

    // Check if the starting characters are "s6"
    if (rxBuffer[0] == 's') {
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b73      	cmp	r3, #115	@ 0x73
 8000998:	d118      	bne.n	80009cc <get_angle+0x54>
        printf("The input starts with 's6'.\n");
 800099a:	4812      	ldr	r0, [pc, #72]	@ (80009e4 <get_angle+0x6c>)
 800099c:	f008 fe68 	bl	8009670 <puts>
        printf("The input does not start with 's6'.\n");
        return -1;  // Return an error or handle as needed
    }

    // Create a temporary string buffer to hold the last 3 characters as a string
    char angleStr[4] = {0};  // 3 characters for angle + 1 null terminator
 80009a0:	2300      	movs	r3, #0
 80009a2:	60bb      	str	r3, [r7, #8]
    angleStr[0] = rxBuffer[2];
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3302      	adds	r3, #2
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	723b      	strb	r3, [r7, #8]
    angleStr[1] = rxBuffer[3];
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3303      	adds	r3, #3
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	727b      	strb	r3, [r7, #9]
    angleStr[2] = rxBuffer[4];
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3304      	adds	r3, #4
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	72bb      	strb	r3, [r7, #10]

    // Convert the extracted characters to an integer
    int angle = atoi(angleStr);
 80009bc:	f107 0308 	add.w	r3, r7, #8
 80009c0:	4618      	mov	r0, r3
 80009c2:	f008 fcb5 	bl	8009330 <atoi>
 80009c6:	60f8      	str	r0, [r7, #12]

    return angle;
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	e004      	b.n	80009d6 <get_angle+0x5e>
        printf("The input does not start with 's6'.\n");
 80009cc:	4806      	ldr	r0, [pc, #24]	@ (80009e8 <get_angle+0x70>)
 80009ce:	f008 fe4f 	bl	8009670 <puts>
        return -1;  // Return an error or handle as needed
 80009d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	08009db0 	.word	0x08009db0
 80009e4:	08009dc0 	.word	0x08009dc0
 80009e8:	08009ddc 	.word	0x08009ddc

080009ec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08c      	sub	sp, #48	@ 0x30
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a7a      	ldr	r2, [pc, #488]	@ (8000be4 <HAL_UART_RxCpltCallback+0x1f8>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	f040 80ed 	bne.w	8000bda <HAL_UART_RxCpltCallback+0x1ee>
    {
        // Increment the index for each received byte
        rxIndex++;
 8000a00:	4b79      	ldr	r3, [pc, #484]	@ (8000be8 <HAL_UART_RxCpltCallback+0x1fc>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	3301      	adds	r3, #1
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	4b77      	ldr	r3, [pc, #476]	@ (8000be8 <HAL_UART_RxCpltCallback+0x1fc>)
 8000a0a:	701a      	strb	r2, [r3, #0]

        // Check if we've received the full 5-byte message
        if (rxIndex >= RX_BUFFER_SIZE)
 8000a0c:	4b76      	ldr	r3, [pc, #472]	@ (8000be8 <HAL_UART_RxCpltCallback+0x1fc>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b04      	cmp	r3, #4
 8000a12:	f240 80d8 	bls.w	8000bc6 <HAL_UART_RxCpltCallback+0x1da>
        {
            // Process the full message without echoing it back to the PC
            if (rxBuffer[0] == 's' && rxBuffer[1] == '6') {
 8000a16:	4b75      	ldr	r3, [pc, #468]	@ (8000bec <HAL_UART_RxCpltCallback+0x200>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b73      	cmp	r3, #115	@ 0x73
 8000a1c:	d124      	bne.n	8000a68 <HAL_UART_RxCpltCallback+0x7c>
 8000a1e:	4b73      	ldr	r3, [pc, #460]	@ (8000bec <HAL_UART_RxCpltCallback+0x200>)
 8000a20:	785b      	ldrb	r3, [r3, #1]
 8000a22:	2b36      	cmp	r3, #54	@ 0x36
 8000a24:	d120      	bne.n	8000a68 <HAL_UART_RxCpltCallback+0x7c>
                 int raw_angle = get_angle(rxBuffer);
 8000a26:	4871      	ldr	r0, [pc, #452]	@ (8000bec <HAL_UART_RxCpltCallback+0x200>)
 8000a28:	f7ff ffa6 	bl	8000978 <get_angle>
 8000a2c:	62f8      	str	r0, [r7, #44]	@ 0x2c

                 if (raw_angle >= 0) {  // Ensure get_angle did not return an error
 8000a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	f2c0 80ba 	blt.w	8000baa <HAL_UART_RxCpltCallback+0x1be>
                     float angle = (raw_angle / 1.8f) + 25.0f;
 8000a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a38:	ee07 3a90 	vmov	s15, r3
 8000a3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a40:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8000bf0 <HAL_UART_RxCpltCallback+0x204>
 8000a44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a48:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8000a4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a50:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (int)angle);
 8000a54:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000a58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a5c:	4b65      	ldr	r3, [pc, #404]	@ (8000bf4 <HAL_UART_RxCpltCallback+0x208>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	ee17 2a90 	vmov	r2, s15
 8000a64:	635a      	str	r2, [r3, #52]	@ 0x34
            if (rxBuffer[0] == 's' && rxBuffer[1] == '6') {
 8000a66:	e0a0      	b.n	8000baa <HAL_UART_RxCpltCallback+0x1be>
                 }
             }
            else if (rxBuffer[0] == 's' && rxBuffer[1] == '5') {
 8000a68:	4b60      	ldr	r3, [pc, #384]	@ (8000bec <HAL_UART_RxCpltCallback+0x200>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b73      	cmp	r3, #115	@ 0x73
 8000a6e:	d124      	bne.n	8000aba <HAL_UART_RxCpltCallback+0xce>
 8000a70:	4b5e      	ldr	r3, [pc, #376]	@ (8000bec <HAL_UART_RxCpltCallback+0x200>)
 8000a72:	785b      	ldrb	r3, [r3, #1]
 8000a74:	2b35      	cmp	r3, #53	@ 0x35
 8000a76:	d120      	bne.n	8000aba <HAL_UART_RxCpltCallback+0xce>
                 int raw_angle = get_angle(rxBuffer);
 8000a78:	485c      	ldr	r0, [pc, #368]	@ (8000bec <HAL_UART_RxCpltCallback+0x200>)
 8000a7a:	f7ff ff7d 	bl	8000978 <get_angle>
 8000a7e:	6278      	str	r0, [r7, #36]	@ 0x24

                 if (raw_angle >= 0) {  // Ensure get_angle did not return an error
 8000a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	f2c0 8093 	blt.w	8000bae <HAL_UART_RxCpltCallback+0x1c2>
                     float angle = (raw_angle / 1.8f) + 25.0f;
 8000a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a8a:	ee07 3a90 	vmov	s15, r3
 8000a8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a92:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8000bf0 <HAL_UART_RxCpltCallback+0x204>
 8000a96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a9a:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8000a9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000aa2:	edc7 7a08 	vstr	s15, [r7, #32]
                     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, (int)angle);
 8000aa6:	edd7 7a08 	vldr	s15, [r7, #32]
 8000aaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000aae:	4b51      	ldr	r3, [pc, #324]	@ (8000bf4 <HAL_UART_RxCpltCallback+0x208>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	ee17 2a90 	vmov	r2, s15
 8000ab6:	639a      	str	r2, [r3, #56]	@ 0x38
            else if (rxBuffer[0] == 's' && rxBuffer[1] == '5') {
 8000ab8:	e079      	b.n	8000bae <HAL_UART_RxCpltCallback+0x1c2>
                 }
             }
            else if (rxBuffer[0] == 's' && rxBuffer[1] == '4') {
 8000aba:	4b4c      	ldr	r3, [pc, #304]	@ (8000bec <HAL_UART_RxCpltCallback+0x200>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b73      	cmp	r3, #115	@ 0x73
 8000ac0:	d123      	bne.n	8000b0a <HAL_UART_RxCpltCallback+0x11e>
 8000ac2:	4b4a      	ldr	r3, [pc, #296]	@ (8000bec <HAL_UART_RxCpltCallback+0x200>)
 8000ac4:	785b      	ldrb	r3, [r3, #1]
 8000ac6:	2b34      	cmp	r3, #52	@ 0x34
 8000ac8:	d11f      	bne.n	8000b0a <HAL_UART_RxCpltCallback+0x11e>
                 int raw_angle = get_angle(rxBuffer);
 8000aca:	4848      	ldr	r0, [pc, #288]	@ (8000bec <HAL_UART_RxCpltCallback+0x200>)
 8000acc:	f7ff ff54 	bl	8000978 <get_angle>
 8000ad0:	61f8      	str	r0, [r7, #28]

                 if (raw_angle >= 0) {  // Ensure get_angle did not return an error
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	db6c      	blt.n	8000bb2 <HAL_UART_RxCpltCallback+0x1c6>
                     float angle = (raw_angle / 1.8f) + 25.0f;
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	ee07 3a90 	vmov	s15, r3
 8000ade:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ae2:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8000bf0 <HAL_UART_RxCpltCallback+0x204>
 8000ae6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000aea:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8000aee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000af2:	edc7 7a06 	vstr	s15, [r7, #24]
                     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, (int)angle);
 8000af6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000afa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000afe:	4b3d      	ldr	r3, [pc, #244]	@ (8000bf4 <HAL_UART_RxCpltCallback+0x208>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	ee17 2a90 	vmov	r2, s15
 8000b06:	63da      	str	r2, [r3, #60]	@ 0x3c
            else if (rxBuffer[0] == 's' && rxBuffer[1] == '4') {
 8000b08:	e053      	b.n	8000bb2 <HAL_UART_RxCpltCallback+0x1c6>
                 }
            }
            else if (rxBuffer[0] == 's' && rxBuffer[1] == '3') {
 8000b0a:	4b38      	ldr	r3, [pc, #224]	@ (8000bec <HAL_UART_RxCpltCallback+0x200>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b73      	cmp	r3, #115	@ 0x73
 8000b10:	d123      	bne.n	8000b5a <HAL_UART_RxCpltCallback+0x16e>
 8000b12:	4b36      	ldr	r3, [pc, #216]	@ (8000bec <HAL_UART_RxCpltCallback+0x200>)
 8000b14:	785b      	ldrb	r3, [r3, #1]
 8000b16:	2b33      	cmp	r3, #51	@ 0x33
 8000b18:	d11f      	bne.n	8000b5a <HAL_UART_RxCpltCallback+0x16e>
                 int raw_angle = get_angle(rxBuffer);
 8000b1a:	4834      	ldr	r0, [pc, #208]	@ (8000bec <HAL_UART_RxCpltCallback+0x200>)
 8000b1c:	f7ff ff2c 	bl	8000978 <get_angle>
 8000b20:	6178      	str	r0, [r7, #20]

                 if (raw_angle >= 0) {  // Ensure get_angle did not return an error
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	db46      	blt.n	8000bb6 <HAL_UART_RxCpltCallback+0x1ca>
                     float angle = (raw_angle / 1.8f) + 25.0f;
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	ee07 3a90 	vmov	s15, r3
 8000b2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b32:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8000bf0 <HAL_UART_RxCpltCallback+0x204>
 8000b36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b3a:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8000b3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b42:	edc7 7a04 	vstr	s15, [r7, #16]
                     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, (int)angle);
 8000b46:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b4e:	4b29      	ldr	r3, [pc, #164]	@ (8000bf4 <HAL_UART_RxCpltCallback+0x208>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	ee17 2a90 	vmov	r2, s15
 8000b56:	641a      	str	r2, [r3, #64]	@ 0x40
            else if (rxBuffer[0] == 's' && rxBuffer[1] == '3') {
 8000b58:	e02d      	b.n	8000bb6 <HAL_UART_RxCpltCallback+0x1ca>
                 }
            }
            else if (rxBuffer[0] == 's' && rxBuffer[1] == '2') {
 8000b5a:	4b24      	ldr	r3, [pc, #144]	@ (8000bec <HAL_UART_RxCpltCallback+0x200>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b73      	cmp	r3, #115	@ 0x73
 8000b60:	d12a      	bne.n	8000bb8 <HAL_UART_RxCpltCallback+0x1cc>
 8000b62:	4b22      	ldr	r3, [pc, #136]	@ (8000bec <HAL_UART_RxCpltCallback+0x200>)
 8000b64:	785b      	ldrb	r3, [r3, #1]
 8000b66:	2b32      	cmp	r3, #50	@ 0x32
 8000b68:	d126      	bne.n	8000bb8 <HAL_UART_RxCpltCallback+0x1cc>
                 int raw_angle = get_angle(rxBuffer);
 8000b6a:	4820      	ldr	r0, [pc, #128]	@ (8000bec <HAL_UART_RxCpltCallback+0x200>)
 8000b6c:	f7ff ff04 	bl	8000978 <get_angle>
 8000b70:	60f8      	str	r0, [r7, #12]

                 if (raw_angle >= 0) {  // Ensure get_angle did not return an error
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	db1f      	blt.n	8000bb8 <HAL_UART_RxCpltCallback+0x1cc>
                     float angle = (raw_angle / 1.8f) + 25.0f;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	ee07 3a90 	vmov	s15, r3
 8000b7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b82:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8000bf0 <HAL_UART_RxCpltCallback+0x204>
 8000b86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b8a:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8000b8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b92:	edc7 7a02 	vstr	s15, [r7, #8]
                     __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, (int)angle);
 8000b96:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b9e:	4b16      	ldr	r3, [pc, #88]	@ (8000bf8 <HAL_UART_RxCpltCallback+0x20c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	ee17 2a90 	vmov	r2, s15
 8000ba6:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ba8:	e006      	b.n	8000bb8 <HAL_UART_RxCpltCallback+0x1cc>
            if (rxBuffer[0] == 's' && rxBuffer[1] == '6') {
 8000baa:	bf00      	nop
 8000bac:	e004      	b.n	8000bb8 <HAL_UART_RxCpltCallback+0x1cc>
            else if (rxBuffer[0] == 's' && rxBuffer[1] == '5') {
 8000bae:	bf00      	nop
 8000bb0:	e002      	b.n	8000bb8 <HAL_UART_RxCpltCallback+0x1cc>
            else if (rxBuffer[0] == 's' && rxBuffer[1] == '4') {
 8000bb2:	bf00      	nop
 8000bb4:	e000      	b.n	8000bb8 <HAL_UART_RxCpltCallback+0x1cc>
            else if (rxBuffer[0] == 's' && rxBuffer[1] == '3') {
 8000bb6:	bf00      	nop
                 }
            }
            // Send the received message to the CDC (Virtual COM Port)
            CDC_Transmit_FS(rxBuffer, RX_BUFFER_SIZE);
 8000bb8:	2105      	movs	r1, #5
 8000bba:	480c      	ldr	r0, [pc, #48]	@ (8000bec <HAL_UART_RxCpltCallback+0x200>)
 8000bbc:	f007 ff5c 	bl	8008a78 <CDC_Transmit_FS>

            rxIndex = 0;  // Reset the index to start a new message
 8000bc0:	4b09      	ldr	r3, [pc, #36]	@ (8000be8 <HAL_UART_RxCpltCallback+0x1fc>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	701a      	strb	r2, [r3, #0]
        }

        // Re-enable UART receive interrupt to continue receiving
        HAL_UART_Receive_IT(&huart2, &rxBuffer[rxIndex], 1);
 8000bc6:	4b08      	ldr	r3, [pc, #32]	@ (8000be8 <HAL_UART_RxCpltCallback+0x1fc>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <HAL_UART_RxCpltCallback+0x200>)
 8000bce:	4413      	add	r3, r2
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4809      	ldr	r0, [pc, #36]	@ (8000bfc <HAL_UART_RxCpltCallback+0x210>)
 8000bd6:	f003 fc53 	bl	8004480 <HAL_UART_Receive_IT>
    }
}
 8000bda:	bf00      	nop
 8000bdc:	3730      	adds	r7, #48	@ 0x30
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40004400 	.word	0x40004400
 8000be8:	20000179 	.word	0x20000179
 8000bec:	20000174 	.word	0x20000174
 8000bf0:	3fe66666 	.word	0x3fe66666
 8000bf4:	2000017c 	.word	0x2000017c
 8000bf8:	200001c4 	.word	0x200001c4
 8000bfc:	2000020c 	.word	0x2000020c

08000c00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4b10      	ldr	r3, [pc, #64]	@ (8000c4c <HAL_MspInit+0x4c>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c0e:	4a0f      	ldr	r2, [pc, #60]	@ (8000c4c <HAL_MspInit+0x4c>)
 8000c10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c16:	4b0d      	ldr	r3, [pc, #52]	@ (8000c4c <HAL_MspInit+0x4c>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	4b09      	ldr	r3, [pc, #36]	@ (8000c4c <HAL_MspInit+0x4c>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2a:	4a08      	ldr	r2, [pc, #32]	@ (8000c4c <HAL_MspInit+0x4c>)
 8000c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c32:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <HAL_MspInit+0x4c>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800

08000c50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a15      	ldr	r2, [pc, #84]	@ (8000cb4 <HAL_TIM_Base_MspInit+0x64>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d10e      	bne.n	8000c80 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	4b14      	ldr	r3, [pc, #80]	@ (8000cb8 <HAL_TIM_Base_MspInit+0x68>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c6a:	4a13      	ldr	r2, [pc, #76]	@ (8000cb8 <HAL_TIM_Base_MspInit+0x68>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c72:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <HAL_TIM_Base_MspInit+0x68>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c7e:	e012      	b.n	8000ca6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c88:	d10d      	bne.n	8000ca6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb8 <HAL_TIM_Base_MspInit+0x68>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c92:	4a09      	ldr	r2, [pc, #36]	@ (8000cb8 <HAL_TIM_Base_MspInit+0x68>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c9a:	4b07      	ldr	r3, [pc, #28]	@ (8000cb8 <HAL_TIM_Base_MspInit+0x68>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
}
 8000ca6:	bf00      	nop
 8000ca8:	3714      	adds	r7, #20
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40010000 	.word	0x40010000
 8000cb8:	40023800 	.word	0x40023800

08000cbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	@ 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a24      	ldr	r2, [pc, #144]	@ (8000d6c <HAL_TIM_MspPostInit+0xb0>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d11f      	bne.n	8000d1e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	4b23      	ldr	r3, [pc, #140]	@ (8000d70 <HAL_TIM_MspPostInit+0xb4>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	4a22      	ldr	r2, [pc, #136]	@ (8000d70 <HAL_TIM_MspPostInit+0xb4>)
 8000ce8:	f043 0310 	orr.w	r3, r3, #16
 8000cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cee:	4b20      	ldr	r3, [pc, #128]	@ (8000d70 <HAL_TIM_MspPostInit+0xb4>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	f003 0310 	and.w	r3, r3, #16
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8000cfa:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8000cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	4619      	mov	r1, r3
 8000d16:	4817      	ldr	r0, [pc, #92]	@ (8000d74 <HAL_TIM_MspPostInit+0xb8>)
 8000d18:	f000 fbde 	bl	80014d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d1c:	e022      	b.n	8000d64 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d26:	d11d      	bne.n	8000d64 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	4b10      	ldr	r3, [pc, #64]	@ (8000d70 <HAL_TIM_MspPostInit+0xb4>)
 8000d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d30:	4a0f      	ldr	r2, [pc, #60]	@ (8000d70 <HAL_TIM_MspPostInit+0xb4>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d38:	4b0d      	ldr	r3, [pc, #52]	@ (8000d70 <HAL_TIM_MspPostInit+0xb4>)
 8000d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d44:	2301      	movs	r3, #1
 8000d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d54:	2301      	movs	r3, #1
 8000d56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4806      	ldr	r0, [pc, #24]	@ (8000d78 <HAL_TIM_MspPostInit+0xbc>)
 8000d60:	f000 fbba 	bl	80014d8 <HAL_GPIO_Init>
}
 8000d64:	bf00      	nop
 8000d66:	3728      	adds	r7, #40	@ 0x28
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40010000 	.word	0x40010000
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40020000 	.word	0x40020000

08000d7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08a      	sub	sp, #40	@ 0x28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a1d      	ldr	r2, [pc, #116]	@ (8000e10 <HAL_UART_MspInit+0x94>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d133      	bne.n	8000e06 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e14 <HAL_UART_MspInit+0x98>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da6:	4a1b      	ldr	r2, [pc, #108]	@ (8000e14 <HAL_UART_MspInit+0x98>)
 8000da8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dae:	4b19      	ldr	r3, [pc, #100]	@ (8000e14 <HAL_UART_MspInit+0x98>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <HAL_UART_MspInit+0x98>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	4a14      	ldr	r2, [pc, #80]	@ (8000e14 <HAL_UART_MspInit+0x98>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dca:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <HAL_UART_MspInit+0x98>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dd6:	230c      	movs	r3, #12
 8000dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de2:	2303      	movs	r3, #3
 8000de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000de6:	2307      	movs	r3, #7
 8000de8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dea:	f107 0314 	add.w	r3, r7, #20
 8000dee:	4619      	mov	r1, r3
 8000df0:	4809      	ldr	r0, [pc, #36]	@ (8000e18 <HAL_UART_MspInit+0x9c>)
 8000df2:	f000 fb71 	bl	80014d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2100      	movs	r1, #0
 8000dfa:	2026      	movs	r0, #38	@ 0x26
 8000dfc:	f000 faa3 	bl	8001346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e00:	2026      	movs	r0, #38	@ 0x26
 8000e02:	f000 fabc 	bl	800137e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e06:	bf00      	nop
 8000e08:	3728      	adds	r7, #40	@ 0x28
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40004400 	.word	0x40004400
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020000 	.word	0x40020000

08000e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <NMI_Handler+0x4>

08000e24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <HardFault_Handler+0x4>

08000e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <MemManage_Handler+0x4>

08000e34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <BusFault_Handler+0x4>

08000e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <UsageFault_Handler+0x4>

08000e44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e72:	f000 f949 	bl	8001108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e80:	4802      	ldr	r0, [pc, #8]	@ (8000e8c <USART2_IRQHandler+0x10>)
 8000e82:	f003 fb23 	bl	80044cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000020c 	.word	0x2000020c

08000e90 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e94:	4802      	ldr	r0, [pc, #8]	@ (8000ea0 <OTG_FS_IRQHandler+0x10>)
 8000e96:	f000 fe18 	bl	8001aca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	2000173c 	.word	0x2000173c

08000ea4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	e00a      	b.n	8000ecc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000eb6:	f3af 8000 	nop.w
 8000eba:	4601      	mov	r1, r0
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	1c5a      	adds	r2, r3, #1
 8000ec0:	60ba      	str	r2, [r7, #8]
 8000ec2:	b2ca      	uxtb	r2, r1
 8000ec4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	697a      	ldr	r2, [r7, #20]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	dbf0      	blt.n	8000eb6 <_read+0x12>
  }

  return len;
 8000ed4:	687b      	ldr	r3, [r7, #4]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b086      	sub	sp, #24
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	60f8      	str	r0, [r7, #12]
 8000ee6:	60b9      	str	r1, [r7, #8]
 8000ee8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	e009      	b.n	8000f04 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	1c5a      	adds	r2, r3, #1
 8000ef4:	60ba      	str	r2, [r7, #8]
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	3301      	adds	r3, #1
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	697a      	ldr	r2, [r7, #20]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	dbf1      	blt.n	8000ef0 <_write+0x12>
  }
  return len;
 8000f0c:	687b      	ldr	r3, [r7, #4]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <_close>:

int _close(int file)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
 8000f36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f3e:	605a      	str	r2, [r3, #4]
  return 0;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <_isatty>:

int _isatty(int file)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f56:	2301      	movs	r3, #1
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
	...

08000f80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f88:	4a14      	ldr	r2, [pc, #80]	@ (8000fdc <_sbrk+0x5c>)
 8000f8a:	4b15      	ldr	r3, [pc, #84]	@ (8000fe0 <_sbrk+0x60>)
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f94:	4b13      	ldr	r3, [pc, #76]	@ (8000fe4 <_sbrk+0x64>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d102      	bne.n	8000fa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f9c:	4b11      	ldr	r3, [pc, #68]	@ (8000fe4 <_sbrk+0x64>)
 8000f9e:	4a12      	ldr	r2, [pc, #72]	@ (8000fe8 <_sbrk+0x68>)
 8000fa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fa2:	4b10      	ldr	r3, [pc, #64]	@ (8000fe4 <_sbrk+0x64>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d207      	bcs.n	8000fc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fb0:	f008 fc8c 	bl	80098cc <__errno>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	220c      	movs	r2, #12
 8000fb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fba:	f04f 33ff 	mov.w	r3, #4294967295
 8000fbe:	e009      	b.n	8000fd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc0:	4b08      	ldr	r3, [pc, #32]	@ (8000fe4 <_sbrk+0x64>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fc6:	4b07      	ldr	r3, [pc, #28]	@ (8000fe4 <_sbrk+0x64>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	4a05      	ldr	r2, [pc, #20]	@ (8000fe4 <_sbrk+0x64>)
 8000fd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3718      	adds	r7, #24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20020000 	.word	0x20020000
 8000fe0:	00000400 	.word	0x00000400
 8000fe4:	20000254 	.word	0x20000254
 8000fe8:	20001f90 	.word	0x20001f90

08000fec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff0:	4b06      	ldr	r3, [pc, #24]	@ (800100c <SystemInit+0x20>)
 8000ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ff6:	4a05      	ldr	r2, [pc, #20]	@ (800100c <SystemInit+0x20>)
 8000ff8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ffc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001010:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001048 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001014:	f7ff ffea 	bl	8000fec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001018:	480c      	ldr	r0, [pc, #48]	@ (800104c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800101a:	490d      	ldr	r1, [pc, #52]	@ (8001050 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800101c:	4a0d      	ldr	r2, [pc, #52]	@ (8001054 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001020:	e002      	b.n	8001028 <LoopCopyDataInit>

08001022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001026:	3304      	adds	r3, #4

08001028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800102c:	d3f9      	bcc.n	8001022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102e:	4a0a      	ldr	r2, [pc, #40]	@ (8001058 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001030:	4c0a      	ldr	r4, [pc, #40]	@ (800105c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001034:	e001      	b.n	800103a <LoopFillZerobss>

08001036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001038:	3204      	adds	r2, #4

0800103a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800103c:	d3fb      	bcc.n	8001036 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800103e:	f008 fc4b 	bl	80098d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001042:	f7ff fa39 	bl	80004b8 <main>
  bx  lr    
 8001046:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001048:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800104c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001050:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8001054:	08009f74 	.word	0x08009f74
  ldr r2, =_sbss
 8001058:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 800105c:	20001f8c 	.word	0x20001f8c

08001060 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001060:	e7fe      	b.n	8001060 <ADC_IRQHandler>
	...

08001064 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001068:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <HAL_Init+0x40>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0d      	ldr	r2, [pc, #52]	@ (80010a4 <HAL_Init+0x40>)
 800106e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001072:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001074:	4b0b      	ldr	r3, [pc, #44]	@ (80010a4 <HAL_Init+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0a      	ldr	r2, [pc, #40]	@ (80010a4 <HAL_Init+0x40>)
 800107a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800107e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001080:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a07      	ldr	r2, [pc, #28]	@ (80010a4 <HAL_Init+0x40>)
 8001086:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800108a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108c:	2003      	movs	r0, #3
 800108e:	f000 f94f 	bl	8001330 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001092:	200f      	movs	r0, #15
 8001094:	f000 f808 	bl	80010a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001098:	f7ff fdb2 	bl	8000c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023c00 	.word	0x40023c00

080010a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b0:	4b12      	ldr	r3, [pc, #72]	@ (80010fc <HAL_InitTick+0x54>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <HAL_InitTick+0x58>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010be:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 f967 	bl	800139a <HAL_SYSTICK_Config>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00e      	b.n	80010f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b0f      	cmp	r3, #15
 80010da:	d80a      	bhi.n	80010f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010dc:	2200      	movs	r2, #0
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	f000 f92f 	bl	8001346 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e8:	4a06      	ldr	r2, [pc, #24]	@ (8001104 <HAL_InitTick+0x5c>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e000      	b.n	80010f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000000 	.word	0x20000000
 8001100:	20000008 	.word	0x20000008
 8001104:	20000004 	.word	0x20000004

08001108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <HAL_IncTick+0x20>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4b06      	ldr	r3, [pc, #24]	@ (800112c <HAL_IncTick+0x24>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4413      	add	r3, r2
 8001118:	4a04      	ldr	r2, [pc, #16]	@ (800112c <HAL_IncTick+0x24>)
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000008 	.word	0x20000008
 800112c:	20000258 	.word	0x20000258

08001130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;
 8001134:	4b03      	ldr	r3, [pc, #12]	@ (8001144 <HAL_GetTick+0x14>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000258 	.word	0x20000258

08001148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001150:	f7ff ffee 	bl	8001130 <HAL_GetTick>
 8001154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001160:	d005      	beq.n	800116e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001162:	4b0a      	ldr	r3, [pc, #40]	@ (800118c <HAL_Delay+0x44>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4413      	add	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800116e:	bf00      	nop
 8001170:	f7ff ffde 	bl	8001130 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	429a      	cmp	r2, r3
 800117e:	d8f7      	bhi.n	8001170 <HAL_Delay+0x28>
  {
  }
}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000008 	.word	0x20000008

08001190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a0:	4b0c      	ldr	r3, [pc, #48]	@ (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011ac:	4013      	ands	r3, r2
 80011ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c2:	4a04      	ldr	r2, [pc, #16]	@ (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	60d3      	str	r3, [r2, #12]
}
 80011c8:	bf00      	nop
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011dc:	4b04      	ldr	r3, [pc, #16]	@ (80011f0 <__NVIC_GetPriorityGrouping+0x18>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	f003 0307 	and.w	r3, r3, #7
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	2b00      	cmp	r3, #0
 8001204:	db0b      	blt.n	800121e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 021f 	and.w	r2, r3, #31
 800120c:	4907      	ldr	r1, [pc, #28]	@ (800122c <__NVIC_EnableIRQ+0x38>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	095b      	lsrs	r3, r3, #5
 8001214:	2001      	movs	r0, #1
 8001216:	fa00 f202 	lsl.w	r2, r0, r2
 800121a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000e100 	.word	0xe000e100

08001230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	6039      	str	r1, [r7, #0]
 800123a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	2b00      	cmp	r3, #0
 8001242:	db0a      	blt.n	800125a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	b2da      	uxtb	r2, r3
 8001248:	490c      	ldr	r1, [pc, #48]	@ (800127c <__NVIC_SetPriority+0x4c>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	0112      	lsls	r2, r2, #4
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	440b      	add	r3, r1
 8001254:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001258:	e00a      	b.n	8001270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4908      	ldr	r1, [pc, #32]	@ (8001280 <__NVIC_SetPriority+0x50>)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	3b04      	subs	r3, #4
 8001268:	0112      	lsls	r2, r2, #4
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	440b      	add	r3, r1
 800126e:	761a      	strb	r2, [r3, #24]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000e100 	.word	0xe000e100
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	@ 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f1c3 0307 	rsb	r3, r3, #7
 800129e:	2b04      	cmp	r3, #4
 80012a0:	bf28      	it	cs
 80012a2:	2304      	movcs	r3, #4
 80012a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3304      	adds	r3, #4
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	d902      	bls.n	80012b4 <NVIC_EncodePriority+0x30>
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3b03      	subs	r3, #3
 80012b2:	e000      	b.n	80012b6 <NVIC_EncodePriority+0x32>
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	f04f 32ff 	mov.w	r2, #4294967295
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43da      	mvns	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	401a      	ands	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012cc:	f04f 31ff 	mov.w	r1, #4294967295
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa01 f303 	lsl.w	r3, r1, r3
 80012d6:	43d9      	mvns	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	4313      	orrs	r3, r2
         );
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3724      	adds	r7, #36	@ 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012fc:	d301      	bcc.n	8001302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fe:	2301      	movs	r3, #1
 8001300:	e00f      	b.n	8001322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001302:	4a0a      	ldr	r2, [pc, #40]	@ (800132c <SysTick_Config+0x40>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130a:	210f      	movs	r1, #15
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	f7ff ff8e 	bl	8001230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001314:	4b05      	ldr	r3, [pc, #20]	@ (800132c <SysTick_Config+0x40>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131a:	4b04      	ldr	r3, [pc, #16]	@ (800132c <SysTick_Config+0x40>)
 800131c:	2207      	movs	r2, #7
 800131e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	e000e010 	.word	0xe000e010

08001330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ff29 	bl	8001190 <__NVIC_SetPriorityGrouping>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001346:	b580      	push	{r7, lr}
 8001348:	b086      	sub	sp, #24
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
 8001352:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001358:	f7ff ff3e 	bl	80011d8 <__NVIC_GetPriorityGrouping>
 800135c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	68b9      	ldr	r1, [r7, #8]
 8001362:	6978      	ldr	r0, [r7, #20]
 8001364:	f7ff ff8e 	bl	8001284 <NVIC_EncodePriority>
 8001368:	4602      	mov	r2, r0
 800136a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff5d 	bl	8001230 <__NVIC_SetPriority>
}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff31 	bl	80011f4 <__NVIC_EnableIRQ>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ffa2 	bl	80012ec <SysTick_Config>
 80013a8:	4603      	mov	r3, r0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b084      	sub	sp, #16
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013c0:	f7ff feb6 	bl	8001130 <HAL_GetTick>
 80013c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d008      	beq.n	80013e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2280      	movs	r2, #128	@ 0x80
 80013d6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e052      	b.n	800148a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f022 0216 	bic.w	r2, r2, #22
 80013f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	695a      	ldr	r2, [r3, #20]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001402:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001408:	2b00      	cmp	r3, #0
 800140a:	d103      	bne.n	8001414 <HAL_DMA_Abort+0x62>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001410:	2b00      	cmp	r3, #0
 8001412:	d007      	beq.n	8001424 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 0208 	bic.w	r2, r2, #8
 8001422:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 0201 	bic.w	r2, r2, #1
 8001432:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001434:	e013      	b.n	800145e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001436:	f7ff fe7b 	bl	8001130 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b05      	cmp	r3, #5
 8001442:	d90c      	bls.n	800145e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2220      	movs	r2, #32
 8001448:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2203      	movs	r2, #3
 800144e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e015      	b.n	800148a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1e4      	bne.n	8001436 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001470:	223f      	movs	r2, #63	@ 0x3f
 8001472:	409a      	lsls	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2201      	movs	r2, #1
 800147c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d004      	beq.n	80014b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2280      	movs	r2, #128	@ 0x80
 80014aa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e00c      	b.n	80014ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2205      	movs	r2, #5
 80014b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0201 	bic.w	r2, r2, #1
 80014c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d8:	b480      	push	{r7}
 80014da:	b089      	sub	sp, #36	@ 0x24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
 80014f2:	e16b      	b.n	80017cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014f4:	2201      	movs	r2, #1
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	429a      	cmp	r2, r3
 800150e:	f040 815a 	bne.w	80017c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	2b01      	cmp	r3, #1
 800151c:	d005      	beq.n	800152a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001526:	2b02      	cmp	r3, #2
 8001528:	d130      	bne.n	800158c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	2203      	movs	r2, #3
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4013      	ands	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	68da      	ldr	r2, [r3, #12]
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4313      	orrs	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001560:	2201      	movs	r2, #1
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	091b      	lsrs	r3, r3, #4
 8001576:	f003 0201 	and.w	r2, r3, #1
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4313      	orrs	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 0303 	and.w	r3, r3, #3
 8001594:	2b03      	cmp	r3, #3
 8001596:	d017      	beq.n	80015c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	2203      	movs	r2, #3
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d123      	bne.n	800161c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	08da      	lsrs	r2, r3, #3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3208      	adds	r2, #8
 80015dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	220f      	movs	r2, #15
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	691a      	ldr	r2, [r3, #16]
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4313      	orrs	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	08da      	lsrs	r2, r3, #3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	3208      	adds	r2, #8
 8001616:	69b9      	ldr	r1, [r7, #24]
 8001618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	2203      	movs	r2, #3
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 0203 	and.w	r2, r3, #3
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 80b4 	beq.w	80017c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	4b60      	ldr	r3, [pc, #384]	@ (80017e4 <HAL_GPIO_Init+0x30c>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001666:	4a5f      	ldr	r2, [pc, #380]	@ (80017e4 <HAL_GPIO_Init+0x30c>)
 8001668:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800166c:	6453      	str	r3, [r2, #68]	@ 0x44
 800166e:	4b5d      	ldr	r3, [pc, #372]	@ (80017e4 <HAL_GPIO_Init+0x30c>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001672:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800167a:	4a5b      	ldr	r2, [pc, #364]	@ (80017e8 <HAL_GPIO_Init+0x310>)
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	089b      	lsrs	r3, r3, #2
 8001680:	3302      	adds	r3, #2
 8001682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001686:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f003 0303 	and.w	r3, r3, #3
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	220f      	movs	r2, #15
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a52      	ldr	r2, [pc, #328]	@ (80017ec <HAL_GPIO_Init+0x314>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d02b      	beq.n	80016fe <HAL_GPIO_Init+0x226>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a51      	ldr	r2, [pc, #324]	@ (80017f0 <HAL_GPIO_Init+0x318>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d025      	beq.n	80016fa <HAL_GPIO_Init+0x222>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a50      	ldr	r2, [pc, #320]	@ (80017f4 <HAL_GPIO_Init+0x31c>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d01f      	beq.n	80016f6 <HAL_GPIO_Init+0x21e>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a4f      	ldr	r2, [pc, #316]	@ (80017f8 <HAL_GPIO_Init+0x320>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d019      	beq.n	80016f2 <HAL_GPIO_Init+0x21a>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a4e      	ldr	r2, [pc, #312]	@ (80017fc <HAL_GPIO_Init+0x324>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d013      	beq.n	80016ee <HAL_GPIO_Init+0x216>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a4d      	ldr	r2, [pc, #308]	@ (8001800 <HAL_GPIO_Init+0x328>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d00d      	beq.n	80016ea <HAL_GPIO_Init+0x212>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a4c      	ldr	r2, [pc, #304]	@ (8001804 <HAL_GPIO_Init+0x32c>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d007      	beq.n	80016e6 <HAL_GPIO_Init+0x20e>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a4b      	ldr	r2, [pc, #300]	@ (8001808 <HAL_GPIO_Init+0x330>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d101      	bne.n	80016e2 <HAL_GPIO_Init+0x20a>
 80016de:	2307      	movs	r3, #7
 80016e0:	e00e      	b.n	8001700 <HAL_GPIO_Init+0x228>
 80016e2:	2308      	movs	r3, #8
 80016e4:	e00c      	b.n	8001700 <HAL_GPIO_Init+0x228>
 80016e6:	2306      	movs	r3, #6
 80016e8:	e00a      	b.n	8001700 <HAL_GPIO_Init+0x228>
 80016ea:	2305      	movs	r3, #5
 80016ec:	e008      	b.n	8001700 <HAL_GPIO_Init+0x228>
 80016ee:	2304      	movs	r3, #4
 80016f0:	e006      	b.n	8001700 <HAL_GPIO_Init+0x228>
 80016f2:	2303      	movs	r3, #3
 80016f4:	e004      	b.n	8001700 <HAL_GPIO_Init+0x228>
 80016f6:	2302      	movs	r3, #2
 80016f8:	e002      	b.n	8001700 <HAL_GPIO_Init+0x228>
 80016fa:	2301      	movs	r3, #1
 80016fc:	e000      	b.n	8001700 <HAL_GPIO_Init+0x228>
 80016fe:	2300      	movs	r3, #0
 8001700:	69fa      	ldr	r2, [r7, #28]
 8001702:	f002 0203 	and.w	r2, r2, #3
 8001706:	0092      	lsls	r2, r2, #2
 8001708:	4093      	lsls	r3, r2
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4313      	orrs	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001710:	4935      	ldr	r1, [pc, #212]	@ (80017e8 <HAL_GPIO_Init+0x310>)
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	089b      	lsrs	r3, r3, #2
 8001716:	3302      	adds	r3, #2
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800171e:	4b3b      	ldr	r3, [pc, #236]	@ (800180c <HAL_GPIO_Init+0x334>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	43db      	mvns	r3, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4013      	ands	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	4313      	orrs	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001742:	4a32      	ldr	r2, [pc, #200]	@ (800180c <HAL_GPIO_Init+0x334>)
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001748:	4b30      	ldr	r3, [pc, #192]	@ (800180c <HAL_GPIO_Init+0x334>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d003      	beq.n	800176c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800176c:	4a27      	ldr	r2, [pc, #156]	@ (800180c <HAL_GPIO_Init+0x334>)
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001772:	4b26      	ldr	r3, [pc, #152]	@ (800180c <HAL_GPIO_Init+0x334>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	43db      	mvns	r3, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4013      	ands	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001796:	4a1d      	ldr	r2, [pc, #116]	@ (800180c <HAL_GPIO_Init+0x334>)
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800179c:	4b1b      	ldr	r3, [pc, #108]	@ (800180c <HAL_GPIO_Init+0x334>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	43db      	mvns	r3, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	4313      	orrs	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017c0:	4a12      	ldr	r2, [pc, #72]	@ (800180c <HAL_GPIO_Init+0x334>)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3301      	adds	r3, #1
 80017ca:	61fb      	str	r3, [r7, #28]
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	2b0f      	cmp	r3, #15
 80017d0:	f67f ae90 	bls.w	80014f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017d4:	bf00      	nop
 80017d6:	bf00      	nop
 80017d8:	3724      	adds	r7, #36	@ 0x24
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40013800 	.word	0x40013800
 80017ec:	40020000 	.word	0x40020000
 80017f0:	40020400 	.word	0x40020400
 80017f4:	40020800 	.word	0x40020800
 80017f8:	40020c00 	.word	0x40020c00
 80017fc:	40021000 	.word	0x40021000
 8001800:	40021400 	.word	0x40021400
 8001804:	40021800 	.word	0x40021800
 8001808:	40021c00 	.word	0x40021c00
 800180c:	40013c00 	.word	0x40013c00

08001810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	807b      	strh	r3, [r7, #2]
 800181c:	4613      	mov	r3, r2
 800181e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001820:	787b      	ldrb	r3, [r7, #1]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001826:	887a      	ldrh	r2, [r7, #2]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800182c:	e003      	b.n	8001836 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800182e:	887b      	ldrh	r3, [r7, #2]
 8001830:	041a      	lsls	r2, r3, #16
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	619a      	str	r2, [r3, #24]
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b086      	sub	sp, #24
 8001846:	af02      	add	r7, sp, #8
 8001848:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e101      	b.n	8001a58 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d106      	bne.n	8001874 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f007 fa4a 	bl	8008d08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2203      	movs	r2, #3
 8001878:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001882:	d102      	bne.n	800188a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f003 fe31 	bl	80054f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6818      	ldr	r0, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	7c1a      	ldrb	r2, [r3, #16]
 800189c:	f88d 2000 	strb.w	r2, [sp]
 80018a0:	3304      	adds	r3, #4
 80018a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018a4:	f003 fd10 	bl	80052c8 <USB_CoreInit>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d005      	beq.n	80018ba <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2202      	movs	r2, #2
 80018b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e0ce      	b.n	8001a58 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2100      	movs	r1, #0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f003 fe29 	bl	8005518 <USB_SetCurrentMode>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d005      	beq.n	80018d8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2202      	movs	r2, #2
 80018d0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e0bf      	b.n	8001a58 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018d8:	2300      	movs	r3, #0
 80018da:	73fb      	strb	r3, [r7, #15]
 80018dc:	e04a      	b.n	8001974 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018de:	7bfa      	ldrb	r2, [r7, #15]
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	4413      	add	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	440b      	add	r3, r1
 80018ec:	3315      	adds	r3, #21
 80018ee:	2201      	movs	r2, #1
 80018f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018f2:	7bfa      	ldrb	r2, [r7, #15]
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	4413      	add	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	440b      	add	r3, r1
 8001900:	3314      	adds	r3, #20
 8001902:	7bfa      	ldrb	r2, [r7, #15]
 8001904:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001906:	7bfa      	ldrb	r2, [r7, #15]
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	b298      	uxth	r0, r3
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	4413      	add	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	440b      	add	r3, r1
 8001918:	332e      	adds	r3, #46	@ 0x2e
 800191a:	4602      	mov	r2, r0
 800191c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800191e:	7bfa      	ldrb	r2, [r7, #15]
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	4413      	add	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	440b      	add	r3, r1
 800192c:	3318      	adds	r3, #24
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001932:	7bfa      	ldrb	r2, [r7, #15]
 8001934:	6879      	ldr	r1, [r7, #4]
 8001936:	4613      	mov	r3, r2
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	4413      	add	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	440b      	add	r3, r1
 8001940:	331c      	adds	r3, #28
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001946:	7bfa      	ldrb	r2, [r7, #15]
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	4413      	add	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	3320      	adds	r3, #32
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800195a:	7bfa      	ldrb	r2, [r7, #15]
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	4613      	mov	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	4413      	add	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	440b      	add	r3, r1
 8001968:	3324      	adds	r3, #36	@ 0x24
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	3301      	adds	r3, #1
 8001972:	73fb      	strb	r3, [r7, #15]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	791b      	ldrb	r3, [r3, #4]
 8001978:	7bfa      	ldrb	r2, [r7, #15]
 800197a:	429a      	cmp	r2, r3
 800197c:	d3af      	bcc.n	80018de <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800197e:	2300      	movs	r3, #0
 8001980:	73fb      	strb	r3, [r7, #15]
 8001982:	e044      	b.n	8001a0e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001984:	7bfa      	ldrb	r2, [r7, #15]
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	4413      	add	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800199a:	7bfa      	ldrb	r2, [r7, #15]
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	4413      	add	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	440b      	add	r3, r1
 80019a8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80019ac:	7bfa      	ldrb	r2, [r7, #15]
 80019ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019b0:	7bfa      	ldrb	r2, [r7, #15]
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	4613      	mov	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	4413      	add	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019c6:	7bfa      	ldrb	r2, [r7, #15]
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	4613      	mov	r3, r2
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	4413      	add	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	440b      	add	r3, r1
 80019d4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019dc:	7bfa      	ldrb	r2, [r7, #15]
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	4413      	add	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019f2:	7bfa      	ldrb	r2, [r7, #15]
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	4613      	mov	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	4413      	add	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	440b      	add	r3, r1
 8001a00:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	73fb      	strb	r3, [r7, #15]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	791b      	ldrb	r3, [r3, #4]
 8001a12:	7bfa      	ldrb	r2, [r7, #15]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d3b5      	bcc.n	8001984 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6818      	ldr	r0, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	7c1a      	ldrb	r2, [r3, #16]
 8001a20:	f88d 2000 	strb.w	r2, [sp]
 8001a24:	3304      	adds	r3, #4
 8001a26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a28:	f003 fdc2 	bl	80055b0 <USB_DevInit>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d005      	beq.n	8001a3e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2202      	movs	r2, #2
 8001a36:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e00c      	b.n	8001a58 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f004 fe0c 	bl	800666e <USB_DevDisconnect>

  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d101      	bne.n	8001a7c <HAL_PCD_Start+0x1c>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e022      	b.n	8001ac2 <HAL_PCD_Start+0x62>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d009      	beq.n	8001aa4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d105      	bne.n	8001aa4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a9c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f003 fd13 	bl	80054d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f004 fdba 	bl	800662c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001aca:	b590      	push	{r4, r7, lr}
 8001acc:	b08d      	sub	sp, #52	@ 0x34
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ad8:	6a3b      	ldr	r3, [r7, #32]
 8001ada:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f004 fe78 	bl	80067d6 <USB_GetMode>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f040 848c 	bne.w	8002406 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f004 fddc 	bl	80066b0 <USB_ReadInterrupts>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 8482 	beq.w	8002404 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	0a1b      	lsrs	r3, r3, #8
 8001b0a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f004 fdc9 	bl	80066b0 <USB_ReadInterrupts>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d107      	bne.n	8001b38 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	695a      	ldr	r2, [r3, #20]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f002 0202 	and.w	r2, r2, #2
 8001b36:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f004 fdb7 	bl	80066b0 <USB_ReadInterrupts>
 8001b42:	4603      	mov	r3, r0
 8001b44:	f003 0310 	and.w	r3, r3, #16
 8001b48:	2b10      	cmp	r3, #16
 8001b4a:	d161      	bne.n	8001c10 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	699a      	ldr	r2, [r3, #24]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 0210 	bic.w	r2, r2, #16
 8001b5a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001b5c:	6a3b      	ldr	r3, [r7, #32]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	f003 020f 	and.w	r2, r3, #15
 8001b68:	4613      	mov	r3, r2
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	4413      	add	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	4413      	add	r3, r2
 8001b78:	3304      	adds	r3, #4
 8001b7a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	0c5b      	lsrs	r3, r3, #17
 8001b80:	f003 030f 	and.w	r3, r3, #15
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d124      	bne.n	8001bd2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001b8e:	4013      	ands	r3, r2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d035      	beq.n	8001c00 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	091b      	lsrs	r3, r3, #4
 8001b9c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	6a38      	ldr	r0, [r7, #32]
 8001ba8:	f004 fbee 	bl	8006388 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bb8:	441a      	add	r2, r3
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	695a      	ldr	r2, [r3, #20]
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	091b      	lsrs	r3, r3, #4
 8001bc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bca:	441a      	add	r2, r3
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	615a      	str	r2, [r3, #20]
 8001bd0:	e016      	b.n	8001c00 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	0c5b      	lsrs	r3, r3, #17
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	2b06      	cmp	r3, #6
 8001bdc:	d110      	bne.n	8001c00 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001be4:	2208      	movs	r2, #8
 8001be6:	4619      	mov	r1, r3
 8001be8:	6a38      	ldr	r0, [r7, #32]
 8001bea:	f004 fbcd 	bl	8006388 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	695a      	ldr	r2, [r3, #20]
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	091b      	lsrs	r3, r3, #4
 8001bf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bfa:	441a      	add	r2, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	699a      	ldr	r2, [r3, #24]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0210 	orr.w	r2, r2, #16
 8001c0e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f004 fd4b 	bl	80066b0 <USB_ReadInterrupts>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c20:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001c24:	f040 80a7 	bne.w	8001d76 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f004 fd50 	bl	80066d6 <USB_ReadDevAllOutEpInterrupt>
 8001c36:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001c38:	e099      	b.n	8001d6e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 808e 	beq.w	8001d62 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	4611      	mov	r1, r2
 8001c50:	4618      	mov	r0, r3
 8001c52:	f004 fd74 	bl	800673e <USB_ReadDevOutEPInterrupt>
 8001c56:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00c      	beq.n	8001c7c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c64:	015a      	lsls	r2, r3, #5
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	4413      	add	r3, r2
 8001c6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c6e:	461a      	mov	r2, r3
 8001c70:	2301      	movs	r3, #1
 8001c72:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001c74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 fea4 	bl	80029c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	f003 0308 	and.w	r3, r3, #8
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00c      	beq.n	8001ca0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c88:	015a      	lsls	r2, r3, #5
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c92:	461a      	mov	r2, r3
 8001c94:	2308      	movs	r3, #8
 8001c96:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001c98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 ff7a 	bl	8002b94 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	f003 0310 	and.w	r3, r3, #16
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d008      	beq.n	8001cbc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cac:	015a      	lsls	r2, r3, #5
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	2310      	movs	r3, #16
 8001cba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d030      	beq.n	8001d28 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cce:	2b80      	cmp	r3, #128	@ 0x80
 8001cd0:	d109      	bne.n	8001ce6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	69fa      	ldr	r2, [r7, #28]
 8001cdc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ce0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ce4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ce8:	4613      	mov	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4413      	add	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	78db      	ldrb	r3, [r3, #3]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d108      	bne.n	8001d16 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	2200      	movs	r2, #0
 8001d08:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	4619      	mov	r1, r3
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f007 f8ff 	bl	8008f14 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d18:	015a      	lsls	r2, r3, #5
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d22:	461a      	mov	r2, r3
 8001d24:	2302      	movs	r3, #2
 8001d26:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	f003 0320 	and.w	r3, r3, #32
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d008      	beq.n	8001d44 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d34:	015a      	lsls	r2, r3, #5
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	4413      	add	r3, r2
 8001d3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d3e:	461a      	mov	r2, r3
 8001d40:	2320      	movs	r3, #32
 8001d42:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d009      	beq.n	8001d62 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d50:	015a      	lsls	r2, r3, #5
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	4413      	add	r3, r2
 8001d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d60:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d64:	3301      	adds	r3, #1
 8001d66:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d6a:	085b      	lsrs	r3, r3, #1
 8001d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f47f af62 	bne.w	8001c3a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f004 fc98 	bl	80066b0 <USB_ReadInterrupts>
 8001d80:	4603      	mov	r3, r0
 8001d82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001d8a:	f040 80db 	bne.w	8001f44 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f004 fcb9 	bl	800670a <USB_ReadDevAllInEpInterrupt>
 8001d98:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001d9e:	e0cd      	b.n	8001f3c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 80c2 	beq.w	8001f30 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	4611      	mov	r1, r2
 8001db6:	4618      	mov	r0, r3
 8001db8:	f004 fcdf 	bl	800677a <USB_ReadDevInEPInterrupt>
 8001dbc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d057      	beq.n	8001e78 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	2201      	movs	r2, #1
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ddc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69f9      	ldr	r1, [r7, #28]
 8001de4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001de8:	4013      	ands	r3, r2
 8001dea:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dee:	015a      	lsls	r2, r3, #5
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	4413      	add	r3, r2
 8001df4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001df8:	461a      	mov	r2, r3
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	799b      	ldrb	r3, [r3, #6]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d132      	bne.n	8001e6c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	4413      	add	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	440b      	add	r3, r1
 8001e14:	3320      	adds	r3, #32
 8001e16:	6819      	ldr	r1, [r3, #0]
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4403      	add	r3, r0
 8001e26:	331c      	adds	r3, #28
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4419      	add	r1, r3
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e30:	4613      	mov	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4413      	add	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4403      	add	r3, r0
 8001e3a:	3320      	adds	r3, #32
 8001e3c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d113      	bne.n	8001e6c <HAL_PCD_IRQHandler+0x3a2>
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e48:	4613      	mov	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	3324      	adds	r3, #36	@ 0x24
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d108      	bne.n	8001e6c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6818      	ldr	r0, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001e64:	461a      	mov	r2, r3
 8001e66:	2101      	movs	r1, #1
 8001e68:	f004 fce6 	bl	8006838 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	4619      	mov	r1, r3
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f006 ffc9 	bl	8008e0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d008      	beq.n	8001e94 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e84:	015a      	lsls	r2, r3, #5
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	4413      	add	r3, r2
 8001e8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e8e:	461a      	mov	r2, r3
 8001e90:	2308      	movs	r3, #8
 8001e92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	f003 0310 	and.w	r3, r3, #16
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d008      	beq.n	8001eb0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea0:	015a      	lsls	r2, r3, #5
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001eaa:	461a      	mov	r2, r3
 8001eac:	2310      	movs	r3, #16
 8001eae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d008      	beq.n	8001ecc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ebc:	015a      	lsls	r2, r3, #5
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	2340      	movs	r3, #64	@ 0x40
 8001eca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d023      	beq.n	8001f1e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001ed6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ed8:	6a38      	ldr	r0, [r7, #32]
 8001eda:	f003 fccd 	bl	8005878 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	4413      	add	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	3310      	adds	r3, #16
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	3304      	adds	r3, #4
 8001ef0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	78db      	ldrb	r3, [r3, #3]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d108      	bne.n	8001f0c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	2200      	movs	r2, #0
 8001efe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	4619      	mov	r1, r3
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f007 f816 	bl	8008f38 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0e:	015a      	lsls	r2, r3, #5
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	4413      	add	r3, r2
 8001f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f18:	461a      	mov	r2, r3
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001f28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 fcbd 	bl	80028aa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f32:	3301      	adds	r3, #1
 8001f34:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f38:	085b      	lsrs	r3, r3, #1
 8001f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f47f af2e 	bne.w	8001da0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f004 fbb1 	bl	80066b0 <USB_ReadInterrupts>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001f54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001f58:	d122      	bne.n	8001fa0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	69fa      	ldr	r2, [r7, #28]
 8001f64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f68:	f023 0301 	bic.w	r3, r3, #1
 8001f6c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d108      	bne.n	8001f8a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f80:	2100      	movs	r1, #0
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 fea4 	bl	8002cd0 <HAL_PCDEx_LPM_Callback>
 8001f88:	e002      	b.n	8001f90 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f006 ffb4 	bl	8008ef8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	695a      	ldr	r2, [r3, #20]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001f9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f004 fb83 	bl	80066b0 <USB_ReadInterrupts>
 8001faa:	4603      	mov	r3, r0
 8001fac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001fb4:	d112      	bne.n	8001fdc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d102      	bne.n	8001fcc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f006 ff70 	bl	8008eac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	695a      	ldr	r2, [r3, #20]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001fda:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f004 fb65 	bl	80066b0 <USB_ReadInterrupts>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ff0:	f040 80b7 	bne.w	8002162 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	69fa      	ldr	r2, [r7, #28]
 8001ffe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002002:	f023 0301 	bic.w	r3, r3, #1
 8002006:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2110      	movs	r1, #16
 800200e:	4618      	mov	r0, r3
 8002010:	f003 fc32 	bl	8005878 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002014:	2300      	movs	r3, #0
 8002016:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002018:	e046      	b.n	80020a8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800201a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800201c:	015a      	lsls	r2, r3, #5
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	4413      	add	r3, r2
 8002022:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002026:	461a      	mov	r2, r3
 8002028:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800202c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800202e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002030:	015a      	lsls	r2, r3, #5
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	4413      	add	r3, r2
 8002036:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800203e:	0151      	lsls	r1, r2, #5
 8002040:	69fa      	ldr	r2, [r7, #28]
 8002042:	440a      	add	r2, r1
 8002044:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002048:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800204c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800204e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002050:	015a      	lsls	r2, r3, #5
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	4413      	add	r3, r2
 8002056:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800205a:	461a      	mov	r2, r3
 800205c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002060:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002064:	015a      	lsls	r2, r3, #5
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	4413      	add	r3, r2
 800206a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002072:	0151      	lsls	r1, r2, #5
 8002074:	69fa      	ldr	r2, [r7, #28]
 8002076:	440a      	add	r2, r1
 8002078:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800207c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002080:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002084:	015a      	lsls	r2, r3, #5
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	4413      	add	r3, r2
 800208a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002092:	0151      	lsls	r1, r2, #5
 8002094:	69fa      	ldr	r2, [r7, #28]
 8002096:	440a      	add	r2, r1
 8002098:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800209c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80020a0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020a4:	3301      	adds	r3, #1
 80020a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	791b      	ldrb	r3, [r3, #4]
 80020ac:	461a      	mov	r2, r3
 80020ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d3b2      	bcc.n	800201a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	69fa      	ldr	r2, [r7, #28]
 80020be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80020c2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80020c6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	7bdb      	ldrb	r3, [r3, #15]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d016      	beq.n	80020fe <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020da:	69fa      	ldr	r2, [r7, #28]
 80020dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80020e0:	f043 030b 	orr.w	r3, r3, #11
 80020e4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f0:	69fa      	ldr	r2, [r7, #28]
 80020f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80020f6:	f043 030b 	orr.w	r3, r3, #11
 80020fa:	6453      	str	r3, [r2, #68]	@ 0x44
 80020fc:	e015      	b.n	800212a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	69fa      	ldr	r2, [r7, #28]
 8002108:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800210c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002110:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002114:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	69fa      	ldr	r2, [r7, #28]
 8002120:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002124:	f043 030b 	orr.w	r3, r3, #11
 8002128:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	69fa      	ldr	r2, [r7, #28]
 8002134:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002138:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800213c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6818      	ldr	r0, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800214c:	461a      	mov	r2, r3
 800214e:	f004 fb73 	bl	8006838 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	695a      	ldr	r2, [r3, #20]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002160:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f004 faa2 	bl	80066b0 <USB_ReadInterrupts>
 800216c:	4603      	mov	r3, r0
 800216e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002172:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002176:	d123      	bne.n	80021c0 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f004 fb38 	bl	80067f2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f003 fbef 	bl	800596a <USB_GetDevSpeed>
 800218c:	4603      	mov	r3, r0
 800218e:	461a      	mov	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681c      	ldr	r4, [r3, #0]
 8002198:	f001 fa0a 	bl	80035b0 <HAL_RCC_GetHCLKFreq>
 800219c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021a2:	461a      	mov	r2, r3
 80021a4:	4620      	mov	r0, r4
 80021a6:	f003 f8f3 	bl	8005390 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f006 fe55 	bl	8008e5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	695a      	ldr	r2, [r3, #20]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80021be:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f004 fa73 	bl	80066b0 <USB_ReadInterrupts>
 80021ca:	4603      	mov	r3, r0
 80021cc:	f003 0308 	and.w	r3, r3, #8
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d10a      	bne.n	80021ea <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f006 fe32 	bl	8008e3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	695a      	ldr	r2, [r3, #20]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f002 0208 	and.w	r2, r2, #8
 80021e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f004 fa5e 	bl	80066b0 <USB_ReadInterrupts>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021fa:	2b80      	cmp	r3, #128	@ 0x80
 80021fc:	d123      	bne.n	8002246 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80021fe:	6a3b      	ldr	r3, [r7, #32]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800220a:	2301      	movs	r3, #1
 800220c:	627b      	str	r3, [r7, #36]	@ 0x24
 800220e:	e014      	b.n	800223a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002214:	4613      	mov	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4413      	add	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d105      	bne.n	8002234 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222a:	b2db      	uxtb	r3, r3
 800222c:	4619      	mov	r1, r3
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 fb0a 	bl	8002848 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002236:	3301      	adds	r3, #1
 8002238:	627b      	str	r3, [r7, #36]	@ 0x24
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	791b      	ldrb	r3, [r3, #4]
 800223e:	461a      	mov	r2, r3
 8002240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002242:	4293      	cmp	r3, r2
 8002244:	d3e4      	bcc.n	8002210 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f004 fa30 	bl	80066b0 <USB_ReadInterrupts>
 8002250:	4603      	mov	r3, r0
 8002252:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002256:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800225a:	d13c      	bne.n	80022d6 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800225c:	2301      	movs	r3, #1
 800225e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002260:	e02b      	b.n	80022ba <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002264:	015a      	lsls	r2, r3, #5
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	4413      	add	r3, r2
 800226a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002276:	4613      	mov	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	4413      	add	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	440b      	add	r3, r1
 8002280:	3318      	adds	r3, #24
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d115      	bne.n	80022b4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002288:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800228a:	2b00      	cmp	r3, #0
 800228c:	da12      	bge.n	80022b4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002292:	4613      	mov	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4413      	add	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	440b      	add	r3, r1
 800229c:	3317      	adds	r3, #23
 800229e:	2201      	movs	r2, #1
 80022a0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80022a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	4619      	mov	r1, r3
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 faca 	bl	8002848 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b6:	3301      	adds	r3, #1
 80022b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	791b      	ldrb	r3, [r3, #4]
 80022be:	461a      	mov	r2, r3
 80022c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d3cd      	bcc.n	8002262 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	695a      	ldr	r2, [r3, #20]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80022d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f004 f9e8 	bl	80066b0 <USB_ReadInterrupts>
 80022e0:	4603      	mov	r3, r0
 80022e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80022ea:	d156      	bne.n	800239a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022ec:	2301      	movs	r3, #1
 80022ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80022f0:	e045      	b.n	800237e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80022f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f4:	015a      	lsls	r2, r3, #5
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	4413      	add	r3, r2
 80022fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002306:	4613      	mov	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	4413      	add	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	440b      	add	r3, r1
 8002310:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d12e      	bne.n	8002378 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800231a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800231c:	2b00      	cmp	r3, #0
 800231e:	da2b      	bge.n	8002378 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800232c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002330:	429a      	cmp	r2, r3
 8002332:	d121      	bne.n	8002378 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002346:	2201      	movs	r2, #1
 8002348:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002352:	6a3b      	ldr	r3, [r7, #32]
 8002354:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002356:	6a3b      	ldr	r3, [r7, #32]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10a      	bne.n	8002378 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	69fa      	ldr	r2, [r7, #28]
 800236c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002370:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002374:	6053      	str	r3, [r2, #4]
            break;
 8002376:	e008      	b.n	800238a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237a:	3301      	adds	r3, #1
 800237c:	627b      	str	r3, [r7, #36]	@ 0x24
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	791b      	ldrb	r3, [r3, #4]
 8002382:	461a      	mov	r2, r3
 8002384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002386:	4293      	cmp	r3, r2
 8002388:	d3b3      	bcc.n	80022f2 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695a      	ldr	r2, [r3, #20]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002398:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f004 f986 	bl	80066b0 <USB_ReadInterrupts>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80023aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023ae:	d10a      	bne.n	80023c6 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f006 fdd3 	bl	8008f5c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	695a      	ldr	r2, [r3, #20]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80023c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f004 f970 	bl	80066b0 <USB_ReadInterrupts>
 80023d0:	4603      	mov	r3, r0
 80023d2:	f003 0304 	and.w	r3, r3, #4
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d115      	bne.n	8002406 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d002      	beq.n	80023f2 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f006 fdc3 	bl	8008f78 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6859      	ldr	r1, [r3, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	430a      	orrs	r2, r1
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	e000      	b.n	8002406 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002404:	bf00      	nop
    }
  }
}
 8002406:	3734      	adds	r7, #52	@ 0x34
 8002408:	46bd      	mov	sp, r7
 800240a:	bd90      	pop	{r4, r7, pc}

0800240c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800241e:	2b01      	cmp	r3, #1
 8002420:	d101      	bne.n	8002426 <HAL_PCD_SetAddress+0x1a>
 8002422:	2302      	movs	r3, #2
 8002424:	e012      	b.n	800244c <HAL_PCD_SetAddress+0x40>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	78fa      	ldrb	r2, [r7, #3]
 8002432:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	78fa      	ldrb	r2, [r7, #3]
 800243a:	4611      	mov	r1, r2
 800243c:	4618      	mov	r0, r3
 800243e:	f004 f8cf 	bl	80065e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	4608      	mov	r0, r1
 800245e:	4611      	mov	r1, r2
 8002460:	461a      	mov	r2, r3
 8002462:	4603      	mov	r3, r0
 8002464:	70fb      	strb	r3, [r7, #3]
 8002466:	460b      	mov	r3, r1
 8002468:	803b      	strh	r3, [r7, #0]
 800246a:	4613      	mov	r3, r2
 800246c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800246e:	2300      	movs	r3, #0
 8002470:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002472:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002476:	2b00      	cmp	r3, #0
 8002478:	da0f      	bge.n	800249a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800247a:	78fb      	ldrb	r3, [r7, #3]
 800247c:	f003 020f 	and.w	r2, r3, #15
 8002480:	4613      	mov	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4413      	add	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	3310      	adds	r3, #16
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	4413      	add	r3, r2
 800248e:	3304      	adds	r3, #4
 8002490:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2201      	movs	r2, #1
 8002496:	705a      	strb	r2, [r3, #1]
 8002498:	e00f      	b.n	80024ba <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800249a:	78fb      	ldrb	r3, [r7, #3]
 800249c:	f003 020f 	and.w	r2, r3, #15
 80024a0:	4613      	mov	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	4413      	add	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	4413      	add	r3, r2
 80024b0:	3304      	adds	r3, #4
 80024b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80024ba:	78fb      	ldrb	r3, [r7, #3]
 80024bc:	f003 030f 	and.w	r3, r3, #15
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80024c6:	883b      	ldrh	r3, [r7, #0]
 80024c8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	78ba      	ldrb	r2, [r7, #2]
 80024d4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	785b      	ldrb	r3, [r3, #1]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d004      	beq.n	80024e8 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80024e8:	78bb      	ldrb	r3, [r7, #2]
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d102      	bne.n	80024f4 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d101      	bne.n	8002502 <HAL_PCD_EP_Open+0xae>
 80024fe:	2302      	movs	r3, #2
 8002500:	e00e      	b.n	8002520 <HAL_PCD_EP_Open+0xcc>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68f9      	ldr	r1, [r7, #12]
 8002510:	4618      	mov	r0, r3
 8002512:	f003 fa4f 	bl	80059b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800251e:	7afb      	ldrb	r3, [r7, #11]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002534:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002538:	2b00      	cmp	r3, #0
 800253a:	da0f      	bge.n	800255c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800253c:	78fb      	ldrb	r3, [r7, #3]
 800253e:	f003 020f 	and.w	r2, r3, #15
 8002542:	4613      	mov	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4413      	add	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	3310      	adds	r3, #16
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	4413      	add	r3, r2
 8002550:	3304      	adds	r3, #4
 8002552:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2201      	movs	r2, #1
 8002558:	705a      	strb	r2, [r3, #1]
 800255a:	e00f      	b.n	800257c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800255c:	78fb      	ldrb	r3, [r7, #3]
 800255e:	f003 020f 	and.w	r2, r3, #15
 8002562:	4613      	mov	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	4413      	add	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	4413      	add	r3, r2
 8002572:	3304      	adds	r3, #4
 8002574:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800257c:	78fb      	ldrb	r3, [r7, #3]
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	b2da      	uxtb	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800258e:	2b01      	cmp	r3, #1
 8002590:	d101      	bne.n	8002596 <HAL_PCD_EP_Close+0x6e>
 8002592:	2302      	movs	r3, #2
 8002594:	e00e      	b.n	80025b4 <HAL_PCD_EP_Close+0x8c>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68f9      	ldr	r1, [r7, #12]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f003 fa8d 	bl	8005ac4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	607a      	str	r2, [r7, #4]
 80025c6:	603b      	str	r3, [r7, #0]
 80025c8:	460b      	mov	r3, r1
 80025ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025cc:	7afb      	ldrb	r3, [r7, #11]
 80025ce:	f003 020f 	and.w	r2, r3, #15
 80025d2:	4613      	mov	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	4413      	add	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	4413      	add	r3, r2
 80025e2:	3304      	adds	r3, #4
 80025e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2200      	movs	r2, #0
 80025f6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	2200      	movs	r2, #0
 80025fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025fe:	7afb      	ldrb	r3, [r7, #11]
 8002600:	f003 030f 	and.w	r3, r3, #15
 8002604:	b2da      	uxtb	r2, r3
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	799b      	ldrb	r3, [r3, #6]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d102      	bne.n	8002618 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6818      	ldr	r0, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	799b      	ldrb	r3, [r3, #6]
 8002620:	461a      	mov	r2, r3
 8002622:	6979      	ldr	r1, [r7, #20]
 8002624:	f003 fb2a 	bl	8005c7c <USB_EPStartXfer>

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3718      	adds	r7, #24
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	460b      	mov	r3, r1
 800263c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800263e:	78fb      	ldrb	r3, [r7, #3]
 8002640:	f003 020f 	and.w	r2, r3, #15
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	4413      	add	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	440b      	add	r3, r1
 8002650:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002654:	681b      	ldr	r3, [r3, #0]
}
 8002656:	4618      	mov	r0, r3
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b086      	sub	sp, #24
 8002666:	af00      	add	r7, sp, #0
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	603b      	str	r3, [r7, #0]
 800266e:	460b      	mov	r3, r1
 8002670:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002672:	7afb      	ldrb	r3, [r7, #11]
 8002674:	f003 020f 	and.w	r2, r3, #15
 8002678:	4613      	mov	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4413      	add	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	3310      	adds	r3, #16
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	4413      	add	r3, r2
 8002686:	3304      	adds	r3, #4
 8002688:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	2200      	movs	r2, #0
 800269a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	2201      	movs	r2, #1
 80026a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026a2:	7afb      	ldrb	r3, [r7, #11]
 80026a4:	f003 030f 	and.w	r3, r3, #15
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	799b      	ldrb	r3, [r3, #6]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d102      	bne.n	80026bc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6818      	ldr	r0, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	799b      	ldrb	r3, [r3, #6]
 80026c4:	461a      	mov	r2, r3
 80026c6:	6979      	ldr	r1, [r7, #20]
 80026c8:	f003 fad8 	bl	8005c7c <USB_EPStartXfer>

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b084      	sub	sp, #16
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	460b      	mov	r3, r1
 80026e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80026e2:	78fb      	ldrb	r3, [r7, #3]
 80026e4:	f003 030f 	and.w	r3, r3, #15
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	7912      	ldrb	r2, [r2, #4]
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d901      	bls.n	80026f4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e04f      	b.n	8002794 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	da0f      	bge.n	800271c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026fc:	78fb      	ldrb	r3, [r7, #3]
 80026fe:	f003 020f 	and.w	r2, r3, #15
 8002702:	4613      	mov	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	4413      	add	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	3310      	adds	r3, #16
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	4413      	add	r3, r2
 8002710:	3304      	adds	r3, #4
 8002712:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2201      	movs	r2, #1
 8002718:	705a      	strb	r2, [r3, #1]
 800271a:	e00d      	b.n	8002738 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800271c:	78fa      	ldrb	r2, [r7, #3]
 800271e:	4613      	mov	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	4413      	add	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	4413      	add	r3, r2
 800272e:	3304      	adds	r3, #4
 8002730:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2201      	movs	r2, #1
 800273c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800273e:	78fb      	ldrb	r3, [r7, #3]
 8002740:	f003 030f 	and.w	r3, r3, #15
 8002744:	b2da      	uxtb	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <HAL_PCD_EP_SetStall+0x82>
 8002754:	2302      	movs	r3, #2
 8002756:	e01d      	b.n	8002794 <HAL_PCD_EP_SetStall+0xbe>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68f9      	ldr	r1, [r7, #12]
 8002766:	4618      	mov	r0, r3
 8002768:	f003 fe66 	bl	8006438 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800276c:	78fb      	ldrb	r3, [r7, #3]
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	2b00      	cmp	r3, #0
 8002774:	d109      	bne.n	800278a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	7999      	ldrb	r1, [r3, #6]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002784:	461a      	mov	r2, r3
 8002786:	f004 f857 	bl	8006838 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80027a8:	78fb      	ldrb	r3, [r7, #3]
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	7912      	ldrb	r2, [r2, #4]
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d901      	bls.n	80027ba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e042      	b.n	8002840 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	da0f      	bge.n	80027e2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027c2:	78fb      	ldrb	r3, [r7, #3]
 80027c4:	f003 020f 	and.w	r2, r3, #15
 80027c8:	4613      	mov	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	4413      	add	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	3310      	adds	r3, #16
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	4413      	add	r3, r2
 80027d6:	3304      	adds	r3, #4
 80027d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2201      	movs	r2, #1
 80027de:	705a      	strb	r2, [r3, #1]
 80027e0:	e00f      	b.n	8002802 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027e2:	78fb      	ldrb	r3, [r7, #3]
 80027e4:	f003 020f 	and.w	r2, r3, #15
 80027e8:	4613      	mov	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	4413      	add	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	4413      	add	r3, r2
 80027f8:	3304      	adds	r3, #4
 80027fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002808:	78fb      	ldrb	r3, [r7, #3]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	b2da      	uxtb	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800281a:	2b01      	cmp	r3, #1
 800281c:	d101      	bne.n	8002822 <HAL_PCD_EP_ClrStall+0x86>
 800281e:	2302      	movs	r3, #2
 8002820:	e00e      	b.n	8002840 <HAL_PCD_EP_ClrStall+0xa4>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68f9      	ldr	r1, [r7, #12]
 8002830:	4618      	mov	r0, r3
 8002832:	f003 fe6f 	bl	8006514 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002854:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002858:	2b00      	cmp	r3, #0
 800285a:	da0c      	bge.n	8002876 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800285c:	78fb      	ldrb	r3, [r7, #3]
 800285e:	f003 020f 	and.w	r2, r3, #15
 8002862:	4613      	mov	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	4413      	add	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	3310      	adds	r3, #16
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	4413      	add	r3, r2
 8002870:	3304      	adds	r3, #4
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	e00c      	b.n	8002890 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002876:	78fb      	ldrb	r3, [r7, #3]
 8002878:	f003 020f 	and.w	r2, r3, #15
 800287c:	4613      	mov	r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	4413      	add	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	4413      	add	r3, r2
 800288c:	3304      	adds	r3, #4
 800288e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68f9      	ldr	r1, [r7, #12]
 8002896:	4618      	mov	r0, r3
 8002898:	f003 fc8e 	bl	80061b8 <USB_EPStopXfer>
 800289c:	4603      	mov	r3, r0
 800289e:	72fb      	strb	r3, [r7, #11]

  return ret;
 80028a0:	7afb      	ldrb	r3, [r7, #11]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b08a      	sub	sp, #40	@ 0x28
 80028ae:	af02      	add	r7, sp, #8
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	4613      	mov	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4413      	add	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	3310      	adds	r3, #16
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	4413      	add	r3, r2
 80028ce:	3304      	adds	r3, #4
 80028d0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	695a      	ldr	r2, [r3, #20]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d901      	bls.n	80028e2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e06b      	b.n	80029ba <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	691a      	ldr	r2, [r3, #16]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	69fa      	ldr	r2, [r7, #28]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d902      	bls.n	80028fe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	3303      	adds	r3, #3
 8002902:	089b      	lsrs	r3, r3, #2
 8002904:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002906:	e02a      	b.n	800295e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	691a      	ldr	r2, [r3, #16]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	69fa      	ldr	r2, [r7, #28]
 800291a:	429a      	cmp	r2, r3
 800291c:	d902      	bls.n	8002924 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	3303      	adds	r3, #3
 8002928:	089b      	lsrs	r3, r3, #2
 800292a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	68d9      	ldr	r1, [r3, #12]
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	b2da      	uxtb	r2, r3
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	4603      	mov	r3, r0
 8002940:	6978      	ldr	r0, [r7, #20]
 8002942:	f003 fce3 	bl	800630c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	441a      	add	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	695a      	ldr	r2, [r3, #20]
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	441a      	add	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	015a      	lsls	r2, r3, #5
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	4413      	add	r3, r2
 8002966:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	429a      	cmp	r2, r3
 8002972:	d809      	bhi.n	8002988 <PCD_WriteEmptyTxFifo+0xde>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	695a      	ldr	r2, [r3, #20]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800297c:	429a      	cmp	r2, r3
 800297e:	d203      	bcs.n	8002988 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1bf      	bne.n	8002908 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	429a      	cmp	r2, r3
 8002992:	d811      	bhi.n	80029b8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	2201      	movs	r2, #1
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	43db      	mvns	r3, r3
 80029ae:	6939      	ldr	r1, [r7, #16]
 80029b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80029b4:	4013      	ands	r3, r2
 80029b6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3720      	adds	r7, #32
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	333c      	adds	r3, #60	@ 0x3c
 80029dc:	3304      	adds	r3, #4
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	015a      	lsls	r2, r3, #5
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	4413      	add	r3, r2
 80029ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	799b      	ldrb	r3, [r3, #6]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d17b      	bne.n	8002af2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	f003 0308 	and.w	r3, r3, #8
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d015      	beq.n	8002a30 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	4a61      	ldr	r2, [pc, #388]	@ (8002b8c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	f240 80b9 	bls.w	8002b80 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 80b3 	beq.w	8002b80 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a26:	461a      	mov	r2, r3
 8002a28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a2c:	6093      	str	r3, [r2, #8]
 8002a2e:	e0a7      	b.n	8002b80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	f003 0320 	and.w	r3, r3, #32
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d009      	beq.n	8002a4e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a46:	461a      	mov	r2, r3
 8002a48:	2320      	movs	r3, #32
 8002a4a:	6093      	str	r3, [r2, #8]
 8002a4c:	e098      	b.n	8002b80 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f040 8093 	bne.w	8002b80 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	4a4b      	ldr	r2, [pc, #300]	@ (8002b8c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d90f      	bls.n	8002a82 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00a      	beq.n	8002a82 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	015a      	lsls	r2, r3, #5
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a78:	461a      	mov	r2, r3
 8002a7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a7e:	6093      	str	r3, [r2, #8]
 8002a80:	e07e      	b.n	8002b80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	4413      	add	r3, r2
 8002a94:	3304      	adds	r3, #4
 8002a96:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a1a      	ldr	r2, [r3, #32]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	0159      	lsls	r1, r3, #5
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	440b      	add	r3, r1
 8002aa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aae:	1ad2      	subs	r2, r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d114      	bne.n	8002ae4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d109      	bne.n	8002ad6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002acc:	461a      	mov	r2, r3
 8002ace:	2101      	movs	r1, #1
 8002ad0:	f003 feb2 	bl	8006838 <USB_EP0_OutStart>
 8002ad4:	e006      	b.n	8002ae4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	441a      	add	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	4619      	mov	r1, r3
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f006 f972 	bl	8008dd4 <HAL_PCD_DataOutStageCallback>
 8002af0:	e046      	b.n	8002b80 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	4a26      	ldr	r2, [pc, #152]	@ (8002b90 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d124      	bne.n	8002b44 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00a      	beq.n	8002b1a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	015a      	lsls	r2, r3, #5
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b10:	461a      	mov	r2, r3
 8002b12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b16:	6093      	str	r3, [r2, #8]
 8002b18:	e032      	b.n	8002b80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	f003 0320 	and.w	r3, r3, #32
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d008      	beq.n	8002b36 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	015a      	lsls	r2, r3, #5
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b30:	461a      	mov	r2, r3
 8002b32:	2320      	movs	r3, #32
 8002b34:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f006 f949 	bl	8008dd4 <HAL_PCD_DataOutStageCallback>
 8002b42:	e01d      	b.n	8002b80 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d114      	bne.n	8002b74 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	4413      	add	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	440b      	add	r3, r1
 8002b58:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d108      	bne.n	8002b74 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6818      	ldr	r0, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	2100      	movs	r1, #0
 8002b70:	f003 fe62 	bl	8006838 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	4619      	mov	r1, r3
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f006 f92a 	bl	8008dd4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3720      	adds	r7, #32
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	4f54300a 	.word	0x4f54300a
 8002b90:	4f54310a 	.word	0x4f54310a

08002b94 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	333c      	adds	r3, #60	@ 0x3c
 8002bac:	3304      	adds	r3, #4
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	015a      	lsls	r2, r3, #5
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	4413      	add	r3, r2
 8002bba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	4a15      	ldr	r2, [pc, #84]	@ (8002c1c <PCD_EP_OutSetupPacket_int+0x88>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d90e      	bls.n	8002be8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d009      	beq.n	8002be8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	015a      	lsls	r2, r3, #5
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4413      	add	r3, r2
 8002bdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002be0:	461a      	mov	r2, r3
 8002be2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002be6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f006 f8e1 	bl	8008db0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8002c1c <PCD_EP_OutSetupPacket_int+0x88>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d90c      	bls.n	8002c10 <PCD_EP_OutSetupPacket_int+0x7c>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	799b      	ldrb	r3, [r3, #6]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d108      	bne.n	8002c10 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6818      	ldr	r0, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c08:	461a      	mov	r2, r3
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	f003 fe14 	bl	8006838 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	4f54300a 	.word	0x4f54300a

08002c20 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	70fb      	strb	r3, [r7, #3]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c36:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002c38:	78fb      	ldrb	r3, [r7, #3]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d107      	bne.n	8002c4e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002c3e:	883b      	ldrh	r3, [r7, #0]
 8002c40:	0419      	lsls	r1, r3, #16
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c4c:	e028      	b.n	8002ca0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c54:	0c1b      	lsrs	r3, r3, #16
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	4413      	add	r3, r2
 8002c5a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	73fb      	strb	r3, [r7, #15]
 8002c60:	e00d      	b.n	8002c7e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
 8002c68:	3340      	adds	r3, #64	@ 0x40
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	0c1b      	lsrs	r3, r3, #16
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	4413      	add	r3, r2
 8002c76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]
 8002c7e:	7bfa      	ldrb	r2, [r7, #15]
 8002c80:	78fb      	ldrb	r3, [r7, #3]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d3ec      	bcc.n	8002c62 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002c88:	883b      	ldrh	r3, [r7, #0]
 8002c8a:	0418      	lsls	r0, r3, #16
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6819      	ldr	r1, [r3, #0]
 8002c90:	78fb      	ldrb	r3, [r7, #3]
 8002c92:	3b01      	subs	r3, #1
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	4302      	orrs	r2, r0
 8002c98:	3340      	adds	r3, #64	@ 0x40
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	887a      	ldrh	r2, [r7, #2]
 8002cc0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e267      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d075      	beq.n	8002df2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d06:	4b88      	ldr	r3, [pc, #544]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 030c 	and.w	r3, r3, #12
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d00c      	beq.n	8002d2c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d12:	4b85      	ldr	r3, [pc, #532]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d1a:	2b08      	cmp	r3, #8
 8002d1c:	d112      	bne.n	8002d44 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d1e:	4b82      	ldr	r3, [pc, #520]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d2a:	d10b      	bne.n	8002d44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d2c:	4b7e      	ldr	r3, [pc, #504]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d05b      	beq.n	8002df0 <HAL_RCC_OscConfig+0x108>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d157      	bne.n	8002df0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e242      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d4c:	d106      	bne.n	8002d5c <HAL_RCC_OscConfig+0x74>
 8002d4e:	4b76      	ldr	r3, [pc, #472]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a75      	ldr	r2, [pc, #468]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	e01d      	b.n	8002d98 <HAL_RCC_OscConfig+0xb0>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d64:	d10c      	bne.n	8002d80 <HAL_RCC_OscConfig+0x98>
 8002d66:	4b70      	ldr	r3, [pc, #448]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a6f      	ldr	r2, [pc, #444]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	4b6d      	ldr	r3, [pc, #436]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a6c      	ldr	r2, [pc, #432]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	e00b      	b.n	8002d98 <HAL_RCC_OscConfig+0xb0>
 8002d80:	4b69      	ldr	r3, [pc, #420]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a68      	ldr	r2, [pc, #416]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d8a:	6013      	str	r3, [r2, #0]
 8002d8c:	4b66      	ldr	r3, [pc, #408]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a65      	ldr	r2, [pc, #404]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d013      	beq.n	8002dc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da0:	f7fe f9c6 	bl	8001130 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da8:	f7fe f9c2 	bl	8001130 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b64      	cmp	r3, #100	@ 0x64
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e207      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dba:	4b5b      	ldr	r3, [pc, #364]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCC_OscConfig+0xc0>
 8002dc6:	e014      	b.n	8002df2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc8:	f7fe f9b2 	bl	8001130 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dd0:	f7fe f9ae 	bl	8001130 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b64      	cmp	r3, #100	@ 0x64
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e1f3      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de2:	4b51      	ldr	r3, [pc, #324]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f0      	bne.n	8002dd0 <HAL_RCC_OscConfig+0xe8>
 8002dee:	e000      	b.n	8002df2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d063      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002dfe:	4b4a      	ldr	r3, [pc, #296]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 030c 	and.w	r3, r3, #12
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00b      	beq.n	8002e22 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e0a:	4b47      	ldr	r3, [pc, #284]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e12:	2b08      	cmp	r3, #8
 8002e14:	d11c      	bne.n	8002e50 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e16:	4b44      	ldr	r3, [pc, #272]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d116      	bne.n	8002e50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e22:	4b41      	ldr	r3, [pc, #260]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d005      	beq.n	8002e3a <HAL_RCC_OscConfig+0x152>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d001      	beq.n	8002e3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e1c7      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3a:	4b3b      	ldr	r3, [pc, #236]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	4937      	ldr	r1, [pc, #220]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e4e:	e03a      	b.n	8002ec6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d020      	beq.n	8002e9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e58:	4b34      	ldr	r3, [pc, #208]	@ (8002f2c <HAL_RCC_OscConfig+0x244>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5e:	f7fe f967 	bl	8001130 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e66:	f7fe f963 	bl	8001130 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e1a8      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e78:	4b2b      	ldr	r3, [pc, #172]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e84:	4b28      	ldr	r3, [pc, #160]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	4925      	ldr	r1, [pc, #148]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	600b      	str	r3, [r1, #0]
 8002e98:	e015      	b.n	8002ec6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e9a:	4b24      	ldr	r3, [pc, #144]	@ (8002f2c <HAL_RCC_OscConfig+0x244>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea0:	f7fe f946 	bl	8001130 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea8:	f7fe f942 	bl	8001130 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e187      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eba:	4b1b      	ldr	r3, [pc, #108]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f0      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d036      	beq.n	8002f40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d016      	beq.n	8002f08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eda:	4b15      	ldr	r3, [pc, #84]	@ (8002f30 <HAL_RCC_OscConfig+0x248>)
 8002edc:	2201      	movs	r2, #1
 8002ede:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee0:	f7fe f926 	bl	8001130 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee8:	f7fe f922 	bl	8001130 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e167      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002efa:	4b0b      	ldr	r3, [pc, #44]	@ (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002efc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x200>
 8002f06:	e01b      	b.n	8002f40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f08:	4b09      	ldr	r3, [pc, #36]	@ (8002f30 <HAL_RCC_OscConfig+0x248>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f0e:	f7fe f90f 	bl	8001130 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f14:	e00e      	b.n	8002f34 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f16:	f7fe f90b 	bl	8001130 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d907      	bls.n	8002f34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e150      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	42470000 	.word	0x42470000
 8002f30:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f34:	4b88      	ldr	r3, [pc, #544]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8002f36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1ea      	bne.n	8002f16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 8097 	beq.w	800307c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f52:	4b81      	ldr	r3, [pc, #516]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10f      	bne.n	8002f7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60bb      	str	r3, [r7, #8]
 8002f62:	4b7d      	ldr	r3, [pc, #500]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f66:	4a7c      	ldr	r2, [pc, #496]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8002f68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f6e:	4b7a      	ldr	r3, [pc, #488]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f76:	60bb      	str	r3, [r7, #8]
 8002f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7e:	4b77      	ldr	r3, [pc, #476]	@ (800315c <HAL_RCC_OscConfig+0x474>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d118      	bne.n	8002fbc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f8a:	4b74      	ldr	r3, [pc, #464]	@ (800315c <HAL_RCC_OscConfig+0x474>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a73      	ldr	r2, [pc, #460]	@ (800315c <HAL_RCC_OscConfig+0x474>)
 8002f90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f96:	f7fe f8cb 	bl	8001130 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f9e:	f7fe f8c7 	bl	8001130 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e10c      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb0:	4b6a      	ldr	r3, [pc, #424]	@ (800315c <HAL_RCC_OscConfig+0x474>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0f0      	beq.n	8002f9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d106      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x2ea>
 8002fc4:	4b64      	ldr	r3, [pc, #400]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8002fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc8:	4a63      	ldr	r2, [pc, #396]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fd0:	e01c      	b.n	800300c <HAL_RCC_OscConfig+0x324>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	2b05      	cmp	r3, #5
 8002fd8:	d10c      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x30c>
 8002fda:	4b5f      	ldr	r3, [pc, #380]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8002fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fde:	4a5e      	ldr	r2, [pc, #376]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8002fe0:	f043 0304 	orr.w	r3, r3, #4
 8002fe4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fe6:	4b5c      	ldr	r3, [pc, #368]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fea:	4a5b      	ldr	r2, [pc, #364]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ff2:	e00b      	b.n	800300c <HAL_RCC_OscConfig+0x324>
 8002ff4:	4b58      	ldr	r3, [pc, #352]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8002ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff8:	4a57      	ldr	r2, [pc, #348]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8002ffa:	f023 0301 	bic.w	r3, r3, #1
 8002ffe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003000:	4b55      	ldr	r3, [pc, #340]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8003002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003004:	4a54      	ldr	r2, [pc, #336]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8003006:	f023 0304 	bic.w	r3, r3, #4
 800300a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d015      	beq.n	8003040 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003014:	f7fe f88c 	bl	8001130 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800301a:	e00a      	b.n	8003032 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800301c:	f7fe f888 	bl	8001130 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800302a:	4293      	cmp	r3, r2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e0cb      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003032:	4b49      	ldr	r3, [pc, #292]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8003034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0ee      	beq.n	800301c <HAL_RCC_OscConfig+0x334>
 800303e:	e014      	b.n	800306a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003040:	f7fe f876 	bl	8001130 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003046:	e00a      	b.n	800305e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003048:	f7fe f872 	bl	8001130 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003056:	4293      	cmp	r3, r2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e0b5      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800305e:	4b3e      	ldr	r3, [pc, #248]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8003060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1ee      	bne.n	8003048 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800306a:	7dfb      	ldrb	r3, [r7, #23]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d105      	bne.n	800307c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003070:	4b39      	ldr	r3, [pc, #228]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8003072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003074:	4a38      	ldr	r2, [pc, #224]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8003076:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800307a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 80a1 	beq.w	80031c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003086:	4b34      	ldr	r3, [pc, #208]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 030c 	and.w	r3, r3, #12
 800308e:	2b08      	cmp	r3, #8
 8003090:	d05c      	beq.n	800314c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d141      	bne.n	800311e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800309a:	4b31      	ldr	r3, [pc, #196]	@ (8003160 <HAL_RCC_OscConfig+0x478>)
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a0:	f7fe f846 	bl	8001130 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a8:	f7fe f842 	bl	8001130 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e087      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ba:	4b27      	ldr	r3, [pc, #156]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f0      	bne.n	80030a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69da      	ldr	r2, [r3, #28]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d4:	019b      	lsls	r3, r3, #6
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030dc:	085b      	lsrs	r3, r3, #1
 80030de:	3b01      	subs	r3, #1
 80030e0:	041b      	lsls	r3, r3, #16
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e8:	061b      	lsls	r3, r3, #24
 80030ea:	491b      	ldr	r1, [pc, #108]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003160 <HAL_RCC_OscConfig+0x478>)
 80030f2:	2201      	movs	r2, #1
 80030f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f6:	f7fe f81b 	bl	8001130 <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030fe:	f7fe f817 	bl	8001130 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e05c      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003110:	4b11      	ldr	r3, [pc, #68]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0f0      	beq.n	80030fe <HAL_RCC_OscConfig+0x416>
 800311c:	e054      	b.n	80031c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311e:	4b10      	ldr	r3, [pc, #64]	@ (8003160 <HAL_RCC_OscConfig+0x478>)
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003124:	f7fe f804 	bl	8001130 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800312c:	f7fe f800 	bl	8001130 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e045      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313e:	4b06      	ldr	r3, [pc, #24]	@ (8003158 <HAL_RCC_OscConfig+0x470>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f0      	bne.n	800312c <HAL_RCC_OscConfig+0x444>
 800314a:	e03d      	b.n	80031c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d107      	bne.n	8003164 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e038      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
 8003158:	40023800 	.word	0x40023800
 800315c:	40007000 	.word	0x40007000
 8003160:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003164:	4b1b      	ldr	r3, [pc, #108]	@ (80031d4 <HAL_RCC_OscConfig+0x4ec>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d028      	beq.n	80031c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800317c:	429a      	cmp	r2, r3
 800317e:	d121      	bne.n	80031c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800318a:	429a      	cmp	r2, r3
 800318c:	d11a      	bne.n	80031c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003194:	4013      	ands	r3, r2
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800319a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800319c:	4293      	cmp	r3, r2
 800319e:	d111      	bne.n	80031c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031aa:	085b      	lsrs	r3, r3, #1
 80031ac:	3b01      	subs	r3, #1
 80031ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d107      	bne.n	80031c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40023800 	.word	0x40023800

080031d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e0cc      	b.n	8003386 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031ec:	4b68      	ldr	r3, [pc, #416]	@ (8003390 <HAL_RCC_ClockConfig+0x1b8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d90c      	bls.n	8003214 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fa:	4b65      	ldr	r3, [pc, #404]	@ (8003390 <HAL_RCC_ClockConfig+0x1b8>)
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003202:	4b63      	ldr	r3, [pc, #396]	@ (8003390 <HAL_RCC_ClockConfig+0x1b8>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	429a      	cmp	r2, r3
 800320e:	d001      	beq.n	8003214 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e0b8      	b.n	8003386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d020      	beq.n	8003262 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d005      	beq.n	8003238 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800322c:	4b59      	ldr	r3, [pc, #356]	@ (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	4a58      	ldr	r2, [pc, #352]	@ (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003236:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	2b00      	cmp	r3, #0
 8003242:	d005      	beq.n	8003250 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003244:	4b53      	ldr	r3, [pc, #332]	@ (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	4a52      	ldr	r2, [pc, #328]	@ (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800324e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003250:	4b50      	ldr	r3, [pc, #320]	@ (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	494d      	ldr	r1, [pc, #308]	@ (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	4313      	orrs	r3, r2
 8003260:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d044      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d107      	bne.n	8003286 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003276:	4b47      	ldr	r3, [pc, #284]	@ (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d119      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e07f      	b.n	8003386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d003      	beq.n	8003296 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003292:	2b03      	cmp	r3, #3
 8003294:	d107      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003296:	4b3f      	ldr	r3, [pc, #252]	@ (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e06f      	b.n	8003386 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e067      	b.n	8003386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032b6:	4b37      	ldr	r3, [pc, #220]	@ (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f023 0203 	bic.w	r2, r3, #3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	4934      	ldr	r1, [pc, #208]	@ (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032c8:	f7fd ff32 	bl	8001130 <HAL_GetTick>
 80032cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ce:	e00a      	b.n	80032e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d0:	f7fd ff2e 	bl	8001130 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032de:	4293      	cmp	r3, r2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e04f      	b.n	8003386 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e6:	4b2b      	ldr	r3, [pc, #172]	@ (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 020c 	and.w	r2, r3, #12
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d1eb      	bne.n	80032d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032f8:	4b25      	ldr	r3, [pc, #148]	@ (8003390 <HAL_RCC_ClockConfig+0x1b8>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d20c      	bcs.n	8003320 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003306:	4b22      	ldr	r3, [pc, #136]	@ (8003390 <HAL_RCC_ClockConfig+0x1b8>)
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800330e:	4b20      	ldr	r3, [pc, #128]	@ (8003390 <HAL_RCC_ClockConfig+0x1b8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	429a      	cmp	r2, r3
 800331a:	d001      	beq.n	8003320 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e032      	b.n	8003386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b00      	cmp	r3, #0
 800332a:	d008      	beq.n	800333e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800332c:	4b19      	ldr	r3, [pc, #100]	@ (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	4916      	ldr	r1, [pc, #88]	@ (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 800333a:	4313      	orrs	r3, r2
 800333c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b00      	cmp	r3, #0
 8003348:	d009      	beq.n	800335e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800334a:	4b12      	ldr	r3, [pc, #72]	@ (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	490e      	ldr	r1, [pc, #56]	@ (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	4313      	orrs	r3, r2
 800335c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800335e:	f000 f821 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 8003362:	4602      	mov	r2, r0
 8003364:	4b0b      	ldr	r3, [pc, #44]	@ (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	091b      	lsrs	r3, r3, #4
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	490a      	ldr	r1, [pc, #40]	@ (8003398 <HAL_RCC_ClockConfig+0x1c0>)
 8003370:	5ccb      	ldrb	r3, [r1, r3]
 8003372:	fa22 f303 	lsr.w	r3, r2, r3
 8003376:	4a09      	ldr	r2, [pc, #36]	@ (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800337a:	4b09      	ldr	r3, [pc, #36]	@ (80033a0 <HAL_RCC_ClockConfig+0x1c8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f7fd fe92 	bl	80010a8 <HAL_InitTick>

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40023c00 	.word	0x40023c00
 8003394:	40023800 	.word	0x40023800
 8003398:	08009e48 	.word	0x08009e48
 800339c:	20000000 	.word	0x20000000
 80033a0:	20000004 	.word	0x20000004

080033a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033a8:	b094      	sub	sp, #80	@ 0x50
 80033aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033bc:	4b79      	ldr	r3, [pc, #484]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 030c 	and.w	r3, r3, #12
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	d00d      	beq.n	80033e4 <HAL_RCC_GetSysClockFreq+0x40>
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	f200 80e1 	bhi.w	8003590 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d002      	beq.n	80033d8 <HAL_RCC_GetSysClockFreq+0x34>
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d003      	beq.n	80033de <HAL_RCC_GetSysClockFreq+0x3a>
 80033d6:	e0db      	b.n	8003590 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033d8:	4b73      	ldr	r3, [pc, #460]	@ (80035a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80033da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033dc:	e0db      	b.n	8003596 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033de:	4b73      	ldr	r3, [pc, #460]	@ (80035ac <HAL_RCC_GetSysClockFreq+0x208>)
 80033e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033e2:	e0d8      	b.n	8003596 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033e4:	4b6f      	ldr	r3, [pc, #444]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033ec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033ee:	4b6d      	ldr	r3, [pc, #436]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d063      	beq.n	80034c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033fa:	4b6a      	ldr	r3, [pc, #424]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	099b      	lsrs	r3, r3, #6
 8003400:	2200      	movs	r2, #0
 8003402:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003404:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800340c:	633b      	str	r3, [r7, #48]	@ 0x30
 800340e:	2300      	movs	r3, #0
 8003410:	637b      	str	r3, [r7, #52]	@ 0x34
 8003412:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003416:	4622      	mov	r2, r4
 8003418:	462b      	mov	r3, r5
 800341a:	f04f 0000 	mov.w	r0, #0
 800341e:	f04f 0100 	mov.w	r1, #0
 8003422:	0159      	lsls	r1, r3, #5
 8003424:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003428:	0150      	lsls	r0, r2, #5
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	4621      	mov	r1, r4
 8003430:	1a51      	subs	r1, r2, r1
 8003432:	6139      	str	r1, [r7, #16]
 8003434:	4629      	mov	r1, r5
 8003436:	eb63 0301 	sbc.w	r3, r3, r1
 800343a:	617b      	str	r3, [r7, #20]
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003448:	4659      	mov	r1, fp
 800344a:	018b      	lsls	r3, r1, #6
 800344c:	4651      	mov	r1, sl
 800344e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003452:	4651      	mov	r1, sl
 8003454:	018a      	lsls	r2, r1, #6
 8003456:	4651      	mov	r1, sl
 8003458:	ebb2 0801 	subs.w	r8, r2, r1
 800345c:	4659      	mov	r1, fp
 800345e:	eb63 0901 	sbc.w	r9, r3, r1
 8003462:	f04f 0200 	mov.w	r2, #0
 8003466:	f04f 0300 	mov.w	r3, #0
 800346a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800346e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003472:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003476:	4690      	mov	r8, r2
 8003478:	4699      	mov	r9, r3
 800347a:	4623      	mov	r3, r4
 800347c:	eb18 0303 	adds.w	r3, r8, r3
 8003480:	60bb      	str	r3, [r7, #8]
 8003482:	462b      	mov	r3, r5
 8003484:	eb49 0303 	adc.w	r3, r9, r3
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	f04f 0300 	mov.w	r3, #0
 8003492:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003496:	4629      	mov	r1, r5
 8003498:	024b      	lsls	r3, r1, #9
 800349a:	4621      	mov	r1, r4
 800349c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034a0:	4621      	mov	r1, r4
 80034a2:	024a      	lsls	r2, r1, #9
 80034a4:	4610      	mov	r0, r2
 80034a6:	4619      	mov	r1, r3
 80034a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034aa:	2200      	movs	r2, #0
 80034ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80034b4:	f7fc fe88 	bl	80001c8 <__aeabi_uldivmod>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4613      	mov	r3, r2
 80034be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034c0:	e058      	b.n	8003574 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034c2:	4b38      	ldr	r3, [pc, #224]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	099b      	lsrs	r3, r3, #6
 80034c8:	2200      	movs	r2, #0
 80034ca:	4618      	mov	r0, r3
 80034cc:	4611      	mov	r1, r2
 80034ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034d2:	623b      	str	r3, [r7, #32]
 80034d4:	2300      	movs	r3, #0
 80034d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80034d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034dc:	4642      	mov	r2, r8
 80034de:	464b      	mov	r3, r9
 80034e0:	f04f 0000 	mov.w	r0, #0
 80034e4:	f04f 0100 	mov.w	r1, #0
 80034e8:	0159      	lsls	r1, r3, #5
 80034ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034ee:	0150      	lsls	r0, r2, #5
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	4641      	mov	r1, r8
 80034f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80034fa:	4649      	mov	r1, r9
 80034fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	f04f 0300 	mov.w	r3, #0
 8003508:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800350c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003510:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003514:	ebb2 040a 	subs.w	r4, r2, sl
 8003518:	eb63 050b 	sbc.w	r5, r3, fp
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	00eb      	lsls	r3, r5, #3
 8003526:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800352a:	00e2      	lsls	r2, r4, #3
 800352c:	4614      	mov	r4, r2
 800352e:	461d      	mov	r5, r3
 8003530:	4643      	mov	r3, r8
 8003532:	18e3      	adds	r3, r4, r3
 8003534:	603b      	str	r3, [r7, #0]
 8003536:	464b      	mov	r3, r9
 8003538:	eb45 0303 	adc.w	r3, r5, r3
 800353c:	607b      	str	r3, [r7, #4]
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	e9d7 4500 	ldrd	r4, r5, [r7]
 800354a:	4629      	mov	r1, r5
 800354c:	028b      	lsls	r3, r1, #10
 800354e:	4621      	mov	r1, r4
 8003550:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003554:	4621      	mov	r1, r4
 8003556:	028a      	lsls	r2, r1, #10
 8003558:	4610      	mov	r0, r2
 800355a:	4619      	mov	r1, r3
 800355c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800355e:	2200      	movs	r2, #0
 8003560:	61bb      	str	r3, [r7, #24]
 8003562:	61fa      	str	r2, [r7, #28]
 8003564:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003568:	f7fc fe2e 	bl	80001c8 <__aeabi_uldivmod>
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	4613      	mov	r3, r2
 8003572:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003574:	4b0b      	ldr	r3, [pc, #44]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	0c1b      	lsrs	r3, r3, #16
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	3301      	adds	r3, #1
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003584:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003586:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003588:	fbb2 f3f3 	udiv	r3, r2, r3
 800358c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800358e:	e002      	b.n	8003596 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003590:	4b05      	ldr	r3, [pc, #20]	@ (80035a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003592:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003594:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003596:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003598:	4618      	mov	r0, r3
 800359a:	3750      	adds	r7, #80	@ 0x50
 800359c:	46bd      	mov	sp, r7
 800359e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035a2:	bf00      	nop
 80035a4:	40023800 	.word	0x40023800
 80035a8:	00f42400 	.word	0x00f42400
 80035ac:	007a1200 	.word	0x007a1200

080035b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035b4:	4b03      	ldr	r3, [pc, #12]	@ (80035c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80035b6:	681b      	ldr	r3, [r3, #0]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	20000000 	.word	0x20000000

080035c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035cc:	f7ff fff0 	bl	80035b0 <HAL_RCC_GetHCLKFreq>
 80035d0:	4602      	mov	r2, r0
 80035d2:	4b05      	ldr	r3, [pc, #20]	@ (80035e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	0a9b      	lsrs	r3, r3, #10
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	4903      	ldr	r1, [pc, #12]	@ (80035ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80035de:	5ccb      	ldrb	r3, [r1, r3]
 80035e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40023800 	.word	0x40023800
 80035ec:	08009e58 	.word	0x08009e58

080035f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035f4:	f7ff ffdc 	bl	80035b0 <HAL_RCC_GetHCLKFreq>
 80035f8:	4602      	mov	r2, r0
 80035fa:	4b05      	ldr	r3, [pc, #20]	@ (8003610 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	0b5b      	lsrs	r3, r3, #13
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	4903      	ldr	r1, [pc, #12]	@ (8003614 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003606:	5ccb      	ldrb	r3, [r1, r3]
 8003608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800360c:	4618      	mov	r0, r3
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40023800 	.word	0x40023800
 8003614:	08009e58 	.word	0x08009e58

08003618 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e041      	b.n	80036ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d106      	bne.n	8003644 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7fd fb06 	bl	8000c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3304      	adds	r3, #4
 8003654:	4619      	mov	r1, r3
 8003656:	4610      	mov	r0, r2
 8003658:	f000 fad8 	bl	8003c0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b082      	sub	sp, #8
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e041      	b.n	800374c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d106      	bne.n	80036e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f839 	bl	8003754 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2202      	movs	r2, #2
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3304      	adds	r3, #4
 80036f2:	4619      	mov	r1, r3
 80036f4:	4610      	mov	r0, r2
 80036f6:	f000 fa89 	bl	8003c0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d109      	bne.n	800378c <HAL_TIM_PWM_Start+0x24>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b01      	cmp	r3, #1
 8003782:	bf14      	ite	ne
 8003784:	2301      	movne	r3, #1
 8003786:	2300      	moveq	r3, #0
 8003788:	b2db      	uxtb	r3, r3
 800378a:	e022      	b.n	80037d2 <HAL_TIM_PWM_Start+0x6a>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	2b04      	cmp	r3, #4
 8003790:	d109      	bne.n	80037a6 <HAL_TIM_PWM_Start+0x3e>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b01      	cmp	r3, #1
 800379c:	bf14      	ite	ne
 800379e:	2301      	movne	r3, #1
 80037a0:	2300      	moveq	r3, #0
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	e015      	b.n	80037d2 <HAL_TIM_PWM_Start+0x6a>
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d109      	bne.n	80037c0 <HAL_TIM_PWM_Start+0x58>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	bf14      	ite	ne
 80037b8:	2301      	movne	r3, #1
 80037ba:	2300      	moveq	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	e008      	b.n	80037d2 <HAL_TIM_PWM_Start+0x6a>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	bf14      	ite	ne
 80037cc:	2301      	movne	r3, #1
 80037ce:	2300      	moveq	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e07c      	b.n	80038d4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d104      	bne.n	80037ea <HAL_TIM_PWM_Start+0x82>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037e8:	e013      	b.n	8003812 <HAL_TIM_PWM_Start+0xaa>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d104      	bne.n	80037fa <HAL_TIM_PWM_Start+0x92>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2202      	movs	r2, #2
 80037f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037f8:	e00b      	b.n	8003812 <HAL_TIM_PWM_Start+0xaa>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d104      	bne.n	800380a <HAL_TIM_PWM_Start+0xa2>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003808:	e003      	b.n	8003812 <HAL_TIM_PWM_Start+0xaa>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2202      	movs	r2, #2
 800380e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2201      	movs	r2, #1
 8003818:	6839      	ldr	r1, [r7, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f000 fcec 	bl	80041f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a2d      	ldr	r2, [pc, #180]	@ (80038dc <HAL_TIM_PWM_Start+0x174>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d004      	beq.n	8003834 <HAL_TIM_PWM_Start+0xcc>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a2c      	ldr	r2, [pc, #176]	@ (80038e0 <HAL_TIM_PWM_Start+0x178>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d101      	bne.n	8003838 <HAL_TIM_PWM_Start+0xd0>
 8003834:	2301      	movs	r3, #1
 8003836:	e000      	b.n	800383a <HAL_TIM_PWM_Start+0xd2>
 8003838:	2300      	movs	r3, #0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d007      	beq.n	800384e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800384c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a22      	ldr	r2, [pc, #136]	@ (80038dc <HAL_TIM_PWM_Start+0x174>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d022      	beq.n	800389e <HAL_TIM_PWM_Start+0x136>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003860:	d01d      	beq.n	800389e <HAL_TIM_PWM_Start+0x136>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a1f      	ldr	r2, [pc, #124]	@ (80038e4 <HAL_TIM_PWM_Start+0x17c>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d018      	beq.n	800389e <HAL_TIM_PWM_Start+0x136>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a1d      	ldr	r2, [pc, #116]	@ (80038e8 <HAL_TIM_PWM_Start+0x180>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d013      	beq.n	800389e <HAL_TIM_PWM_Start+0x136>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a1c      	ldr	r2, [pc, #112]	@ (80038ec <HAL_TIM_PWM_Start+0x184>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d00e      	beq.n	800389e <HAL_TIM_PWM_Start+0x136>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a16      	ldr	r2, [pc, #88]	@ (80038e0 <HAL_TIM_PWM_Start+0x178>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d009      	beq.n	800389e <HAL_TIM_PWM_Start+0x136>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a18      	ldr	r2, [pc, #96]	@ (80038f0 <HAL_TIM_PWM_Start+0x188>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d004      	beq.n	800389e <HAL_TIM_PWM_Start+0x136>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a16      	ldr	r2, [pc, #88]	@ (80038f4 <HAL_TIM_PWM_Start+0x18c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d111      	bne.n	80038c2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2b06      	cmp	r3, #6
 80038ae:	d010      	beq.n	80038d2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0201 	orr.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038c0:	e007      	b.n	80038d2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f042 0201 	orr.w	r2, r2, #1
 80038d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40010000 	.word	0x40010000
 80038e0:	40010400 	.word	0x40010400
 80038e4:	40000400 	.word	0x40000400
 80038e8:	40000800 	.word	0x40000800
 80038ec:	40000c00 	.word	0x40000c00
 80038f0:	40014000 	.word	0x40014000
 80038f4:	40001800 	.word	0x40001800

080038f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003904:	2300      	movs	r3, #0
 8003906:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800390e:	2b01      	cmp	r3, #1
 8003910:	d101      	bne.n	8003916 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003912:	2302      	movs	r3, #2
 8003914:	e0ae      	b.n	8003a74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b0c      	cmp	r3, #12
 8003922:	f200 809f 	bhi.w	8003a64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003926:	a201      	add	r2, pc, #4	@ (adr r2, 800392c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392c:	08003961 	.word	0x08003961
 8003930:	08003a65 	.word	0x08003a65
 8003934:	08003a65 	.word	0x08003a65
 8003938:	08003a65 	.word	0x08003a65
 800393c:	080039a1 	.word	0x080039a1
 8003940:	08003a65 	.word	0x08003a65
 8003944:	08003a65 	.word	0x08003a65
 8003948:	08003a65 	.word	0x08003a65
 800394c:	080039e3 	.word	0x080039e3
 8003950:	08003a65 	.word	0x08003a65
 8003954:	08003a65 	.word	0x08003a65
 8003958:	08003a65 	.word	0x08003a65
 800395c:	08003a23 	.word	0x08003a23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68b9      	ldr	r1, [r7, #8]
 8003966:	4618      	mov	r0, r3
 8003968:	f000 f9fc 	bl	8003d64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699a      	ldr	r2, [r3, #24]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0208 	orr.w	r2, r2, #8
 800397a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	699a      	ldr	r2, [r3, #24]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0204 	bic.w	r2, r2, #4
 800398a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6999      	ldr	r1, [r3, #24]
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	619a      	str	r2, [r3, #24]
      break;
 800399e:	e064      	b.n	8003a6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68b9      	ldr	r1, [r7, #8]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 fa4c 	bl	8003e44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699a      	ldr	r2, [r3, #24]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699a      	ldr	r2, [r3, #24]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6999      	ldr	r1, [r3, #24]
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	021a      	lsls	r2, r3, #8
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	619a      	str	r2, [r3, #24]
      break;
 80039e0:	e043      	b.n	8003a6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68b9      	ldr	r1, [r7, #8]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 faa1 	bl	8003f30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	69da      	ldr	r2, [r3, #28]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f042 0208 	orr.w	r2, r2, #8
 80039fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	69da      	ldr	r2, [r3, #28]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0204 	bic.w	r2, r2, #4
 8003a0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	69d9      	ldr	r1, [r3, #28]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	691a      	ldr	r2, [r3, #16]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	61da      	str	r2, [r3, #28]
      break;
 8003a20:	e023      	b.n	8003a6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68b9      	ldr	r1, [r7, #8]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f000 faf5 	bl	8004018 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	69da      	ldr	r2, [r3, #28]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	69da      	ldr	r2, [r3, #28]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	69d9      	ldr	r1, [r3, #28]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	021a      	lsls	r2, r3, #8
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	61da      	str	r2, [r3, #28]
      break;
 8003a62:	e002      	b.n	8003a6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	75fb      	strb	r3, [r7, #23]
      break;
 8003a68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d101      	bne.n	8003a98 <HAL_TIM_ConfigClockSource+0x1c>
 8003a94:	2302      	movs	r3, #2
 8003a96:	e0b4      	b.n	8003c02 <HAL_TIM_ConfigClockSource+0x186>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ab6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003abe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ad0:	d03e      	beq.n	8003b50 <HAL_TIM_ConfigClockSource+0xd4>
 8003ad2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ad6:	f200 8087 	bhi.w	8003be8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ada:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ade:	f000 8086 	beq.w	8003bee <HAL_TIM_ConfigClockSource+0x172>
 8003ae2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ae6:	d87f      	bhi.n	8003be8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae8:	2b70      	cmp	r3, #112	@ 0x70
 8003aea:	d01a      	beq.n	8003b22 <HAL_TIM_ConfigClockSource+0xa6>
 8003aec:	2b70      	cmp	r3, #112	@ 0x70
 8003aee:	d87b      	bhi.n	8003be8 <HAL_TIM_ConfigClockSource+0x16c>
 8003af0:	2b60      	cmp	r3, #96	@ 0x60
 8003af2:	d050      	beq.n	8003b96 <HAL_TIM_ConfigClockSource+0x11a>
 8003af4:	2b60      	cmp	r3, #96	@ 0x60
 8003af6:	d877      	bhi.n	8003be8 <HAL_TIM_ConfigClockSource+0x16c>
 8003af8:	2b50      	cmp	r3, #80	@ 0x50
 8003afa:	d03c      	beq.n	8003b76 <HAL_TIM_ConfigClockSource+0xfa>
 8003afc:	2b50      	cmp	r3, #80	@ 0x50
 8003afe:	d873      	bhi.n	8003be8 <HAL_TIM_ConfigClockSource+0x16c>
 8003b00:	2b40      	cmp	r3, #64	@ 0x40
 8003b02:	d058      	beq.n	8003bb6 <HAL_TIM_ConfigClockSource+0x13a>
 8003b04:	2b40      	cmp	r3, #64	@ 0x40
 8003b06:	d86f      	bhi.n	8003be8 <HAL_TIM_ConfigClockSource+0x16c>
 8003b08:	2b30      	cmp	r3, #48	@ 0x30
 8003b0a:	d064      	beq.n	8003bd6 <HAL_TIM_ConfigClockSource+0x15a>
 8003b0c:	2b30      	cmp	r3, #48	@ 0x30
 8003b0e:	d86b      	bhi.n	8003be8 <HAL_TIM_ConfigClockSource+0x16c>
 8003b10:	2b20      	cmp	r3, #32
 8003b12:	d060      	beq.n	8003bd6 <HAL_TIM_ConfigClockSource+0x15a>
 8003b14:	2b20      	cmp	r3, #32
 8003b16:	d867      	bhi.n	8003be8 <HAL_TIM_ConfigClockSource+0x16c>
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d05c      	beq.n	8003bd6 <HAL_TIM_ConfigClockSource+0x15a>
 8003b1c:	2b10      	cmp	r3, #16
 8003b1e:	d05a      	beq.n	8003bd6 <HAL_TIM_ConfigClockSource+0x15a>
 8003b20:	e062      	b.n	8003be8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b32:	f000 fb41 	bl	80041b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	609a      	str	r2, [r3, #8]
      break;
 8003b4e:	e04f      	b.n	8003bf0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b60:	f000 fb2a 	bl	80041b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689a      	ldr	r2, [r3, #8]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b72:	609a      	str	r2, [r3, #8]
      break;
 8003b74:	e03c      	b.n	8003bf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b82:	461a      	mov	r2, r3
 8003b84:	f000 fa9e 	bl	80040c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2150      	movs	r1, #80	@ 0x50
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 faf7 	bl	8004182 <TIM_ITRx_SetConfig>
      break;
 8003b94:	e02c      	b.n	8003bf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	f000 fabd 	bl	8004122 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2160      	movs	r1, #96	@ 0x60
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 fae7 	bl	8004182 <TIM_ITRx_SetConfig>
      break;
 8003bb4:	e01c      	b.n	8003bf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	f000 fa7e 	bl	80040c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2140      	movs	r1, #64	@ 0x40
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 fad7 	bl	8004182 <TIM_ITRx_SetConfig>
      break;
 8003bd4:	e00c      	b.n	8003bf0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4619      	mov	r1, r3
 8003be0:	4610      	mov	r0, r2
 8003be2:	f000 face 	bl	8004182 <TIM_ITRx_SetConfig>
      break;
 8003be6:	e003      	b.n	8003bf0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	73fb      	strb	r3, [r7, #15]
      break;
 8003bec:	e000      	b.n	8003bf0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a46      	ldr	r2, [pc, #280]	@ (8003d38 <TIM_Base_SetConfig+0x12c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d013      	beq.n	8003c4c <TIM_Base_SetConfig+0x40>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c2a:	d00f      	beq.n	8003c4c <TIM_Base_SetConfig+0x40>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a43      	ldr	r2, [pc, #268]	@ (8003d3c <TIM_Base_SetConfig+0x130>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d00b      	beq.n	8003c4c <TIM_Base_SetConfig+0x40>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a42      	ldr	r2, [pc, #264]	@ (8003d40 <TIM_Base_SetConfig+0x134>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d007      	beq.n	8003c4c <TIM_Base_SetConfig+0x40>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a41      	ldr	r2, [pc, #260]	@ (8003d44 <TIM_Base_SetConfig+0x138>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d003      	beq.n	8003c4c <TIM_Base_SetConfig+0x40>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a40      	ldr	r2, [pc, #256]	@ (8003d48 <TIM_Base_SetConfig+0x13c>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d108      	bne.n	8003c5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a35      	ldr	r2, [pc, #212]	@ (8003d38 <TIM_Base_SetConfig+0x12c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d02b      	beq.n	8003cbe <TIM_Base_SetConfig+0xb2>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c6c:	d027      	beq.n	8003cbe <TIM_Base_SetConfig+0xb2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a32      	ldr	r2, [pc, #200]	@ (8003d3c <TIM_Base_SetConfig+0x130>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d023      	beq.n	8003cbe <TIM_Base_SetConfig+0xb2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a31      	ldr	r2, [pc, #196]	@ (8003d40 <TIM_Base_SetConfig+0x134>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d01f      	beq.n	8003cbe <TIM_Base_SetConfig+0xb2>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a30      	ldr	r2, [pc, #192]	@ (8003d44 <TIM_Base_SetConfig+0x138>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d01b      	beq.n	8003cbe <TIM_Base_SetConfig+0xb2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a2f      	ldr	r2, [pc, #188]	@ (8003d48 <TIM_Base_SetConfig+0x13c>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d017      	beq.n	8003cbe <TIM_Base_SetConfig+0xb2>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a2e      	ldr	r2, [pc, #184]	@ (8003d4c <TIM_Base_SetConfig+0x140>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d013      	beq.n	8003cbe <TIM_Base_SetConfig+0xb2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a2d      	ldr	r2, [pc, #180]	@ (8003d50 <TIM_Base_SetConfig+0x144>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00f      	beq.n	8003cbe <TIM_Base_SetConfig+0xb2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a2c      	ldr	r2, [pc, #176]	@ (8003d54 <TIM_Base_SetConfig+0x148>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d00b      	beq.n	8003cbe <TIM_Base_SetConfig+0xb2>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a2b      	ldr	r2, [pc, #172]	@ (8003d58 <TIM_Base_SetConfig+0x14c>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d007      	beq.n	8003cbe <TIM_Base_SetConfig+0xb2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a2a      	ldr	r2, [pc, #168]	@ (8003d5c <TIM_Base_SetConfig+0x150>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d003      	beq.n	8003cbe <TIM_Base_SetConfig+0xb2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a29      	ldr	r2, [pc, #164]	@ (8003d60 <TIM_Base_SetConfig+0x154>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d108      	bne.n	8003cd0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a10      	ldr	r2, [pc, #64]	@ (8003d38 <TIM_Base_SetConfig+0x12c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d003      	beq.n	8003d04 <TIM_Base_SetConfig+0xf8>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a12      	ldr	r2, [pc, #72]	@ (8003d48 <TIM_Base_SetConfig+0x13c>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d103      	bne.n	8003d0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	691a      	ldr	r2, [r3, #16]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d105      	bne.n	8003d2a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	f023 0201 	bic.w	r2, r3, #1
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	611a      	str	r2, [r3, #16]
  }
}
 8003d2a:	bf00      	nop
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	40010000 	.word	0x40010000
 8003d3c:	40000400 	.word	0x40000400
 8003d40:	40000800 	.word	0x40000800
 8003d44:	40000c00 	.word	0x40000c00
 8003d48:	40010400 	.word	0x40010400
 8003d4c:	40014000 	.word	0x40014000
 8003d50:	40014400 	.word	0x40014400
 8003d54:	40014800 	.word	0x40014800
 8003d58:	40001800 	.word	0x40001800
 8003d5c:	40001c00 	.word	0x40001c00
 8003d60:	40002000 	.word	0x40002000

08003d64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	f023 0201 	bic.w	r2, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f023 0303 	bic.w	r3, r3, #3
 8003d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f023 0302 	bic.w	r3, r3, #2
 8003dac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a20      	ldr	r2, [pc, #128]	@ (8003e3c <TIM_OC1_SetConfig+0xd8>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d003      	beq.n	8003dc8 <TIM_OC1_SetConfig+0x64>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a1f      	ldr	r2, [pc, #124]	@ (8003e40 <TIM_OC1_SetConfig+0xdc>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d10c      	bne.n	8003de2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f023 0308 	bic.w	r3, r3, #8
 8003dce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f023 0304 	bic.w	r3, r3, #4
 8003de0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a15      	ldr	r2, [pc, #84]	@ (8003e3c <TIM_OC1_SetConfig+0xd8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d003      	beq.n	8003df2 <TIM_OC1_SetConfig+0x8e>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a14      	ldr	r2, [pc, #80]	@ (8003e40 <TIM_OC1_SetConfig+0xdc>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d111      	bne.n	8003e16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003df8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	621a      	str	r2, [r3, #32]
}
 8003e30:	bf00      	nop
 8003e32:	371c      	adds	r7, #28
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	40010000 	.word	0x40010000
 8003e40:	40010400 	.word	0x40010400

08003e44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b087      	sub	sp, #28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	f023 0210 	bic.w	r2, r3, #16
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	021b      	lsls	r3, r3, #8
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f023 0320 	bic.w	r3, r3, #32
 8003e8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a22      	ldr	r2, [pc, #136]	@ (8003f28 <TIM_OC2_SetConfig+0xe4>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d003      	beq.n	8003eac <TIM_OC2_SetConfig+0x68>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a21      	ldr	r2, [pc, #132]	@ (8003f2c <TIM_OC2_SetConfig+0xe8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d10d      	bne.n	8003ec8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ec6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a17      	ldr	r2, [pc, #92]	@ (8003f28 <TIM_OC2_SetConfig+0xe4>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d003      	beq.n	8003ed8 <TIM_OC2_SetConfig+0x94>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a16      	ldr	r2, [pc, #88]	@ (8003f2c <TIM_OC2_SetConfig+0xe8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d113      	bne.n	8003f00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ede:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	621a      	str	r2, [r3, #32]
}
 8003f1a:	bf00      	nop
 8003f1c:	371c      	adds	r7, #28
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40010000 	.word	0x40010000
 8003f2c:	40010400 	.word	0x40010400

08003f30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 0303 	bic.w	r3, r3, #3
 8003f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	021b      	lsls	r3, r3, #8
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a21      	ldr	r2, [pc, #132]	@ (8004010 <TIM_OC3_SetConfig+0xe0>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d003      	beq.n	8003f96 <TIM_OC3_SetConfig+0x66>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a20      	ldr	r2, [pc, #128]	@ (8004014 <TIM_OC3_SetConfig+0xe4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d10d      	bne.n	8003fb2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	021b      	lsls	r3, r3, #8
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003fb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a16      	ldr	r2, [pc, #88]	@ (8004010 <TIM_OC3_SetConfig+0xe0>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d003      	beq.n	8003fc2 <TIM_OC3_SetConfig+0x92>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a15      	ldr	r2, [pc, #84]	@ (8004014 <TIM_OC3_SetConfig+0xe4>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d113      	bne.n	8003fea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003fc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	011b      	lsls	r3, r3, #4
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	621a      	str	r2, [r3, #32]
}
 8004004:	bf00      	nop
 8004006:	371c      	adds	r7, #28
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr
 8004010:	40010000 	.word	0x40010000
 8004014:	40010400 	.word	0x40010400

08004018 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004018:	b480      	push	{r7}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800404e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	021b      	lsls	r3, r3, #8
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	4313      	orrs	r3, r2
 800405a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004062:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	031b      	lsls	r3, r3, #12
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	4313      	orrs	r3, r2
 800406e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a12      	ldr	r2, [pc, #72]	@ (80040bc <TIM_OC4_SetConfig+0xa4>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d003      	beq.n	8004080 <TIM_OC4_SetConfig+0x68>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a11      	ldr	r2, [pc, #68]	@ (80040c0 <TIM_OC4_SetConfig+0xa8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d109      	bne.n	8004094 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004086:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	019b      	lsls	r3, r3, #6
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	4313      	orrs	r3, r2
 8004092:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	621a      	str	r2, [r3, #32]
}
 80040ae:	bf00      	nop
 80040b0:	371c      	adds	r7, #28
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40010000 	.word	0x40010000
 80040c0:	40010400 	.word	0x40010400

080040c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	f023 0201 	bic.w	r2, r3, #1
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	011b      	lsls	r3, r3, #4
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f023 030a 	bic.w	r3, r3, #10
 8004100:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	4313      	orrs	r3, r2
 8004108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	621a      	str	r2, [r3, #32]
}
 8004116:	bf00      	nop
 8004118:	371c      	adds	r7, #28
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004122:	b480      	push	{r7}
 8004124:	b087      	sub	sp, #28
 8004126:	af00      	add	r7, sp, #0
 8004128:	60f8      	str	r0, [r7, #12]
 800412a:	60b9      	str	r1, [r7, #8]
 800412c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	f023 0210 	bic.w	r2, r3, #16
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800414c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	031b      	lsls	r3, r3, #12
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	4313      	orrs	r3, r2
 8004156:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800415e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	011b      	lsls	r3, r3, #4
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	4313      	orrs	r3, r2
 8004168:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	621a      	str	r2, [r3, #32]
}
 8004176:	bf00      	nop
 8004178:	371c      	adds	r7, #28
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004182:	b480      	push	{r7}
 8004184:	b085      	sub	sp, #20
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
 800418a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004198:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4313      	orrs	r3, r2
 80041a0:	f043 0307 	orr.w	r3, r3, #7
 80041a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	609a      	str	r2, [r3, #8]
}
 80041ac:	bf00      	nop
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
 80041c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	021a      	lsls	r2, r3, #8
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	431a      	orrs	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	4313      	orrs	r3, r2
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	609a      	str	r2, [r3, #8]
}
 80041ec:	bf00      	nop
 80041ee:	371c      	adds	r7, #28
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	f003 031f 	and.w	r3, r3, #31
 800420a:	2201      	movs	r2, #1
 800420c:	fa02 f303 	lsl.w	r3, r2, r3
 8004210:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a1a      	ldr	r2, [r3, #32]
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	43db      	mvns	r3, r3
 800421a:	401a      	ands	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a1a      	ldr	r2, [r3, #32]
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	f003 031f 	and.w	r3, r3, #31
 800422a:	6879      	ldr	r1, [r7, #4]
 800422c:	fa01 f303 	lsl.w	r3, r1, r3
 8004230:	431a      	orrs	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	621a      	str	r2, [r3, #32]
}
 8004236:	bf00      	nop
 8004238:	371c      	adds	r7, #28
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
	...

08004244 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004254:	2b01      	cmp	r3, #1
 8004256:	d101      	bne.n	800425c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004258:	2302      	movs	r3, #2
 800425a:	e05a      	b.n	8004312 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004282:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a21      	ldr	r2, [pc, #132]	@ (8004320 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d022      	beq.n	80042e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042a8:	d01d      	beq.n	80042e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a1d      	ldr	r2, [pc, #116]	@ (8004324 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d018      	beq.n	80042e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004328 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d013      	beq.n	80042e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a1a      	ldr	r2, [pc, #104]	@ (800432c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d00e      	beq.n	80042e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a18      	ldr	r2, [pc, #96]	@ (8004330 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d009      	beq.n	80042e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a17      	ldr	r2, [pc, #92]	@ (8004334 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d004      	beq.n	80042e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a15      	ldr	r2, [pc, #84]	@ (8004338 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d10c      	bne.n	8004300 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	40010000 	.word	0x40010000
 8004324:	40000400 	.word	0x40000400
 8004328:	40000800 	.word	0x40000800
 800432c:	40000c00 	.word	0x40000c00
 8004330:	40010400 	.word	0x40010400
 8004334:	40014000 	.word	0x40014000
 8004338:	40001800 	.word	0x40001800

0800433c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004346:	2300      	movs	r3, #0
 8004348:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004350:	2b01      	cmp	r3, #1
 8004352:	d101      	bne.n	8004358 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004354:	2302      	movs	r3, #2
 8004356:	e03d      	b.n	80043d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	4313      	orrs	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	4313      	orrs	r3, r2
 800437a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	4313      	orrs	r3, r2
 8004388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4313      	orrs	r3, r2
 8004396:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e042      	b.n	8004478 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d106      	bne.n	800440c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7fc fcb8 	bl	8000d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2224      	movs	r2, #36	@ 0x24
 8004410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004422:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 fcdb 	bl	8004de0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004438:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	695a      	ldr	r2, [r3, #20]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004448:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68da      	ldr	r2, [r3, #12]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004458:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2220      	movs	r2, #32
 8004464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2220      	movs	r2, #32
 800446c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	4613      	mov	r3, r2
 800448c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b20      	cmp	r3, #32
 8004498:	d112      	bne.n	80044c0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <HAL_UART_Receive_IT+0x26>
 80044a0:	88fb      	ldrh	r3, [r7, #6]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e00b      	b.n	80044c2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80044b0:	88fb      	ldrh	r3, [r7, #6]
 80044b2:	461a      	mov	r2, r3
 80044b4:	68b9      	ldr	r1, [r7, #8]
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 faba 	bl	8004a30 <UART_Start_Receive_IT>
 80044bc:	4603      	mov	r3, r0
 80044be:	e000      	b.n	80044c2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80044c0:	2302      	movs	r3, #2
  }
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
	...

080044cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b0ba      	sub	sp, #232	@ 0xe8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80044f2:	2300      	movs	r3, #0
 80044f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800450a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10f      	bne.n	8004532 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004516:	f003 0320 	and.w	r3, r3, #32
 800451a:	2b00      	cmp	r3, #0
 800451c:	d009      	beq.n	8004532 <HAL_UART_IRQHandler+0x66>
 800451e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004522:	f003 0320 	and.w	r3, r3, #32
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 fb99 	bl	8004c62 <UART_Receive_IT>
      return;
 8004530:	e25b      	b.n	80049ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004532:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 80de 	beq.w	80046f8 <HAL_UART_IRQHandler+0x22c>
 800453c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b00      	cmp	r3, #0
 8004546:	d106      	bne.n	8004556 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800454c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 80d1 	beq.w	80046f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00b      	beq.n	800457a <HAL_UART_IRQHandler+0xae>
 8004562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800456a:	2b00      	cmp	r3, #0
 800456c:	d005      	beq.n	800457a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004572:	f043 0201 	orr.w	r2, r3, #1
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800457a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800457e:	f003 0304 	and.w	r3, r3, #4
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00b      	beq.n	800459e <HAL_UART_IRQHandler+0xd2>
 8004586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d005      	beq.n	800459e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004596:	f043 0202 	orr.w	r2, r3, #2
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800459e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00b      	beq.n	80045c2 <HAL_UART_IRQHandler+0xf6>
 80045aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d005      	beq.n	80045c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ba:	f043 0204 	orr.w	r2, r3, #4
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80045c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045c6:	f003 0308 	and.w	r3, r3, #8
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d011      	beq.n	80045f2 <HAL_UART_IRQHandler+0x126>
 80045ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045d2:	f003 0320 	and.w	r3, r3, #32
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d105      	bne.n	80045e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80045da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d005      	beq.n	80045f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ea:	f043 0208 	orr.w	r2, r3, #8
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 81f2 	beq.w	80049e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004600:	f003 0320 	and.w	r3, r3, #32
 8004604:	2b00      	cmp	r3, #0
 8004606:	d008      	beq.n	800461a <HAL_UART_IRQHandler+0x14e>
 8004608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800460c:	f003 0320 	and.w	r3, r3, #32
 8004610:	2b00      	cmp	r3, #0
 8004612:	d002      	beq.n	800461a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 fb24 	bl	8004c62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004624:	2b40      	cmp	r3, #64	@ 0x40
 8004626:	bf0c      	ite	eq
 8004628:	2301      	moveq	r3, #1
 800462a:	2300      	movne	r3, #0
 800462c:	b2db      	uxtb	r3, r3
 800462e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004636:	f003 0308 	and.w	r3, r3, #8
 800463a:	2b00      	cmp	r3, #0
 800463c:	d103      	bne.n	8004646 <HAL_UART_IRQHandler+0x17a>
 800463e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004642:	2b00      	cmp	r3, #0
 8004644:	d04f      	beq.n	80046e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 fa2c 	bl	8004aa4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004656:	2b40      	cmp	r3, #64	@ 0x40
 8004658:	d141      	bne.n	80046de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	3314      	adds	r3, #20
 8004660:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004664:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004668:	e853 3f00 	ldrex	r3, [r3]
 800466c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004670:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004674:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004678:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	3314      	adds	r3, #20
 8004682:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004686:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800468a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004692:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004696:	e841 2300 	strex	r3, r2, [r1]
 800469a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800469e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1d9      	bne.n	800465a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d013      	beq.n	80046d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046b2:	4a7e      	ldr	r2, [pc, #504]	@ (80048ac <HAL_UART_IRQHandler+0x3e0>)
 80046b4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fc fee9 	bl	8001492 <HAL_DMA_Abort_IT>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d016      	beq.n	80046f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80046d0:	4610      	mov	r0, r2
 80046d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046d4:	e00e      	b.n	80046f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f994 	bl	8004a04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046dc:	e00a      	b.n	80046f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f990 	bl	8004a04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e4:	e006      	b.n	80046f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f98c 	bl	8004a04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80046f2:	e175      	b.n	80049e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f4:	bf00      	nop
    return;
 80046f6:	e173      	b.n	80049e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	f040 814f 	bne.w	80049a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004706:	f003 0310 	and.w	r3, r3, #16
 800470a:	2b00      	cmp	r3, #0
 800470c:	f000 8148 	beq.w	80049a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004714:	f003 0310 	and.w	r3, r3, #16
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 8141 	beq.w	80049a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800471e:	2300      	movs	r3, #0
 8004720:	60bb      	str	r3, [r7, #8]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	60bb      	str	r3, [r7, #8]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	60bb      	str	r3, [r7, #8]
 8004732:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800473e:	2b40      	cmp	r3, #64	@ 0x40
 8004740:	f040 80b6 	bne.w	80048b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004750:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 8145 	beq.w	80049e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800475e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004762:	429a      	cmp	r2, r3
 8004764:	f080 813e 	bcs.w	80049e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800476e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800477a:	f000 8088 	beq.w	800488e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	330c      	adds	r3, #12
 8004784:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004788:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800478c:	e853 3f00 	ldrex	r3, [r3]
 8004790:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004794:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004798:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800479c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	330c      	adds	r3, #12
 80047a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80047aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80047ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80047b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80047ba:	e841 2300 	strex	r3, r2, [r1]
 80047be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80047c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1d9      	bne.n	800477e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	3314      	adds	r3, #20
 80047d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047d4:	e853 3f00 	ldrex	r3, [r3]
 80047d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80047da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80047dc:	f023 0301 	bic.w	r3, r3, #1
 80047e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3314      	adds	r3, #20
 80047ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80047ee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80047f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80047f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80047fa:	e841 2300 	strex	r3, r2, [r1]
 80047fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004800:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1e1      	bne.n	80047ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	3314      	adds	r3, #20
 800480c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004810:	e853 3f00 	ldrex	r3, [r3]
 8004814:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004816:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004818:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800481c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	3314      	adds	r3, #20
 8004826:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800482a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800482c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004830:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004832:	e841 2300 	strex	r3, r2, [r1]
 8004836:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004838:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1e3      	bne.n	8004806 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2220      	movs	r2, #32
 8004842:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	330c      	adds	r3, #12
 8004852:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004854:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004856:	e853 3f00 	ldrex	r3, [r3]
 800485a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800485c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800485e:	f023 0310 	bic.w	r3, r3, #16
 8004862:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	330c      	adds	r3, #12
 800486c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004870:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004872:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004874:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004876:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004878:	e841 2300 	strex	r3, r2, [r1]
 800487c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800487e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1e3      	bne.n	800484c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004888:	4618      	mov	r0, r3
 800488a:	f7fc fd92 	bl	80013b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2202      	movs	r2, #2
 8004892:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800489c:	b29b      	uxth	r3, r3
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	4619      	mov	r1, r3
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f8b7 	bl	8004a18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048aa:	e09b      	b.n	80049e4 <HAL_UART_IRQHandler+0x518>
 80048ac:	08004b6b 	.word	0x08004b6b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f000 808e 	beq.w	80049e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80048cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 8089 	beq.w	80049e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	330c      	adds	r3, #12
 80048dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048e0:	e853 3f00 	ldrex	r3, [r3]
 80048e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	330c      	adds	r3, #12
 80048f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80048fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80048fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004900:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004902:	e841 2300 	strex	r3, r2, [r1]
 8004906:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1e3      	bne.n	80048d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	3314      	adds	r3, #20
 8004914:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004918:	e853 3f00 	ldrex	r3, [r3]
 800491c:	623b      	str	r3, [r7, #32]
   return(result);
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	f023 0301 	bic.w	r3, r3, #1
 8004924:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3314      	adds	r3, #20
 800492e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004932:	633a      	str	r2, [r7, #48]	@ 0x30
 8004934:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004936:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004938:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800493a:	e841 2300 	strex	r3, r2, [r1]
 800493e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1e3      	bne.n	800490e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2220      	movs	r2, #32
 800494a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	330c      	adds	r3, #12
 800495a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	e853 3f00 	ldrex	r3, [r3]
 8004962:	60fb      	str	r3, [r7, #12]
   return(result);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f023 0310 	bic.w	r3, r3, #16
 800496a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	330c      	adds	r3, #12
 8004974:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004978:	61fa      	str	r2, [r7, #28]
 800497a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497c:	69b9      	ldr	r1, [r7, #24]
 800497e:	69fa      	ldr	r2, [r7, #28]
 8004980:	e841 2300 	strex	r3, r2, [r1]
 8004984:	617b      	str	r3, [r7, #20]
   return(result);
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1e3      	bne.n	8004954 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004992:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004996:	4619      	mov	r1, r3
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 f83d 	bl	8004a18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800499e:	e023      	b.n	80049e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d009      	beq.n	80049c0 <HAL_UART_IRQHandler+0x4f4>
 80049ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f8ea 	bl	8004b92 <UART_Transmit_IT>
    return;
 80049be:	e014      	b.n	80049ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00e      	beq.n	80049ea <HAL_UART_IRQHandler+0x51e>
 80049cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d008      	beq.n	80049ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f92a 	bl	8004c32 <UART_EndTransmit_IT>
    return;
 80049de:	e004      	b.n	80049ea <HAL_UART_IRQHandler+0x51e>
    return;
 80049e0:	bf00      	nop
 80049e2:	e002      	b.n	80049ea <HAL_UART_IRQHandler+0x51e>
      return;
 80049e4:	bf00      	nop
 80049e6:	e000      	b.n	80049ea <HAL_UART_IRQHandler+0x51e>
      return;
 80049e8:	bf00      	nop
  }
}
 80049ea:	37e8      	adds	r7, #232	@ 0xe8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	460b      	mov	r3, r1
 8004a22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	88fa      	ldrh	r2, [r7, #6]
 8004a48:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	88fa      	ldrh	r2, [r7, #6]
 8004a4e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2222      	movs	r2, #34	@ 0x22
 8004a5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d007      	beq.n	8004a76 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68da      	ldr	r2, [r3, #12]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a74:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	695a      	ldr	r2, [r3, #20]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f042 0201 	orr.w	r2, r2, #1
 8004a84:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68da      	ldr	r2, [r3, #12]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0220 	orr.w	r2, r2, #32
 8004a94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b095      	sub	sp, #84	@ 0x54
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	330c      	adds	r3, #12
 8004ab2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ab6:	e853 3f00 	ldrex	r3, [r3]
 8004aba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004abe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	330c      	adds	r3, #12
 8004aca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004acc:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ad2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ad4:	e841 2300 	strex	r3, r2, [r1]
 8004ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1e5      	bne.n	8004aac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3314      	adds	r3, #20
 8004ae6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae8:	6a3b      	ldr	r3, [r7, #32]
 8004aea:	e853 3f00 	ldrex	r3, [r3]
 8004aee:	61fb      	str	r3, [r7, #28]
   return(result);
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	f023 0301 	bic.w	r3, r3, #1
 8004af6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3314      	adds	r3, #20
 8004afe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b08:	e841 2300 	strex	r3, r2, [r1]
 8004b0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1e5      	bne.n	8004ae0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d119      	bne.n	8004b50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	330c      	adds	r3, #12
 8004b22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	e853 3f00 	ldrex	r3, [r3]
 8004b2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	f023 0310 	bic.w	r3, r3, #16
 8004b32:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	330c      	adds	r3, #12
 8004b3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b3c:	61ba      	str	r2, [r7, #24]
 8004b3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b40:	6979      	ldr	r1, [r7, #20]
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	e841 2300 	strex	r3, r2, [r1]
 8004b48:	613b      	str	r3, [r7, #16]
   return(result);
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1e5      	bne.n	8004b1c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2220      	movs	r2, #32
 8004b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b5e:	bf00      	nop
 8004b60:	3754      	adds	r7, #84	@ 0x54
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f7ff ff3d 	bl	8004a04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b8a:	bf00      	nop
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b085      	sub	sp, #20
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b21      	cmp	r3, #33	@ 0x21
 8004ba4:	d13e      	bne.n	8004c24 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bae:	d114      	bne.n	8004bda <UART_Transmit_IT+0x48>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d110      	bne.n	8004bda <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	881b      	ldrh	r3, [r3, #0]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bcc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	1c9a      	adds	r2, r3, #2
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	621a      	str	r2, [r3, #32]
 8004bd8:	e008      	b.n	8004bec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	1c59      	adds	r1, r3, #1
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	6211      	str	r1, [r2, #32]
 8004be4:	781a      	ldrb	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10f      	bne.n	8004c20 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68da      	ldr	r2, [r3, #12]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c0e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68da      	ldr	r2, [r3, #12]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c1e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c20:	2300      	movs	r3, #0
 8004c22:	e000      	b.n	8004c26 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c24:	2302      	movs	r3, #2
  }
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b082      	sub	sp, #8
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68da      	ldr	r2, [r3, #12]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2220      	movs	r2, #32
 8004c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7ff fecc 	bl	80049f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b08c      	sub	sp, #48	@ 0x30
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b22      	cmp	r3, #34	@ 0x22
 8004c74:	f040 80ae 	bne.w	8004dd4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c80:	d117      	bne.n	8004cb2 <UART_Receive_IT+0x50>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d113      	bne.n	8004cb2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c92:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004caa:	1c9a      	adds	r2, r3, #2
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	629a      	str	r2, [r3, #40]	@ 0x28
 8004cb0:	e026      	b.n	8004d00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cc4:	d007      	beq.n	8004cd6 <UART_Receive_IT+0x74>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10a      	bne.n	8004ce4 <UART_Receive_IT+0x82>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d106      	bne.n	8004ce4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	b2da      	uxtb	r2, r3
 8004cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce0:	701a      	strb	r2, [r3, #0]
 8004ce2:	e008      	b.n	8004cf6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cf0:	b2da      	uxtb	r2, r3
 8004cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cfa:	1c5a      	adds	r2, r3, #1
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	3b01      	subs	r3, #1
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d15d      	bne.n	8004dd0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68da      	ldr	r2, [r3, #12]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 0220 	bic.w	r2, r2, #32
 8004d22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68da      	ldr	r2, [r3, #12]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	695a      	ldr	r2, [r3, #20]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 0201 	bic.w	r2, r2, #1
 8004d42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2220      	movs	r2, #32
 8004d48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d135      	bne.n	8004dc6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	330c      	adds	r3, #12
 8004d66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	e853 3f00 	ldrex	r3, [r3]
 8004d6e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	f023 0310 	bic.w	r3, r3, #16
 8004d76:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	330c      	adds	r3, #12
 8004d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d80:	623a      	str	r2, [r7, #32]
 8004d82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d84:	69f9      	ldr	r1, [r7, #28]
 8004d86:	6a3a      	ldr	r2, [r7, #32]
 8004d88:	e841 2300 	strex	r3, r2, [r1]
 8004d8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1e5      	bne.n	8004d60 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0310 	and.w	r3, r3, #16
 8004d9e:	2b10      	cmp	r3, #16
 8004da0:	d10a      	bne.n	8004db8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004da2:	2300      	movs	r3, #0
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	60fb      	str	r3, [r7, #12]
 8004db6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7ff fe2a 	bl	8004a18 <HAL_UARTEx_RxEventCallback>
 8004dc4:	e002      	b.n	8004dcc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7fb fe10 	bl	80009ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	e002      	b.n	8004dd6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	e000      	b.n	8004dd6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004dd4:	2302      	movs	r3, #2
  }
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3730      	adds	r7, #48	@ 0x30
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
	...

08004de0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004de4:	b0c0      	sub	sp, #256	@ 0x100
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dfc:	68d9      	ldr	r1, [r3, #12]
 8004dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	ea40 0301 	orr.w	r3, r0, r1
 8004e08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	431a      	orrs	r2, r3
 8004e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004e38:	f021 010c 	bic.w	r1, r1, #12
 8004e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e46:	430b      	orrs	r3, r1
 8004e48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e5a:	6999      	ldr	r1, [r3, #24]
 8004e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	ea40 0301 	orr.w	r3, r0, r1
 8004e66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	4b8f      	ldr	r3, [pc, #572]	@ (80050ac <UART_SetConfig+0x2cc>)
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d005      	beq.n	8004e80 <UART_SetConfig+0xa0>
 8004e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	4b8d      	ldr	r3, [pc, #564]	@ (80050b0 <UART_SetConfig+0x2d0>)
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d104      	bne.n	8004e8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e80:	f7fe fbb6 	bl	80035f0 <HAL_RCC_GetPCLK2Freq>
 8004e84:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004e88:	e003      	b.n	8004e92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e8a:	f7fe fb9d 	bl	80035c8 <HAL_RCC_GetPCLK1Freq>
 8004e8e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e96:	69db      	ldr	r3, [r3, #28]
 8004e98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e9c:	f040 810c 	bne.w	80050b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ea0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004eaa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004eae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004eb2:	4622      	mov	r2, r4
 8004eb4:	462b      	mov	r3, r5
 8004eb6:	1891      	adds	r1, r2, r2
 8004eb8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004eba:	415b      	adcs	r3, r3
 8004ebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ebe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004ec2:	4621      	mov	r1, r4
 8004ec4:	eb12 0801 	adds.w	r8, r2, r1
 8004ec8:	4629      	mov	r1, r5
 8004eca:	eb43 0901 	adc.w	r9, r3, r1
 8004ece:	f04f 0200 	mov.w	r2, #0
 8004ed2:	f04f 0300 	mov.w	r3, #0
 8004ed6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004eda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ede:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ee2:	4690      	mov	r8, r2
 8004ee4:	4699      	mov	r9, r3
 8004ee6:	4623      	mov	r3, r4
 8004ee8:	eb18 0303 	adds.w	r3, r8, r3
 8004eec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ef0:	462b      	mov	r3, r5
 8004ef2:	eb49 0303 	adc.w	r3, r9, r3
 8004ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f06:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004f0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f0e:	460b      	mov	r3, r1
 8004f10:	18db      	adds	r3, r3, r3
 8004f12:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f14:	4613      	mov	r3, r2
 8004f16:	eb42 0303 	adc.w	r3, r2, r3
 8004f1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004f20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004f24:	f7fb f950 	bl	80001c8 <__aeabi_uldivmod>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	4b61      	ldr	r3, [pc, #388]	@ (80050b4 <UART_SetConfig+0x2d4>)
 8004f2e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f32:	095b      	lsrs	r3, r3, #5
 8004f34:	011c      	lsls	r4, r3, #4
 8004f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f40:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004f44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004f48:	4642      	mov	r2, r8
 8004f4a:	464b      	mov	r3, r9
 8004f4c:	1891      	adds	r1, r2, r2
 8004f4e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004f50:	415b      	adcs	r3, r3
 8004f52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f58:	4641      	mov	r1, r8
 8004f5a:	eb12 0a01 	adds.w	sl, r2, r1
 8004f5e:	4649      	mov	r1, r9
 8004f60:	eb43 0b01 	adc.w	fp, r3, r1
 8004f64:	f04f 0200 	mov.w	r2, #0
 8004f68:	f04f 0300 	mov.w	r3, #0
 8004f6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f78:	4692      	mov	sl, r2
 8004f7a:	469b      	mov	fp, r3
 8004f7c:	4643      	mov	r3, r8
 8004f7e:	eb1a 0303 	adds.w	r3, sl, r3
 8004f82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f86:	464b      	mov	r3, r9
 8004f88:	eb4b 0303 	adc.w	r3, fp, r3
 8004f8c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f9c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004fa0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	18db      	adds	r3, r3, r3
 8004fa8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004faa:	4613      	mov	r3, r2
 8004fac:	eb42 0303 	adc.w	r3, r2, r3
 8004fb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004fb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004fba:	f7fb f905 	bl	80001c8 <__aeabi_uldivmod>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4611      	mov	r1, r2
 8004fc4:	4b3b      	ldr	r3, [pc, #236]	@ (80050b4 <UART_SetConfig+0x2d4>)
 8004fc6:	fba3 2301 	umull	r2, r3, r3, r1
 8004fca:	095b      	lsrs	r3, r3, #5
 8004fcc:	2264      	movs	r2, #100	@ 0x64
 8004fce:	fb02 f303 	mul.w	r3, r2, r3
 8004fd2:	1acb      	subs	r3, r1, r3
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004fda:	4b36      	ldr	r3, [pc, #216]	@ (80050b4 <UART_SetConfig+0x2d4>)
 8004fdc:	fba3 2302 	umull	r2, r3, r3, r2
 8004fe0:	095b      	lsrs	r3, r3, #5
 8004fe2:	005b      	lsls	r3, r3, #1
 8004fe4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004fe8:	441c      	add	r4, r3
 8004fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ff4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004ff8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004ffc:	4642      	mov	r2, r8
 8004ffe:	464b      	mov	r3, r9
 8005000:	1891      	adds	r1, r2, r2
 8005002:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005004:	415b      	adcs	r3, r3
 8005006:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005008:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800500c:	4641      	mov	r1, r8
 800500e:	1851      	adds	r1, r2, r1
 8005010:	6339      	str	r1, [r7, #48]	@ 0x30
 8005012:	4649      	mov	r1, r9
 8005014:	414b      	adcs	r3, r1
 8005016:	637b      	str	r3, [r7, #52]	@ 0x34
 8005018:	f04f 0200 	mov.w	r2, #0
 800501c:	f04f 0300 	mov.w	r3, #0
 8005020:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005024:	4659      	mov	r1, fp
 8005026:	00cb      	lsls	r3, r1, #3
 8005028:	4651      	mov	r1, sl
 800502a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800502e:	4651      	mov	r1, sl
 8005030:	00ca      	lsls	r2, r1, #3
 8005032:	4610      	mov	r0, r2
 8005034:	4619      	mov	r1, r3
 8005036:	4603      	mov	r3, r0
 8005038:	4642      	mov	r2, r8
 800503a:	189b      	adds	r3, r3, r2
 800503c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005040:	464b      	mov	r3, r9
 8005042:	460a      	mov	r2, r1
 8005044:	eb42 0303 	adc.w	r3, r2, r3
 8005048:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800504c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005058:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800505c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005060:	460b      	mov	r3, r1
 8005062:	18db      	adds	r3, r3, r3
 8005064:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005066:	4613      	mov	r3, r2
 8005068:	eb42 0303 	adc.w	r3, r2, r3
 800506c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800506e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005072:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005076:	f7fb f8a7 	bl	80001c8 <__aeabi_uldivmod>
 800507a:	4602      	mov	r2, r0
 800507c:	460b      	mov	r3, r1
 800507e:	4b0d      	ldr	r3, [pc, #52]	@ (80050b4 <UART_SetConfig+0x2d4>)
 8005080:	fba3 1302 	umull	r1, r3, r3, r2
 8005084:	095b      	lsrs	r3, r3, #5
 8005086:	2164      	movs	r1, #100	@ 0x64
 8005088:	fb01 f303 	mul.w	r3, r1, r3
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	00db      	lsls	r3, r3, #3
 8005090:	3332      	adds	r3, #50	@ 0x32
 8005092:	4a08      	ldr	r2, [pc, #32]	@ (80050b4 <UART_SetConfig+0x2d4>)
 8005094:	fba2 2303 	umull	r2, r3, r2, r3
 8005098:	095b      	lsrs	r3, r3, #5
 800509a:	f003 0207 	and.w	r2, r3, #7
 800509e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4422      	add	r2, r4
 80050a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80050a8:	e106      	b.n	80052b8 <UART_SetConfig+0x4d8>
 80050aa:	bf00      	nop
 80050ac:	40011000 	.word	0x40011000
 80050b0:	40011400 	.word	0x40011400
 80050b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050bc:	2200      	movs	r2, #0
 80050be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80050c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80050c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80050ca:	4642      	mov	r2, r8
 80050cc:	464b      	mov	r3, r9
 80050ce:	1891      	adds	r1, r2, r2
 80050d0:	6239      	str	r1, [r7, #32]
 80050d2:	415b      	adcs	r3, r3
 80050d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80050d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050da:	4641      	mov	r1, r8
 80050dc:	1854      	adds	r4, r2, r1
 80050de:	4649      	mov	r1, r9
 80050e0:	eb43 0501 	adc.w	r5, r3, r1
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	f04f 0300 	mov.w	r3, #0
 80050ec:	00eb      	lsls	r3, r5, #3
 80050ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050f2:	00e2      	lsls	r2, r4, #3
 80050f4:	4614      	mov	r4, r2
 80050f6:	461d      	mov	r5, r3
 80050f8:	4643      	mov	r3, r8
 80050fa:	18e3      	adds	r3, r4, r3
 80050fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005100:	464b      	mov	r3, r9
 8005102:	eb45 0303 	adc.w	r3, r5, r3
 8005106:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800510a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005116:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800511a:	f04f 0200 	mov.w	r2, #0
 800511e:	f04f 0300 	mov.w	r3, #0
 8005122:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005126:	4629      	mov	r1, r5
 8005128:	008b      	lsls	r3, r1, #2
 800512a:	4621      	mov	r1, r4
 800512c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005130:	4621      	mov	r1, r4
 8005132:	008a      	lsls	r2, r1, #2
 8005134:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005138:	f7fb f846 	bl	80001c8 <__aeabi_uldivmod>
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	4b60      	ldr	r3, [pc, #384]	@ (80052c4 <UART_SetConfig+0x4e4>)
 8005142:	fba3 2302 	umull	r2, r3, r3, r2
 8005146:	095b      	lsrs	r3, r3, #5
 8005148:	011c      	lsls	r4, r3, #4
 800514a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800514e:	2200      	movs	r2, #0
 8005150:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005154:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005158:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800515c:	4642      	mov	r2, r8
 800515e:	464b      	mov	r3, r9
 8005160:	1891      	adds	r1, r2, r2
 8005162:	61b9      	str	r1, [r7, #24]
 8005164:	415b      	adcs	r3, r3
 8005166:	61fb      	str	r3, [r7, #28]
 8005168:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800516c:	4641      	mov	r1, r8
 800516e:	1851      	adds	r1, r2, r1
 8005170:	6139      	str	r1, [r7, #16]
 8005172:	4649      	mov	r1, r9
 8005174:	414b      	adcs	r3, r1
 8005176:	617b      	str	r3, [r7, #20]
 8005178:	f04f 0200 	mov.w	r2, #0
 800517c:	f04f 0300 	mov.w	r3, #0
 8005180:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005184:	4659      	mov	r1, fp
 8005186:	00cb      	lsls	r3, r1, #3
 8005188:	4651      	mov	r1, sl
 800518a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800518e:	4651      	mov	r1, sl
 8005190:	00ca      	lsls	r2, r1, #3
 8005192:	4610      	mov	r0, r2
 8005194:	4619      	mov	r1, r3
 8005196:	4603      	mov	r3, r0
 8005198:	4642      	mov	r2, r8
 800519a:	189b      	adds	r3, r3, r2
 800519c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80051a0:	464b      	mov	r3, r9
 80051a2:	460a      	mov	r2, r1
 80051a4:	eb42 0303 	adc.w	r3, r2, r3
 80051a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80051ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80051b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80051b8:	f04f 0200 	mov.w	r2, #0
 80051bc:	f04f 0300 	mov.w	r3, #0
 80051c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80051c4:	4649      	mov	r1, r9
 80051c6:	008b      	lsls	r3, r1, #2
 80051c8:	4641      	mov	r1, r8
 80051ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051ce:	4641      	mov	r1, r8
 80051d0:	008a      	lsls	r2, r1, #2
 80051d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80051d6:	f7fa fff7 	bl	80001c8 <__aeabi_uldivmod>
 80051da:	4602      	mov	r2, r0
 80051dc:	460b      	mov	r3, r1
 80051de:	4611      	mov	r1, r2
 80051e0:	4b38      	ldr	r3, [pc, #224]	@ (80052c4 <UART_SetConfig+0x4e4>)
 80051e2:	fba3 2301 	umull	r2, r3, r3, r1
 80051e6:	095b      	lsrs	r3, r3, #5
 80051e8:	2264      	movs	r2, #100	@ 0x64
 80051ea:	fb02 f303 	mul.w	r3, r2, r3
 80051ee:	1acb      	subs	r3, r1, r3
 80051f0:	011b      	lsls	r3, r3, #4
 80051f2:	3332      	adds	r3, #50	@ 0x32
 80051f4:	4a33      	ldr	r2, [pc, #204]	@ (80052c4 <UART_SetConfig+0x4e4>)
 80051f6:	fba2 2303 	umull	r2, r3, r2, r3
 80051fa:	095b      	lsrs	r3, r3, #5
 80051fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005200:	441c      	add	r4, r3
 8005202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005206:	2200      	movs	r2, #0
 8005208:	673b      	str	r3, [r7, #112]	@ 0x70
 800520a:	677a      	str	r2, [r7, #116]	@ 0x74
 800520c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005210:	4642      	mov	r2, r8
 8005212:	464b      	mov	r3, r9
 8005214:	1891      	adds	r1, r2, r2
 8005216:	60b9      	str	r1, [r7, #8]
 8005218:	415b      	adcs	r3, r3
 800521a:	60fb      	str	r3, [r7, #12]
 800521c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005220:	4641      	mov	r1, r8
 8005222:	1851      	adds	r1, r2, r1
 8005224:	6039      	str	r1, [r7, #0]
 8005226:	4649      	mov	r1, r9
 8005228:	414b      	adcs	r3, r1
 800522a:	607b      	str	r3, [r7, #4]
 800522c:	f04f 0200 	mov.w	r2, #0
 8005230:	f04f 0300 	mov.w	r3, #0
 8005234:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005238:	4659      	mov	r1, fp
 800523a:	00cb      	lsls	r3, r1, #3
 800523c:	4651      	mov	r1, sl
 800523e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005242:	4651      	mov	r1, sl
 8005244:	00ca      	lsls	r2, r1, #3
 8005246:	4610      	mov	r0, r2
 8005248:	4619      	mov	r1, r3
 800524a:	4603      	mov	r3, r0
 800524c:	4642      	mov	r2, r8
 800524e:	189b      	adds	r3, r3, r2
 8005250:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005252:	464b      	mov	r3, r9
 8005254:	460a      	mov	r2, r1
 8005256:	eb42 0303 	adc.w	r3, r2, r3
 800525a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800525c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	663b      	str	r3, [r7, #96]	@ 0x60
 8005266:	667a      	str	r2, [r7, #100]	@ 0x64
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	f04f 0300 	mov.w	r3, #0
 8005270:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005274:	4649      	mov	r1, r9
 8005276:	008b      	lsls	r3, r1, #2
 8005278:	4641      	mov	r1, r8
 800527a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800527e:	4641      	mov	r1, r8
 8005280:	008a      	lsls	r2, r1, #2
 8005282:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005286:	f7fa ff9f 	bl	80001c8 <__aeabi_uldivmod>
 800528a:	4602      	mov	r2, r0
 800528c:	460b      	mov	r3, r1
 800528e:	4b0d      	ldr	r3, [pc, #52]	@ (80052c4 <UART_SetConfig+0x4e4>)
 8005290:	fba3 1302 	umull	r1, r3, r3, r2
 8005294:	095b      	lsrs	r3, r3, #5
 8005296:	2164      	movs	r1, #100	@ 0x64
 8005298:	fb01 f303 	mul.w	r3, r1, r3
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	011b      	lsls	r3, r3, #4
 80052a0:	3332      	adds	r3, #50	@ 0x32
 80052a2:	4a08      	ldr	r2, [pc, #32]	@ (80052c4 <UART_SetConfig+0x4e4>)
 80052a4:	fba2 2303 	umull	r2, r3, r2, r3
 80052a8:	095b      	lsrs	r3, r3, #5
 80052aa:	f003 020f 	and.w	r2, r3, #15
 80052ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4422      	add	r2, r4
 80052b6:	609a      	str	r2, [r3, #8]
}
 80052b8:	bf00      	nop
 80052ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80052be:	46bd      	mov	sp, r7
 80052c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052c4:	51eb851f 	.word	0x51eb851f

080052c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052c8:	b084      	sub	sp, #16
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b084      	sub	sp, #16
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
 80052d2:	f107 001c 	add.w	r0, r7, #28
 80052d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052da:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d123      	bne.n	800532a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80052f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800530a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800530e:	2b01      	cmp	r3, #1
 8005310:	d105      	bne.n	800531e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f001 fae8 	bl	80068f4 <USB_CoreReset>
 8005324:	4603      	mov	r3, r0
 8005326:	73fb      	strb	r3, [r7, #15]
 8005328:	e01b      	b.n	8005362 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f001 fadc 	bl	80068f4 <USB_CoreReset>
 800533c:	4603      	mov	r3, r0
 800533e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005340:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005344:	2b00      	cmp	r3, #0
 8005346:	d106      	bne.n	8005356 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800534c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	639a      	str	r2, [r3, #56]	@ 0x38
 8005354:	e005      	b.n	8005362 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800535a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005362:	7fbb      	ldrb	r3, [r7, #30]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d10b      	bne.n	8005380 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f043 0206 	orr.w	r2, r3, #6
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f043 0220 	orr.w	r2, r3, #32
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005380:	7bfb      	ldrb	r3, [r7, #15]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800538c:	b004      	add	sp, #16
 800538e:	4770      	bx	lr

08005390 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005390:	b480      	push	{r7}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	4613      	mov	r3, r2
 800539c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800539e:	79fb      	ldrb	r3, [r7, #7]
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d165      	bne.n	8005470 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	4a41      	ldr	r2, [pc, #260]	@ (80054ac <USB_SetTurnaroundTime+0x11c>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d906      	bls.n	80053ba <USB_SetTurnaroundTime+0x2a>
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	4a40      	ldr	r2, [pc, #256]	@ (80054b0 <USB_SetTurnaroundTime+0x120>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d202      	bcs.n	80053ba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80053b4:	230f      	movs	r3, #15
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	e062      	b.n	8005480 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	4a3c      	ldr	r2, [pc, #240]	@ (80054b0 <USB_SetTurnaroundTime+0x120>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d306      	bcc.n	80053d0 <USB_SetTurnaroundTime+0x40>
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	4a3b      	ldr	r2, [pc, #236]	@ (80054b4 <USB_SetTurnaroundTime+0x124>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d202      	bcs.n	80053d0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80053ca:	230e      	movs	r3, #14
 80053cc:	617b      	str	r3, [r7, #20]
 80053ce:	e057      	b.n	8005480 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	4a38      	ldr	r2, [pc, #224]	@ (80054b4 <USB_SetTurnaroundTime+0x124>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d306      	bcc.n	80053e6 <USB_SetTurnaroundTime+0x56>
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	4a37      	ldr	r2, [pc, #220]	@ (80054b8 <USB_SetTurnaroundTime+0x128>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d202      	bcs.n	80053e6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80053e0:	230d      	movs	r3, #13
 80053e2:	617b      	str	r3, [r7, #20]
 80053e4:	e04c      	b.n	8005480 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	4a33      	ldr	r2, [pc, #204]	@ (80054b8 <USB_SetTurnaroundTime+0x128>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d306      	bcc.n	80053fc <USB_SetTurnaroundTime+0x6c>
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	4a32      	ldr	r2, [pc, #200]	@ (80054bc <USB_SetTurnaroundTime+0x12c>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d802      	bhi.n	80053fc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80053f6:	230c      	movs	r3, #12
 80053f8:	617b      	str	r3, [r7, #20]
 80053fa:	e041      	b.n	8005480 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	4a2f      	ldr	r2, [pc, #188]	@ (80054bc <USB_SetTurnaroundTime+0x12c>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d906      	bls.n	8005412 <USB_SetTurnaroundTime+0x82>
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	4a2e      	ldr	r2, [pc, #184]	@ (80054c0 <USB_SetTurnaroundTime+0x130>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d802      	bhi.n	8005412 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800540c:	230b      	movs	r3, #11
 800540e:	617b      	str	r3, [r7, #20]
 8005410:	e036      	b.n	8005480 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	4a2a      	ldr	r2, [pc, #168]	@ (80054c0 <USB_SetTurnaroundTime+0x130>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d906      	bls.n	8005428 <USB_SetTurnaroundTime+0x98>
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	4a29      	ldr	r2, [pc, #164]	@ (80054c4 <USB_SetTurnaroundTime+0x134>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d802      	bhi.n	8005428 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005422:	230a      	movs	r3, #10
 8005424:	617b      	str	r3, [r7, #20]
 8005426:	e02b      	b.n	8005480 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	4a26      	ldr	r2, [pc, #152]	@ (80054c4 <USB_SetTurnaroundTime+0x134>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d906      	bls.n	800543e <USB_SetTurnaroundTime+0xae>
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	4a25      	ldr	r2, [pc, #148]	@ (80054c8 <USB_SetTurnaroundTime+0x138>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d202      	bcs.n	800543e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005438:	2309      	movs	r3, #9
 800543a:	617b      	str	r3, [r7, #20]
 800543c:	e020      	b.n	8005480 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	4a21      	ldr	r2, [pc, #132]	@ (80054c8 <USB_SetTurnaroundTime+0x138>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d306      	bcc.n	8005454 <USB_SetTurnaroundTime+0xc4>
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	4a20      	ldr	r2, [pc, #128]	@ (80054cc <USB_SetTurnaroundTime+0x13c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d802      	bhi.n	8005454 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800544e:	2308      	movs	r3, #8
 8005450:	617b      	str	r3, [r7, #20]
 8005452:	e015      	b.n	8005480 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	4a1d      	ldr	r2, [pc, #116]	@ (80054cc <USB_SetTurnaroundTime+0x13c>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d906      	bls.n	800546a <USB_SetTurnaroundTime+0xda>
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	4a1c      	ldr	r2, [pc, #112]	@ (80054d0 <USB_SetTurnaroundTime+0x140>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d202      	bcs.n	800546a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005464:	2307      	movs	r3, #7
 8005466:	617b      	str	r3, [r7, #20]
 8005468:	e00a      	b.n	8005480 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800546a:	2306      	movs	r3, #6
 800546c:	617b      	str	r3, [r7, #20]
 800546e:	e007      	b.n	8005480 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005470:	79fb      	ldrb	r3, [r7, #7]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d102      	bne.n	800547c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005476:	2309      	movs	r3, #9
 8005478:	617b      	str	r3, [r7, #20]
 800547a:	e001      	b.n	8005480 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800547c:	2309      	movs	r3, #9
 800547e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	68da      	ldr	r2, [r3, #12]
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	029b      	lsls	r3, r3, #10
 8005494:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005498:	431a      	orrs	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	371c      	adds	r7, #28
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	00d8acbf 	.word	0x00d8acbf
 80054b0:	00e4e1c0 	.word	0x00e4e1c0
 80054b4:	00f42400 	.word	0x00f42400
 80054b8:	01067380 	.word	0x01067380
 80054bc:	011a499f 	.word	0x011a499f
 80054c0:	01312cff 	.word	0x01312cff
 80054c4:	014ca43f 	.word	0x014ca43f
 80054c8:	016e3600 	.word	0x016e3600
 80054cc:	01a6ab1f 	.word	0x01a6ab1f
 80054d0:	01e84800 	.word	0x01e84800

080054d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f043 0201 	orr.w	r2, r3, #1
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b083      	sub	sp, #12
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f023 0201 	bic.w	r2, r3, #1
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	460b      	mov	r3, r1
 8005522:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005534:	78fb      	ldrb	r3, [r7, #3]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d115      	bne.n	8005566 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005546:	200a      	movs	r0, #10
 8005548:	f7fb fdfe 	bl	8001148 <HAL_Delay>
      ms += 10U;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	330a      	adds	r3, #10
 8005550:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f001 f93f 	bl	80067d6 <USB_GetMode>
 8005558:	4603      	mov	r3, r0
 800555a:	2b01      	cmp	r3, #1
 800555c:	d01e      	beq.n	800559c <USB_SetCurrentMode+0x84>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2bc7      	cmp	r3, #199	@ 0xc7
 8005562:	d9f0      	bls.n	8005546 <USB_SetCurrentMode+0x2e>
 8005564:	e01a      	b.n	800559c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005566:	78fb      	ldrb	r3, [r7, #3]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d115      	bne.n	8005598 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005578:	200a      	movs	r0, #10
 800557a:	f7fb fde5 	bl	8001148 <HAL_Delay>
      ms += 10U;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	330a      	adds	r3, #10
 8005582:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f001 f926 	bl	80067d6 <USB_GetMode>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d005      	beq.n	800559c <USB_SetCurrentMode+0x84>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2bc7      	cmp	r3, #199	@ 0xc7
 8005594:	d9f0      	bls.n	8005578 <USB_SetCurrentMode+0x60>
 8005596:	e001      	b.n	800559c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e005      	b.n	80055a8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2bc8      	cmp	r3, #200	@ 0xc8
 80055a0:	d101      	bne.n	80055a6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e000      	b.n	80055a8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055b0:	b084      	sub	sp, #16
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b086      	sub	sp, #24
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
 80055ba:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80055be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80055c2:	2300      	movs	r3, #0
 80055c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80055ca:	2300      	movs	r3, #0
 80055cc:	613b      	str	r3, [r7, #16]
 80055ce:	e009      	b.n	80055e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	3340      	adds	r3, #64	@ 0x40
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	2200      	movs	r2, #0
 80055dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	3301      	adds	r3, #1
 80055e2:	613b      	str	r3, [r7, #16]
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	2b0e      	cmp	r3, #14
 80055e8:	d9f2      	bls.n	80055d0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80055ea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d11c      	bne.n	800562c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005600:	f043 0302 	orr.w	r3, r3, #2
 8005604:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800560a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005616:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005622:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	639a      	str	r2, [r3, #56]	@ 0x38
 800562a:	e00b      	b.n	8005644 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005630:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800563c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800564a:	461a      	mov	r2, r3
 800564c:	2300      	movs	r3, #0
 800564e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005650:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005654:	2b01      	cmp	r3, #1
 8005656:	d10d      	bne.n	8005674 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005658:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800565c:	2b00      	cmp	r3, #0
 800565e:	d104      	bne.n	800566a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005660:	2100      	movs	r1, #0
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f968 	bl	8005938 <USB_SetDevSpeed>
 8005668:	e008      	b.n	800567c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800566a:	2101      	movs	r1, #1
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f963 	bl	8005938 <USB_SetDevSpeed>
 8005672:	e003      	b.n	800567c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005674:	2103      	movs	r1, #3
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f95e 	bl	8005938 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800567c:	2110      	movs	r1, #16
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f8fa 	bl	8005878 <USB_FlushTxFifo>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f924 	bl	80058dc <USB_FlushRxFifo>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056a4:	461a      	mov	r2, r3
 80056a6:	2300      	movs	r3, #0
 80056a8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056b0:	461a      	mov	r2, r3
 80056b2:	2300      	movs	r3, #0
 80056b4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056bc:	461a      	mov	r2, r3
 80056be:	2300      	movs	r3, #0
 80056c0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056c2:	2300      	movs	r3, #0
 80056c4:	613b      	str	r3, [r7, #16]
 80056c6:	e043      	b.n	8005750 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	015a      	lsls	r2, r3, #5
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	4413      	add	r3, r2
 80056d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056de:	d118      	bne.n	8005712 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10a      	bne.n	80056fc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056f2:	461a      	mov	r2, r3
 80056f4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80056f8:	6013      	str	r3, [r2, #0]
 80056fa:	e013      	b.n	8005724 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005708:	461a      	mov	r2, r3
 800570a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800570e:	6013      	str	r3, [r2, #0]
 8005710:	e008      	b.n	8005724 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	015a      	lsls	r2, r3, #5
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	4413      	add	r3, r2
 800571a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800571e:	461a      	mov	r2, r3
 8005720:	2300      	movs	r3, #0
 8005722:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4413      	add	r3, r2
 800572c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005730:	461a      	mov	r2, r3
 8005732:	2300      	movs	r3, #0
 8005734:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	015a      	lsls	r2, r3, #5
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	4413      	add	r3, r2
 800573e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005742:	461a      	mov	r2, r3
 8005744:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005748:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	3301      	adds	r3, #1
 800574e:	613b      	str	r3, [r7, #16]
 8005750:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005754:	461a      	mov	r2, r3
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	4293      	cmp	r3, r2
 800575a:	d3b5      	bcc.n	80056c8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800575c:	2300      	movs	r3, #0
 800575e:	613b      	str	r3, [r7, #16]
 8005760:	e043      	b.n	80057ea <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	015a      	lsls	r2, r3, #5
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	4413      	add	r3, r2
 800576a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005774:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005778:	d118      	bne.n	80057ac <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10a      	bne.n	8005796 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4413      	add	r3, r2
 8005788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800578c:	461a      	mov	r2, r3
 800578e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005792:	6013      	str	r3, [r2, #0]
 8005794:	e013      	b.n	80057be <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	015a      	lsls	r2, r3, #5
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	4413      	add	r3, r2
 800579e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057a2:	461a      	mov	r2, r3
 80057a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80057a8:	6013      	str	r3, [r2, #0]
 80057aa:	e008      	b.n	80057be <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057b8:	461a      	mov	r2, r3
 80057ba:	2300      	movs	r3, #0
 80057bc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057ca:	461a      	mov	r2, r3
 80057cc:	2300      	movs	r3, #0
 80057ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057dc:	461a      	mov	r2, r3
 80057de:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80057e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	3301      	adds	r3, #1
 80057e8:	613b      	str	r3, [r7, #16]
 80057ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80057ee:	461a      	mov	r2, r3
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d3b5      	bcc.n	8005762 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005804:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005808:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005816:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005818:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800581c:	2b00      	cmp	r3, #0
 800581e:	d105      	bne.n	800582c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	f043 0210 	orr.w	r2, r3, #16
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	699a      	ldr	r2, [r3, #24]
 8005830:	4b10      	ldr	r3, [pc, #64]	@ (8005874 <USB_DevInit+0x2c4>)
 8005832:	4313      	orrs	r3, r2
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005838:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800583c:	2b00      	cmp	r3, #0
 800583e:	d005      	beq.n	800584c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	f043 0208 	orr.w	r2, r3, #8
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800584c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005850:	2b01      	cmp	r3, #1
 8005852:	d107      	bne.n	8005864 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800585c:	f043 0304 	orr.w	r3, r3, #4
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005864:	7dfb      	ldrb	r3, [r7, #23]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3718      	adds	r7, #24
 800586a:	46bd      	mov	sp, r7
 800586c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005870:	b004      	add	sp, #16
 8005872:	4770      	bx	lr
 8005874:	803c3800 	.word	0x803c3800

08005878 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005882:	2300      	movs	r3, #0
 8005884:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	3301      	adds	r3, #1
 800588a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005892:	d901      	bls.n	8005898 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e01b      	b.n	80058d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	2b00      	cmp	r3, #0
 800589e:	daf2      	bge.n	8005886 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80058a0:	2300      	movs	r3, #0
 80058a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	019b      	lsls	r3, r3, #6
 80058a8:	f043 0220 	orr.w	r2, r3, #32
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	3301      	adds	r3, #1
 80058b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058bc:	d901      	bls.n	80058c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e006      	b.n	80058d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	f003 0320 	and.w	r3, r3, #32
 80058ca:	2b20      	cmp	r3, #32
 80058cc:	d0f0      	beq.n	80058b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058e4:	2300      	movs	r3, #0
 80058e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	3301      	adds	r3, #1
 80058ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058f4:	d901      	bls.n	80058fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e018      	b.n	800592c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	daf2      	bge.n	80058e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005902:	2300      	movs	r3, #0
 8005904:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2210      	movs	r2, #16
 800590a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	3301      	adds	r3, #1
 8005910:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005918:	d901      	bls.n	800591e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e006      	b.n	800592c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	f003 0310 	and.w	r3, r3, #16
 8005926:	2b10      	cmp	r3, #16
 8005928:	d0f0      	beq.n	800590c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	460b      	mov	r3, r1
 8005942:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	78fb      	ldrb	r3, [r7, #3]
 8005952:	68f9      	ldr	r1, [r7, #12]
 8005954:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005958:	4313      	orrs	r3, r2
 800595a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800596a:	b480      	push	{r7}
 800596c:	b087      	sub	sp, #28
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f003 0306 	and.w	r3, r3, #6
 8005982:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d102      	bne.n	8005990 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800598a:	2300      	movs	r3, #0
 800598c:	75fb      	strb	r3, [r7, #23]
 800598e:	e00a      	b.n	80059a6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2b02      	cmp	r3, #2
 8005994:	d002      	beq.n	800599c <USB_GetDevSpeed+0x32>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2b06      	cmp	r3, #6
 800599a:	d102      	bne.n	80059a2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800599c:	2302      	movs	r3, #2
 800599e:	75fb      	strb	r3, [r7, #23]
 80059a0:	e001      	b.n	80059a6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80059a2:	230f      	movs	r3, #15
 80059a4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80059a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	371c      	adds	r7, #28
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	785b      	ldrb	r3, [r3, #1]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d13a      	bne.n	8005a46 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059d6:	69da      	ldr	r2, [r3, #28]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	f003 030f 	and.w	r3, r3, #15
 80059e0:	2101      	movs	r1, #1
 80059e2:	fa01 f303 	lsl.w	r3, r1, r3
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	68f9      	ldr	r1, [r7, #12]
 80059ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059ee:	4313      	orrs	r3, r2
 80059f0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	015a      	lsls	r2, r3, #5
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	4413      	add	r3, r2
 80059fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d155      	bne.n	8005ab4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	791b      	ldrb	r3, [r3, #4]
 8005a22:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a24:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	059b      	lsls	r3, r3, #22
 8005a2a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	0151      	lsls	r1, r2, #5
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	440a      	add	r2, r1
 8005a36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a42:	6013      	str	r3, [r2, #0]
 8005a44:	e036      	b.n	8005ab4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a4c:	69da      	ldr	r2, [r3, #28]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	f003 030f 	and.w	r3, r3, #15
 8005a56:	2101      	movs	r1, #1
 8005a58:	fa01 f303 	lsl.w	r3, r1, r3
 8005a5c:	041b      	lsls	r3, r3, #16
 8005a5e:	68f9      	ldr	r1, [r7, #12]
 8005a60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a64:	4313      	orrs	r3, r2
 8005a66:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	015a      	lsls	r2, r3, #5
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4413      	add	r3, r2
 8005a70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d11a      	bne.n	8005ab4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	791b      	ldrb	r3, [r3, #4]
 8005a98:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a9a:	430b      	orrs	r3, r1
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	0151      	lsls	r1, r2, #5
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	440a      	add	r2, r1
 8005aa6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005aaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005aae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ab2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
	...

08005ac4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	785b      	ldrb	r3, [r3, #1]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d161      	bne.n	8005ba4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005af2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005af6:	d11f      	bne.n	8005b38 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	0151      	lsls	r1, r2, #5
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	440a      	add	r2, r1
 8005b0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b12:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005b16:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	0151      	lsls	r1, r2, #5
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	440a      	add	r2, r1
 8005b2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b32:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b36:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	f003 030f 	and.w	r3, r3, #15
 8005b48:	2101      	movs	r1, #1
 8005b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	43db      	mvns	r3, r3
 8005b52:	68f9      	ldr	r1, [r7, #12]
 8005b54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b58:	4013      	ands	r3, r2
 8005b5a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b62:	69da      	ldr	r2, [r3, #28]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	f003 030f 	and.w	r3, r3, #15
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	43db      	mvns	r3, r3
 8005b76:	68f9      	ldr	r1, [r7, #12]
 8005b78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	0159      	lsls	r1, r3, #5
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	440b      	add	r3, r1
 8005b96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	4b35      	ldr	r3, [pc, #212]	@ (8005c74 <USB_DeactivateEndpoint+0x1b0>)
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	600b      	str	r3, [r1, #0]
 8005ba2:	e060      	b.n	8005c66 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005bb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005bba:	d11f      	bne.n	8005bfc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	0151      	lsls	r1, r2, #5
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	440a      	add	r2, r1
 8005bd2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bd6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005bda:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	0151      	lsls	r1, r2, #5
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	440a      	add	r2, r1
 8005bf2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bf6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005bfa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	f003 030f 	and.w	r3, r3, #15
 8005c0c:	2101      	movs	r1, #1
 8005c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c12:	041b      	lsls	r3, r3, #16
 8005c14:	43db      	mvns	r3, r3
 8005c16:	68f9      	ldr	r1, [r7, #12]
 8005c18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c26:	69da      	ldr	r2, [r3, #28]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	f003 030f 	and.w	r3, r3, #15
 8005c30:	2101      	movs	r1, #1
 8005c32:	fa01 f303 	lsl.w	r3, r1, r3
 8005c36:	041b      	lsls	r3, r3, #16
 8005c38:	43db      	mvns	r3, r3
 8005c3a:	68f9      	ldr	r1, [r7, #12]
 8005c3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c40:	4013      	ands	r3, r2
 8005c42:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	0159      	lsls	r1, r3, #5
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	440b      	add	r3, r1
 8005c5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c5e:	4619      	mov	r1, r3
 8005c60:	4b05      	ldr	r3, [pc, #20]	@ (8005c78 <USB_DeactivateEndpoint+0x1b4>)
 8005c62:	4013      	ands	r3, r2
 8005c64:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3714      	adds	r7, #20
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	ec337800 	.word	0xec337800
 8005c78:	eff37800 	.word	0xeff37800

08005c7c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b08a      	sub	sp, #40	@ 0x28
 8005c80:	af02      	add	r7, sp, #8
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	4613      	mov	r3, r2
 8005c88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	785b      	ldrb	r3, [r3, #1]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	f040 817f 	bne.w	8005f9c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d132      	bne.n	8005d0c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	0151      	lsls	r1, r2, #5
 8005cb8:	69fa      	ldr	r2, [r7, #28]
 8005cba:	440a      	add	r2, r1
 8005cbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cc0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005cc4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005cc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	0151      	lsls	r1, r2, #5
 8005cdc:	69fa      	ldr	r2, [r7, #28]
 8005cde:	440a      	add	r2, r1
 8005ce0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ce4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ce8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	0151      	lsls	r1, r2, #5
 8005cfc:	69fa      	ldr	r2, [r7, #28]
 8005cfe:	440a      	add	r2, r1
 8005d00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d04:	0cdb      	lsrs	r3, r3, #19
 8005d06:	04db      	lsls	r3, r3, #19
 8005d08:	6113      	str	r3, [r2, #16]
 8005d0a:	e097      	b.n	8005e3c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	4413      	add	r3, r2
 8005d14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	69ba      	ldr	r2, [r7, #24]
 8005d1c:	0151      	lsls	r1, r2, #5
 8005d1e:	69fa      	ldr	r2, [r7, #28]
 8005d20:	440a      	add	r2, r1
 8005d22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d26:	0cdb      	lsrs	r3, r3, #19
 8005d28:	04db      	lsls	r3, r3, #19
 8005d2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	0151      	lsls	r1, r2, #5
 8005d3e:	69fa      	ldr	r2, [r7, #28]
 8005d40:	440a      	add	r2, r1
 8005d42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d46:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005d4a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005d4e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d11a      	bne.n	8005d8c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	691a      	ldr	r2, [r3, #16]
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d903      	bls.n	8005d6a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	689a      	ldr	r2, [r3, #8]
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	0151      	lsls	r1, r2, #5
 8005d7c:	69fa      	ldr	r2, [r7, #28]
 8005d7e:	440a      	add	r2, r1
 8005d80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d84:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005d88:	6113      	str	r3, [r2, #16]
 8005d8a:	e044      	b.n	8005e16 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	691a      	ldr	r2, [r3, #16]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	4413      	add	r3, r2
 8005d96:	1e5a      	subs	r2, r3, #1
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	015a      	lsls	r2, r3, #5
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	4413      	add	r3, r2
 8005daa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dae:	691a      	ldr	r2, [r3, #16]
 8005db0:	8afb      	ldrh	r3, [r7, #22]
 8005db2:	04d9      	lsls	r1, r3, #19
 8005db4:	4ba4      	ldr	r3, [pc, #656]	@ (8006048 <USB_EPStartXfer+0x3cc>)
 8005db6:	400b      	ands	r3, r1
 8005db8:	69b9      	ldr	r1, [r7, #24]
 8005dba:	0148      	lsls	r0, r1, #5
 8005dbc:	69f9      	ldr	r1, [r7, #28]
 8005dbe:	4401      	add	r1, r0
 8005dc0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	791b      	ldrb	r3, [r3, #4]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d122      	bne.n	8005e16 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	0151      	lsls	r1, r2, #5
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	440a      	add	r2, r1
 8005de6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dea:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005dee:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dfc:	691a      	ldr	r2, [r3, #16]
 8005dfe:	8afb      	ldrh	r3, [r7, #22]
 8005e00:	075b      	lsls	r3, r3, #29
 8005e02:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005e06:	69b9      	ldr	r1, [r7, #24]
 8005e08:	0148      	lsls	r0, r1, #5
 8005e0a:	69f9      	ldr	r1, [r7, #28]
 8005e0c:	4401      	add	r1, r0
 8005e0e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005e12:	4313      	orrs	r3, r2
 8005e14:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	015a      	lsls	r2, r3, #5
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e22:	691a      	ldr	r2, [r3, #16]
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e2c:	69b9      	ldr	r1, [r7, #24]
 8005e2e:	0148      	lsls	r0, r1, #5
 8005e30:	69f9      	ldr	r1, [r7, #28]
 8005e32:	4401      	add	r1, r0
 8005e34:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005e3c:	79fb      	ldrb	r3, [r7, #7]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d14b      	bne.n	8005eda <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d009      	beq.n	8005e5e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e56:	461a      	mov	r2, r3
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	69db      	ldr	r3, [r3, #28]
 8005e5c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	791b      	ldrb	r3, [r3, #4]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d128      	bne.n	8005eb8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d110      	bne.n	8005e98 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	015a      	lsls	r2, r3, #5
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	69ba      	ldr	r2, [r7, #24]
 8005e86:	0151      	lsls	r1, r2, #5
 8005e88:	69fa      	ldr	r2, [r7, #28]
 8005e8a:	440a      	add	r2, r1
 8005e8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e90:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	e00f      	b.n	8005eb8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	69ba      	ldr	r2, [r7, #24]
 8005ea8:	0151      	lsls	r1, r2, #5
 8005eaa:	69fa      	ldr	r2, [r7, #28]
 8005eac:	440a      	add	r2, r1
 8005eae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005eb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005eb6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	0151      	lsls	r1, r2, #5
 8005eca:	69fa      	ldr	r2, [r7, #28]
 8005ecc:	440a      	add	r2, r1
 8005ece:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ed2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005ed6:	6013      	str	r3, [r2, #0]
 8005ed8:	e166      	b.n	80061a8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	0151      	lsls	r1, r2, #5
 8005eec:	69fa      	ldr	r2, [r7, #28]
 8005eee:	440a      	add	r2, r1
 8005ef0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ef4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005ef8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	791b      	ldrb	r3, [r3, #4]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d015      	beq.n	8005f2e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f000 814e 	beq.w	80061a8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	f003 030f 	and.w	r3, r3, #15
 8005f1c:	2101      	movs	r1, #1
 8005f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f22:	69f9      	ldr	r1, [r7, #28]
 8005f24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	634b      	str	r3, [r1, #52]	@ 0x34
 8005f2c:	e13c      	b.n	80061a8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d110      	bne.n	8005f60 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	0151      	lsls	r1, r2, #5
 8005f50:	69fa      	ldr	r2, [r7, #28]
 8005f52:	440a      	add	r2, r1
 8005f54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f58:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005f5c:	6013      	str	r3, [r2, #0]
 8005f5e:	e00f      	b.n	8005f80 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	015a      	lsls	r2, r3, #5
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	0151      	lsls	r1, r2, #5
 8005f72:	69fa      	ldr	r2, [r7, #28]
 8005f74:	440a      	add	r2, r1
 8005f76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f7e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	68d9      	ldr	r1, [r3, #12]
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	781a      	ldrb	r2, [r3, #0]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	b298      	uxth	r0, r3
 8005f8e:	79fb      	ldrb	r3, [r7, #7]
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	4603      	mov	r3, r0
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f000 f9b9 	bl	800630c <USB_WritePacket>
 8005f9a:	e105      	b.n	80061a8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	015a      	lsls	r2, r3, #5
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	69ba      	ldr	r2, [r7, #24]
 8005fac:	0151      	lsls	r1, r2, #5
 8005fae:	69fa      	ldr	r2, [r7, #28]
 8005fb0:	440a      	add	r2, r1
 8005fb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fb6:	0cdb      	lsrs	r3, r3, #19
 8005fb8:	04db      	lsls	r3, r3, #19
 8005fba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	0151      	lsls	r1, r2, #5
 8005fce:	69fa      	ldr	r2, [r7, #28]
 8005fd0:	440a      	add	r2, r1
 8005fd2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fd6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005fda:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005fde:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d132      	bne.n	800604c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	689a      	ldr	r2, [r3, #8]
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	689a      	ldr	r2, [r3, #8]
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	4413      	add	r3, r2
 8006006:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800600a:	691a      	ldr	r2, [r3, #16]
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	6a1b      	ldr	r3, [r3, #32]
 8006010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006014:	69b9      	ldr	r1, [r7, #24]
 8006016:	0148      	lsls	r0, r1, #5
 8006018:	69f9      	ldr	r1, [r7, #28]
 800601a:	4401      	add	r1, r0
 800601c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006020:	4313      	orrs	r3, r2
 8006022:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	015a      	lsls	r2, r3, #5
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	4413      	add	r3, r2
 800602c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	69ba      	ldr	r2, [r7, #24]
 8006034:	0151      	lsls	r1, r2, #5
 8006036:	69fa      	ldr	r2, [r7, #28]
 8006038:	440a      	add	r2, r1
 800603a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800603e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006042:	6113      	str	r3, [r2, #16]
 8006044:	e062      	b.n	800610c <USB_EPStartXfer+0x490>
 8006046:	bf00      	nop
 8006048:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d123      	bne.n	800609c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006060:	691a      	ldr	r2, [r3, #16]
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800606a:	69b9      	ldr	r1, [r7, #24]
 800606c:	0148      	lsls	r0, r1, #5
 800606e:	69f9      	ldr	r1, [r7, #28]
 8006070:	4401      	add	r1, r0
 8006072:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006076:	4313      	orrs	r3, r2
 8006078:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	4413      	add	r3, r2
 8006082:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	0151      	lsls	r1, r2, #5
 800608c:	69fa      	ldr	r2, [r7, #28]
 800608e:	440a      	add	r2, r1
 8006090:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006094:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006098:	6113      	str	r3, [r2, #16]
 800609a:	e037      	b.n	800610c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	691a      	ldr	r2, [r3, #16]
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	4413      	add	r3, r2
 80060a6:	1e5a      	subs	r2, r3, #1
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	8afa      	ldrh	r2, [r7, #22]
 80060b8:	fb03 f202 	mul.w	r2, r3, r2
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	015a      	lsls	r2, r3, #5
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060cc:	691a      	ldr	r2, [r3, #16]
 80060ce:	8afb      	ldrh	r3, [r7, #22]
 80060d0:	04d9      	lsls	r1, r3, #19
 80060d2:	4b38      	ldr	r3, [pc, #224]	@ (80061b4 <USB_EPStartXfer+0x538>)
 80060d4:	400b      	ands	r3, r1
 80060d6:	69b9      	ldr	r1, [r7, #24]
 80060d8:	0148      	lsls	r0, r1, #5
 80060da:	69f9      	ldr	r1, [r7, #28]
 80060dc:	4401      	add	r1, r0
 80060de:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80060e2:	4313      	orrs	r3, r2
 80060e4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	015a      	lsls	r2, r3, #5
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	4413      	add	r3, r2
 80060ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060f2:	691a      	ldr	r2, [r3, #16]
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060fc:	69b9      	ldr	r1, [r7, #24]
 80060fe:	0148      	lsls	r0, r1, #5
 8006100:	69f9      	ldr	r1, [r7, #28]
 8006102:	4401      	add	r1, r0
 8006104:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006108:	4313      	orrs	r3, r2
 800610a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800610c:	79fb      	ldrb	r3, [r7, #7]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d10d      	bne.n	800612e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d009      	beq.n	800612e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	68d9      	ldr	r1, [r3, #12]
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	015a      	lsls	r2, r3, #5
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	4413      	add	r3, r2
 8006126:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800612a:	460a      	mov	r2, r1
 800612c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	791b      	ldrb	r3, [r3, #4]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d128      	bne.n	8006188 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006142:	2b00      	cmp	r3, #0
 8006144:	d110      	bne.n	8006168 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	4413      	add	r3, r2
 800614e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	69ba      	ldr	r2, [r7, #24]
 8006156:	0151      	lsls	r1, r2, #5
 8006158:	69fa      	ldr	r2, [r7, #28]
 800615a:	440a      	add	r2, r1
 800615c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006160:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006164:	6013      	str	r3, [r2, #0]
 8006166:	e00f      	b.n	8006188 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	015a      	lsls	r2, r3, #5
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	4413      	add	r3, r2
 8006170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	69ba      	ldr	r2, [r7, #24]
 8006178:	0151      	lsls	r1, r2, #5
 800617a:	69fa      	ldr	r2, [r7, #28]
 800617c:	440a      	add	r2, r1
 800617e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006182:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006186:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	015a      	lsls	r2, r3, #5
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	4413      	add	r3, r2
 8006190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	69ba      	ldr	r2, [r7, #24]
 8006198:	0151      	lsls	r1, r2, #5
 800619a:	69fa      	ldr	r2, [r7, #28]
 800619c:	440a      	add	r2, r1
 800619e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061a2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80061a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3720      	adds	r7, #32
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	1ff80000 	.word	0x1ff80000

080061b8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80061c2:	2300      	movs	r3, #0
 80061c4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80061c6:	2300      	movs	r3, #0
 80061c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	785b      	ldrb	r3, [r3, #1]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d14a      	bne.n	800626c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061ee:	f040 8086 	bne.w	80062fe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	015a      	lsls	r2, r3, #5
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	4413      	add	r3, r2
 80061fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	683a      	ldr	r2, [r7, #0]
 8006204:	7812      	ldrb	r2, [r2, #0]
 8006206:	0151      	lsls	r1, r2, #5
 8006208:	693a      	ldr	r2, [r7, #16]
 800620a:	440a      	add	r2, r1
 800620c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006210:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006214:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	4413      	add	r3, r2
 8006220:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	7812      	ldrb	r2, [r2, #0]
 800622a:	0151      	lsls	r1, r2, #5
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	440a      	add	r2, r1
 8006230:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006234:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006238:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	3301      	adds	r3, #1
 800623e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006246:	4293      	cmp	r3, r2
 8006248:	d902      	bls.n	8006250 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	75fb      	strb	r3, [r7, #23]
          break;
 800624e:	e056      	b.n	80062fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	015a      	lsls	r2, r3, #5
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	4413      	add	r3, r2
 800625a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006264:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006268:	d0e7      	beq.n	800623a <USB_EPStopXfer+0x82>
 800626a:	e048      	b.n	80062fe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	015a      	lsls	r2, r3, #5
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	4413      	add	r3, r2
 8006276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006280:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006284:	d13b      	bne.n	80062fe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	4413      	add	r3, r2
 8006290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	683a      	ldr	r2, [r7, #0]
 8006298:	7812      	ldrb	r2, [r2, #0]
 800629a:	0151      	lsls	r1, r2, #5
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	440a      	add	r2, r1
 80062a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062a4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80062a8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	015a      	lsls	r2, r3, #5
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	4413      	add	r3, r2
 80062b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	7812      	ldrb	r2, [r2, #0]
 80062be:	0151      	lsls	r1, r2, #5
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	440a      	add	r2, r1
 80062c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80062cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	3301      	adds	r3, #1
 80062d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80062da:	4293      	cmp	r3, r2
 80062dc:	d902      	bls.n	80062e4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	75fb      	strb	r3, [r7, #23]
          break;
 80062e2:	e00c      	b.n	80062fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	015a      	lsls	r2, r3, #5
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	4413      	add	r3, r2
 80062ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062fc:	d0e7      	beq.n	80062ce <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80062fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006300:	4618      	mov	r0, r3
 8006302:	371c      	adds	r7, #28
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800630c:	b480      	push	{r7}
 800630e:	b089      	sub	sp, #36	@ 0x24
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	4611      	mov	r1, r2
 8006318:	461a      	mov	r2, r3
 800631a:	460b      	mov	r3, r1
 800631c:	71fb      	strb	r3, [r7, #7]
 800631e:	4613      	mov	r3, r2
 8006320:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800632a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800632e:	2b00      	cmp	r3, #0
 8006330:	d123      	bne.n	800637a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006332:	88bb      	ldrh	r3, [r7, #4]
 8006334:	3303      	adds	r3, #3
 8006336:	089b      	lsrs	r3, r3, #2
 8006338:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800633a:	2300      	movs	r3, #0
 800633c:	61bb      	str	r3, [r7, #24]
 800633e:	e018      	b.n	8006372 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006340:	79fb      	ldrb	r3, [r7, #7]
 8006342:	031a      	lsls	r2, r3, #12
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	4413      	add	r3, r2
 8006348:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800634c:	461a      	mov	r2, r3
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	3301      	adds	r3, #1
 8006358:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	3301      	adds	r3, #1
 800635e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	3301      	adds	r3, #1
 8006364:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	3301      	adds	r3, #1
 800636a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	3301      	adds	r3, #1
 8006370:	61bb      	str	r3, [r7, #24]
 8006372:	69ba      	ldr	r2, [r7, #24]
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	429a      	cmp	r2, r3
 8006378:	d3e2      	bcc.n	8006340 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3724      	adds	r7, #36	@ 0x24
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006388:	b480      	push	{r7}
 800638a:	b08b      	sub	sp, #44	@ 0x2c
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	4613      	mov	r3, r2
 8006394:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800639e:	88fb      	ldrh	r3, [r7, #6]
 80063a0:	089b      	lsrs	r3, r3, #2
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80063a6:	88fb      	ldrh	r3, [r7, #6]
 80063a8:	f003 0303 	and.w	r3, r3, #3
 80063ac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80063ae:	2300      	movs	r3, #0
 80063b0:	623b      	str	r3, [r7, #32]
 80063b2:	e014      	b.n	80063de <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063be:	601a      	str	r2, [r3, #0]
    pDest++;
 80063c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c2:	3301      	adds	r3, #1
 80063c4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80063c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c8:	3301      	adds	r3, #1
 80063ca:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80063cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ce:	3301      	adds	r3, #1
 80063d0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80063d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d4:	3301      	adds	r3, #1
 80063d6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	3301      	adds	r3, #1
 80063dc:	623b      	str	r3, [r7, #32]
 80063de:	6a3a      	ldr	r2, [r7, #32]
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d3e6      	bcc.n	80063b4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80063e6:	8bfb      	ldrh	r3, [r7, #30]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d01e      	beq.n	800642a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80063ec:	2300      	movs	r3, #0
 80063ee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063f6:	461a      	mov	r2, r3
 80063f8:	f107 0310 	add.w	r3, r7, #16
 80063fc:	6812      	ldr	r2, [r2, #0]
 80063fe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	6a3b      	ldr	r3, [r7, #32]
 8006404:	b2db      	uxtb	r3, r3
 8006406:	00db      	lsls	r3, r3, #3
 8006408:	fa22 f303 	lsr.w	r3, r2, r3
 800640c:	b2da      	uxtb	r2, r3
 800640e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006410:	701a      	strb	r2, [r3, #0]
      i++;
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	3301      	adds	r3, #1
 8006416:	623b      	str	r3, [r7, #32]
      pDest++;
 8006418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641a:	3301      	adds	r3, #1
 800641c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800641e:	8bfb      	ldrh	r3, [r7, #30]
 8006420:	3b01      	subs	r3, #1
 8006422:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006424:	8bfb      	ldrh	r3, [r7, #30]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1ea      	bne.n	8006400 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800642a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800642c:	4618      	mov	r0, r3
 800642e:	372c      	adds	r7, #44	@ 0x2c
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	785b      	ldrb	r3, [r3, #1]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d12c      	bne.n	80064ae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	015a      	lsls	r2, r3, #5
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	4413      	add	r3, r2
 800645c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	db12      	blt.n	800648c <USB_EPSetStall+0x54>
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00f      	beq.n	800648c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	015a      	lsls	r2, r3, #5
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	4413      	add	r3, r2
 8006474:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68ba      	ldr	r2, [r7, #8]
 800647c:	0151      	lsls	r1, r2, #5
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	440a      	add	r2, r1
 8006482:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006486:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800648a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	4413      	add	r3, r2
 8006494:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68ba      	ldr	r2, [r7, #8]
 800649c:	0151      	lsls	r1, r2, #5
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	440a      	add	r2, r1
 80064a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80064aa:	6013      	str	r3, [r2, #0]
 80064ac:	e02b      	b.n	8006506 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	db12      	blt.n	80064e6 <USB_EPSetStall+0xae>
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00f      	beq.n	80064e6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	0151      	lsls	r1, r2, #5
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	440a      	add	r2, r1
 80064dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064e0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80064e4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	0151      	lsls	r1, r2, #5
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	440a      	add	r2, r1
 80064fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006500:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006504:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3714      	adds	r7, #20
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	785b      	ldrb	r3, [r3, #1]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d128      	bne.n	8006582 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	4413      	add	r3, r2
 8006538:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	0151      	lsls	r1, r2, #5
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	440a      	add	r2, r1
 8006546:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800654a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800654e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	791b      	ldrb	r3, [r3, #4]
 8006554:	2b03      	cmp	r3, #3
 8006556:	d003      	beq.n	8006560 <USB_EPClearStall+0x4c>
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	791b      	ldrb	r3, [r3, #4]
 800655c:	2b02      	cmp	r3, #2
 800655e:	d138      	bne.n	80065d2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	4413      	add	r3, r2
 8006568:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	0151      	lsls	r1, r2, #5
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	440a      	add	r2, r1
 8006576:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800657a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800657e:	6013      	str	r3, [r2, #0]
 8006580:	e027      	b.n	80065d2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	4413      	add	r3, r2
 800658a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	0151      	lsls	r1, r2, #5
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	440a      	add	r2, r1
 8006598:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800659c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80065a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	791b      	ldrb	r3, [r3, #4]
 80065a6:	2b03      	cmp	r3, #3
 80065a8:	d003      	beq.n	80065b2 <USB_EPClearStall+0x9e>
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	791b      	ldrb	r3, [r3, #4]
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d10f      	bne.n	80065d2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	015a      	lsls	r2, r3, #5
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	4413      	add	r3, r2
 80065ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	0151      	lsls	r1, r2, #5
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	440a      	add	r2, r1
 80065c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065d0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3714      	adds	r7, #20
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	460b      	mov	r3, r1
 80065ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065fe:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006602:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	78fb      	ldrb	r3, [r7, #3]
 800660e:	011b      	lsls	r3, r3, #4
 8006610:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006614:	68f9      	ldr	r1, [r7, #12]
 8006616:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800661a:	4313      	orrs	r3, r2
 800661c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3714      	adds	r7, #20
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006646:	f023 0303 	bic.w	r3, r3, #3
 800664a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800665a:	f023 0302 	bic.w	r3, r3, #2
 800665e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3714      	adds	r7, #20
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800666e:	b480      	push	{r7}
 8006670:	b085      	sub	sp, #20
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006688:	f023 0303 	bic.w	r3, r3, #3
 800668c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800669c:	f043 0302 	orr.w	r3, r3, #2
 80066a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3714      	adds	r7, #20
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	4013      	ands	r3, r2
 80066c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80066c8:	68fb      	ldr	r3, [r7, #12]
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3714      	adds	r7, #20
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr

080066d6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b085      	sub	sp, #20
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066f2:	69db      	ldr	r3, [r3, #28]
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	4013      	ands	r3, r2
 80066f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	0c1b      	lsrs	r3, r3, #16
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3714      	adds	r7, #20
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr

0800670a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800670a:	b480      	push	{r7}
 800670c:	b085      	sub	sp, #20
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006726:	69db      	ldr	r3, [r3, #28]
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	4013      	ands	r3, r2
 800672c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	b29b      	uxth	r3, r3
}
 8006732:	4618      	mov	r0, r3
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800673e:	b480      	push	{r7}
 8006740:	b085      	sub	sp, #20
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
 8006746:	460b      	mov	r3, r1
 8006748:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800674e:	78fb      	ldrb	r3, [r7, #3]
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	4413      	add	r3, r2
 8006756:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	4013      	ands	r3, r2
 800676a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800676c:	68bb      	ldr	r3, [r7, #8]
}
 800676e:	4618      	mov	r0, r3
 8006770:	3714      	adds	r7, #20
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr

0800677a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800677a:	b480      	push	{r7}
 800677c:	b087      	sub	sp, #28
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
 8006782:	460b      	mov	r3, r1
 8006784:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800679a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800679c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800679e:	78fb      	ldrb	r3, [r7, #3]
 80067a0:	f003 030f 	and.w	r3, r3, #15
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	fa22 f303 	lsr.w	r3, r2, r3
 80067aa:	01db      	lsls	r3, r3, #7
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80067b4:	78fb      	ldrb	r3, [r7, #3]
 80067b6:	015a      	lsls	r2, r3, #5
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	4413      	add	r3, r2
 80067bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	4013      	ands	r3, r2
 80067c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80067c8:	68bb      	ldr	r3, [r7, #8]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	371c      	adds	r7, #28
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr

080067d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80067d6:	b480      	push	{r7}
 80067d8:	b083      	sub	sp, #12
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	f003 0301 	and.w	r3, r3, #1
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	370c      	adds	r7, #12
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr

080067f2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b085      	sub	sp, #20
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800680c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006810:	f023 0307 	bic.w	r3, r3, #7
 8006814:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006824:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006828:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3714      	adds	r7, #20
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006838:	b480      	push	{r7}
 800683a:	b087      	sub	sp, #28
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	460b      	mov	r3, r1
 8006842:	607a      	str	r2, [r7, #4]
 8006844:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	333c      	adds	r3, #60	@ 0x3c
 800684e:	3304      	adds	r3, #4
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	4a26      	ldr	r2, [pc, #152]	@ (80068f0 <USB_EP0_OutStart+0xb8>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d90a      	bls.n	8006872 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006868:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800686c:	d101      	bne.n	8006872 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800686e:	2300      	movs	r3, #0
 8006870:	e037      	b.n	80068e2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006878:	461a      	mov	r2, r3
 800687a:	2300      	movs	r3, #0
 800687c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800688c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006890:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068a0:	f043 0318 	orr.w	r3, r3, #24
 80068a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068b4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80068b8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80068ba:	7afb      	ldrb	r3, [r7, #11]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d10f      	bne.n	80068e0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068c6:	461a      	mov	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068da:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80068de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	371c      	adds	r7, #28
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	4f54300a 	.word	0x4f54300a

080068f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068fc:	2300      	movs	r3, #0
 80068fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	3301      	adds	r3, #1
 8006904:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800690c:	d901      	bls.n	8006912 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e01b      	b.n	800694a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	2b00      	cmp	r3, #0
 8006918:	daf2      	bge.n	8006900 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800691a:	2300      	movs	r3, #0
 800691c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	f043 0201 	orr.w	r2, r3, #1
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	3301      	adds	r3, #1
 800692e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006936:	d901      	bls.n	800693c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e006      	b.n	800694a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	f003 0301 	and.w	r3, r3, #1
 8006944:	2b01      	cmp	r3, #1
 8006946:	d0f0      	beq.n	800692a <USB_CoreReset+0x36>

  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3714      	adds	r7, #20
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
	...

08006958 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	460b      	mov	r3, r1
 8006962:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006964:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006968:	f002 fc9e 	bl	80092a8 <USBD_static_malloc>
 800696c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d109      	bne.n	8006988 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	32b0      	adds	r2, #176	@ 0xb0
 800697e:	2100      	movs	r1, #0
 8006980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006984:	2302      	movs	r3, #2
 8006986:	e0d4      	b.n	8006b32 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006988:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800698c:	2100      	movs	r1, #0
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f002 ff4e 	bl	8009830 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	32b0      	adds	r2, #176	@ 0xb0
 800699e:	68f9      	ldr	r1, [r7, #12]
 80069a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	32b0      	adds	r2, #176	@ 0xb0
 80069ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	7c1b      	ldrb	r3, [r3, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d138      	bne.n	8006a32 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80069c0:	4b5e      	ldr	r3, [pc, #376]	@ (8006b3c <USBD_CDC_Init+0x1e4>)
 80069c2:	7819      	ldrb	r1, [r3, #0]
 80069c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80069c8:	2202      	movs	r2, #2
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f002 fb49 	bl	8009062 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80069d0:	4b5a      	ldr	r3, [pc, #360]	@ (8006b3c <USBD_CDC_Init+0x1e4>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	f003 020f 	and.w	r2, r3, #15
 80069d8:	6879      	ldr	r1, [r7, #4]
 80069da:	4613      	mov	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	440b      	add	r3, r1
 80069e4:	3324      	adds	r3, #36	@ 0x24
 80069e6:	2201      	movs	r2, #1
 80069e8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80069ea:	4b55      	ldr	r3, [pc, #340]	@ (8006b40 <USBD_CDC_Init+0x1e8>)
 80069ec:	7819      	ldrb	r1, [r3, #0]
 80069ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80069f2:	2202      	movs	r2, #2
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f002 fb34 	bl	8009062 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80069fa:	4b51      	ldr	r3, [pc, #324]	@ (8006b40 <USBD_CDC_Init+0x1e8>)
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	f003 020f 	and.w	r2, r3, #15
 8006a02:	6879      	ldr	r1, [r7, #4]
 8006a04:	4613      	mov	r3, r2
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	4413      	add	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	440b      	add	r3, r1
 8006a0e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006a12:	2201      	movs	r2, #1
 8006a14:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006a16:	4b4b      	ldr	r3, [pc, #300]	@ (8006b44 <USBD_CDC_Init+0x1ec>)
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	f003 020f 	and.w	r2, r3, #15
 8006a1e:	6879      	ldr	r1, [r7, #4]
 8006a20:	4613      	mov	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4413      	add	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	440b      	add	r3, r1
 8006a2a:	3326      	adds	r3, #38	@ 0x26
 8006a2c:	2210      	movs	r2, #16
 8006a2e:	801a      	strh	r2, [r3, #0]
 8006a30:	e035      	b.n	8006a9e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006a32:	4b42      	ldr	r3, [pc, #264]	@ (8006b3c <USBD_CDC_Init+0x1e4>)
 8006a34:	7819      	ldrb	r1, [r3, #0]
 8006a36:	2340      	movs	r3, #64	@ 0x40
 8006a38:	2202      	movs	r2, #2
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f002 fb11 	bl	8009062 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006a40:	4b3e      	ldr	r3, [pc, #248]	@ (8006b3c <USBD_CDC_Init+0x1e4>)
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	f003 020f 	and.w	r2, r3, #15
 8006a48:	6879      	ldr	r1, [r7, #4]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	440b      	add	r3, r1
 8006a54:	3324      	adds	r3, #36	@ 0x24
 8006a56:	2201      	movs	r2, #1
 8006a58:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006a5a:	4b39      	ldr	r3, [pc, #228]	@ (8006b40 <USBD_CDC_Init+0x1e8>)
 8006a5c:	7819      	ldrb	r1, [r3, #0]
 8006a5e:	2340      	movs	r3, #64	@ 0x40
 8006a60:	2202      	movs	r2, #2
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f002 fafd 	bl	8009062 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006a68:	4b35      	ldr	r3, [pc, #212]	@ (8006b40 <USBD_CDC_Init+0x1e8>)
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	f003 020f 	and.w	r2, r3, #15
 8006a70:	6879      	ldr	r1, [r7, #4]
 8006a72:	4613      	mov	r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	4413      	add	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	440b      	add	r3, r1
 8006a7c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006a80:	2201      	movs	r2, #1
 8006a82:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006a84:	4b2f      	ldr	r3, [pc, #188]	@ (8006b44 <USBD_CDC_Init+0x1ec>)
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	f003 020f 	and.w	r2, r3, #15
 8006a8c:	6879      	ldr	r1, [r7, #4]
 8006a8e:	4613      	mov	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4413      	add	r3, r2
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	440b      	add	r3, r1
 8006a98:	3326      	adds	r3, #38	@ 0x26
 8006a9a:	2210      	movs	r2, #16
 8006a9c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006a9e:	4b29      	ldr	r3, [pc, #164]	@ (8006b44 <USBD_CDC_Init+0x1ec>)
 8006aa0:	7819      	ldrb	r1, [r3, #0]
 8006aa2:	2308      	movs	r3, #8
 8006aa4:	2203      	movs	r2, #3
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f002 fadb 	bl	8009062 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006aac:	4b25      	ldr	r3, [pc, #148]	@ (8006b44 <USBD_CDC_Init+0x1ec>)
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	f003 020f 	and.w	r2, r3, #15
 8006ab4:	6879      	ldr	r1, [r7, #4]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4413      	add	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	440b      	add	r3, r1
 8006ac0:	3324      	adds	r3, #36	@ 0x24
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	33b0      	adds	r3, #176	@ 0xb0
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4413      	add	r3, r2
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d101      	bne.n	8006b00 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006afc:	2302      	movs	r3, #2
 8006afe:	e018      	b.n	8006b32 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	7c1b      	ldrb	r3, [r3, #16]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10a      	bne.n	8006b1e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b08:	4b0d      	ldr	r3, [pc, #52]	@ (8006b40 <USBD_CDC_Init+0x1e8>)
 8006b0a:	7819      	ldrb	r1, [r3, #0]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006b12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f002 fb92 	bl	8009240 <USBD_LL_PrepareReceive>
 8006b1c:	e008      	b.n	8006b30 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b1e:	4b08      	ldr	r3, [pc, #32]	@ (8006b40 <USBD_CDC_Init+0x1e8>)
 8006b20:	7819      	ldrb	r1, [r3, #0]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006b28:	2340      	movs	r3, #64	@ 0x40
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f002 fb88 	bl	8009240 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	20000093 	.word	0x20000093
 8006b40:	20000094 	.word	0x20000094
 8006b44:	20000095 	.word	0x20000095

08006b48 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	460b      	mov	r3, r1
 8006b52:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006b54:	4b3a      	ldr	r3, [pc, #232]	@ (8006c40 <USBD_CDC_DeInit+0xf8>)
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	4619      	mov	r1, r3
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f002 faa7 	bl	80090ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006b60:	4b37      	ldr	r3, [pc, #220]	@ (8006c40 <USBD_CDC_DeInit+0xf8>)
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	f003 020f 	and.w	r2, r3, #15
 8006b68:	6879      	ldr	r1, [r7, #4]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4413      	add	r3, r2
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	440b      	add	r3, r1
 8006b74:	3324      	adds	r3, #36	@ 0x24
 8006b76:	2200      	movs	r2, #0
 8006b78:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006b7a:	4b32      	ldr	r3, [pc, #200]	@ (8006c44 <USBD_CDC_DeInit+0xfc>)
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	4619      	mov	r1, r3
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f002 fa94 	bl	80090ae <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006b86:	4b2f      	ldr	r3, [pc, #188]	@ (8006c44 <USBD_CDC_DeInit+0xfc>)
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	f003 020f 	and.w	r2, r3, #15
 8006b8e:	6879      	ldr	r1, [r7, #4]
 8006b90:	4613      	mov	r3, r2
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	4413      	add	r3, r2
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	440b      	add	r3, r1
 8006b9a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006ba2:	4b29      	ldr	r3, [pc, #164]	@ (8006c48 <USBD_CDC_DeInit+0x100>)
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f002 fa80 	bl	80090ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006bae:	4b26      	ldr	r3, [pc, #152]	@ (8006c48 <USBD_CDC_DeInit+0x100>)
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	f003 020f 	and.w	r2, r3, #15
 8006bb6:	6879      	ldr	r1, [r7, #4]
 8006bb8:	4613      	mov	r3, r2
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4413      	add	r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	440b      	add	r3, r1
 8006bc2:	3324      	adds	r3, #36	@ 0x24
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8006c48 <USBD_CDC_DeInit+0x100>)
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	f003 020f 	and.w	r2, r3, #15
 8006bd0:	6879      	ldr	r1, [r7, #4]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	440b      	add	r3, r1
 8006bdc:	3326      	adds	r3, #38	@ 0x26
 8006bde:	2200      	movs	r2, #0
 8006be0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	32b0      	adds	r2, #176	@ 0xb0
 8006bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d01f      	beq.n	8006c34 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	33b0      	adds	r3, #176	@ 0xb0
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	32b0      	adds	r2, #176	@ 0xb0
 8006c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c16:	4618      	mov	r0, r3
 8006c18:	f002 fb54 	bl	80092c4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	32b0      	adds	r2, #176	@ 0xb0
 8006c26:	2100      	movs	r1, #0
 8006c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3708      	adds	r7, #8
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	20000093 	.word	0x20000093
 8006c44:	20000094 	.word	0x20000094
 8006c48:	20000095 	.word	0x20000095

08006c4c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	32b0      	adds	r2, #176	@ 0xb0
 8006c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c64:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006c66:	2300      	movs	r3, #0
 8006c68:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e0bf      	b.n	8006dfc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d050      	beq.n	8006d2a <USBD_CDC_Setup+0xde>
 8006c88:	2b20      	cmp	r3, #32
 8006c8a:	f040 80af 	bne.w	8006dec <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	88db      	ldrh	r3, [r3, #6]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d03a      	beq.n	8006d0c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	b25b      	sxtb	r3, r3
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	da1b      	bge.n	8006cd8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	33b0      	adds	r3, #176	@ 0xb0
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4413      	add	r3, r2
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006cb6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006cb8:	683a      	ldr	r2, [r7, #0]
 8006cba:	88d2      	ldrh	r2, [r2, #6]
 8006cbc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	88db      	ldrh	r3, [r3, #6]
 8006cc2:	2b07      	cmp	r3, #7
 8006cc4:	bf28      	it	cs
 8006cc6:	2307      	movcs	r3, #7
 8006cc8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	89fa      	ldrh	r2, [r7, #14]
 8006cce:	4619      	mov	r1, r3
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f001 fd93 	bl	80087fc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006cd6:	e090      	b.n	8006dfa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	785a      	ldrb	r2, [r3, #1]
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	88db      	ldrh	r3, [r3, #6]
 8006ce6:	2b3f      	cmp	r3, #63	@ 0x3f
 8006ce8:	d803      	bhi.n	8006cf2 <USBD_CDC_Setup+0xa6>
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	88db      	ldrh	r3, [r3, #6]
 8006cee:	b2da      	uxtb	r2, r3
 8006cf0:	e000      	b.n	8006cf4 <USBD_CDC_Setup+0xa8>
 8006cf2:	2240      	movs	r2, #64	@ 0x40
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006cfa:	6939      	ldr	r1, [r7, #16]
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006d02:	461a      	mov	r2, r3
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f001 fda5 	bl	8008854 <USBD_CtlPrepareRx>
      break;
 8006d0a:	e076      	b.n	8006dfa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	33b0      	adds	r3, #176	@ 0xb0
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4413      	add	r3, r2
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	683a      	ldr	r2, [r7, #0]
 8006d20:	7850      	ldrb	r0, [r2, #1]
 8006d22:	2200      	movs	r2, #0
 8006d24:	6839      	ldr	r1, [r7, #0]
 8006d26:	4798      	blx	r3
      break;
 8006d28:	e067      	b.n	8006dfa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	785b      	ldrb	r3, [r3, #1]
 8006d2e:	2b0b      	cmp	r3, #11
 8006d30:	d851      	bhi.n	8006dd6 <USBD_CDC_Setup+0x18a>
 8006d32:	a201      	add	r2, pc, #4	@ (adr r2, 8006d38 <USBD_CDC_Setup+0xec>)
 8006d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d38:	08006d69 	.word	0x08006d69
 8006d3c:	08006de5 	.word	0x08006de5
 8006d40:	08006dd7 	.word	0x08006dd7
 8006d44:	08006dd7 	.word	0x08006dd7
 8006d48:	08006dd7 	.word	0x08006dd7
 8006d4c:	08006dd7 	.word	0x08006dd7
 8006d50:	08006dd7 	.word	0x08006dd7
 8006d54:	08006dd7 	.word	0x08006dd7
 8006d58:	08006dd7 	.word	0x08006dd7
 8006d5c:	08006dd7 	.word	0x08006dd7
 8006d60:	08006d93 	.word	0x08006d93
 8006d64:	08006dbd 	.word	0x08006dbd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	2b03      	cmp	r3, #3
 8006d72:	d107      	bne.n	8006d84 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006d74:	f107 030a 	add.w	r3, r7, #10
 8006d78:	2202      	movs	r2, #2
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f001 fd3d 	bl	80087fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d82:	e032      	b.n	8006dea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006d84:	6839      	ldr	r1, [r7, #0]
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f001 fcbb 	bl	8008702 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	75fb      	strb	r3, [r7, #23]
          break;
 8006d90:	e02b      	b.n	8006dea <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	d107      	bne.n	8006dae <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006d9e:	f107 030d 	add.w	r3, r7, #13
 8006da2:	2201      	movs	r2, #1
 8006da4:	4619      	mov	r1, r3
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f001 fd28 	bl	80087fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006dac:	e01d      	b.n	8006dea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006dae:	6839      	ldr	r1, [r7, #0]
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f001 fca6 	bl	8008702 <USBD_CtlError>
            ret = USBD_FAIL;
 8006db6:	2303      	movs	r3, #3
 8006db8:	75fb      	strb	r3, [r7, #23]
          break;
 8006dba:	e016      	b.n	8006dea <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	2b03      	cmp	r3, #3
 8006dc6:	d00f      	beq.n	8006de8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006dc8:	6839      	ldr	r1, [r7, #0]
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f001 fc99 	bl	8008702 <USBD_CtlError>
            ret = USBD_FAIL;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006dd4:	e008      	b.n	8006de8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006dd6:	6839      	ldr	r1, [r7, #0]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f001 fc92 	bl	8008702 <USBD_CtlError>
          ret = USBD_FAIL;
 8006dde:	2303      	movs	r3, #3
 8006de0:	75fb      	strb	r3, [r7, #23]
          break;
 8006de2:	e002      	b.n	8006dea <USBD_CDC_Setup+0x19e>
          break;
 8006de4:	bf00      	nop
 8006de6:	e008      	b.n	8006dfa <USBD_CDC_Setup+0x1ae>
          break;
 8006de8:	bf00      	nop
      }
      break;
 8006dea:	e006      	b.n	8006dfa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006dec:	6839      	ldr	r1, [r7, #0]
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f001 fc87 	bl	8008702 <USBD_CtlError>
      ret = USBD_FAIL;
 8006df4:	2303      	movs	r3, #3
 8006df6:	75fb      	strb	r3, [r7, #23]
      break;
 8006df8:	bf00      	nop
  }

  return (uint8_t)ret;
 8006dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3718      	adds	r7, #24
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006e16:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	32b0      	adds	r2, #176	@ 0xb0
 8006e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e065      	b.n	8006efa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	32b0      	adds	r2, #176	@ 0xb0
 8006e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e3c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006e3e:	78fb      	ldrb	r3, [r7, #3]
 8006e40:	f003 020f 	and.w	r2, r3, #15
 8006e44:	6879      	ldr	r1, [r7, #4]
 8006e46:	4613      	mov	r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	4413      	add	r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	440b      	add	r3, r1
 8006e50:	3318      	adds	r3, #24
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d02f      	beq.n	8006eb8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006e58:	78fb      	ldrb	r3, [r7, #3]
 8006e5a:	f003 020f 	and.w	r2, r3, #15
 8006e5e:	6879      	ldr	r1, [r7, #4]
 8006e60:	4613      	mov	r3, r2
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	4413      	add	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	440b      	add	r3, r1
 8006e6a:	3318      	adds	r3, #24
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	78fb      	ldrb	r3, [r7, #3]
 8006e70:	f003 010f 	and.w	r1, r3, #15
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	460b      	mov	r3, r1
 8006e78:	00db      	lsls	r3, r3, #3
 8006e7a:	440b      	add	r3, r1
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	4403      	add	r3, r0
 8006e80:	331c      	adds	r3, #28
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	fbb2 f1f3 	udiv	r1, r2, r3
 8006e88:	fb01 f303 	mul.w	r3, r1, r3
 8006e8c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d112      	bne.n	8006eb8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006e92:	78fb      	ldrb	r3, [r7, #3]
 8006e94:	f003 020f 	and.w	r2, r3, #15
 8006e98:	6879      	ldr	r1, [r7, #4]
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	440b      	add	r3, r1
 8006ea4:	3318      	adds	r3, #24
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006eaa:	78f9      	ldrb	r1, [r7, #3]
 8006eac:	2300      	movs	r3, #0
 8006eae:	2200      	movs	r2, #0
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f002 f9a4 	bl	80091fe <USBD_LL_Transmit>
 8006eb6:	e01f      	b.n	8006ef8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	33b0      	adds	r3, #176	@ 0xb0
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4413      	add	r3, r2
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d010      	beq.n	8006ef8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	33b0      	adds	r3, #176	@ 0xb0
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	4413      	add	r3, r2
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	68ba      	ldr	r2, [r7, #8]
 8006eea:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006ef4:	78fa      	ldrb	r2, [r7, #3]
 8006ef6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b084      	sub	sp, #16
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	32b0      	adds	r2, #176	@ 0xb0
 8006f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f1c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	32b0      	adds	r2, #176	@ 0xb0
 8006f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d101      	bne.n	8006f34 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e01a      	b.n	8006f6a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006f34:	78fb      	ldrb	r3, [r7, #3]
 8006f36:	4619      	mov	r1, r3
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f002 f9a2 	bl	8009282 <USBD_LL_GetRxDataSize>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	33b0      	adds	r3, #176	@ 0xb0
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006f64:	4611      	mov	r1, r2
 8006f66:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b084      	sub	sp, #16
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	32b0      	adds	r2, #176	@ 0xb0
 8006f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f88:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d101      	bne.n	8006f94 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e024      	b.n	8006fde <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	33b0      	adds	r3, #176	@ 0xb0
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4413      	add	r3, r2
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d019      	beq.n	8006fdc <USBD_CDC_EP0_RxReady+0x6a>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006fae:	2bff      	cmp	r3, #255	@ 0xff
 8006fb0:	d014      	beq.n	8006fdc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	33b0      	adds	r3, #176	@ 0xb0
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006fca:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006fd2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	22ff      	movs	r2, #255	@ 0xff
 8006fd8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
	...

08006fe8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ff0:	2182      	movs	r1, #130	@ 0x82
 8006ff2:	4818      	ldr	r0, [pc, #96]	@ (8007054 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ff4:	f000 fd4f 	bl	8007a96 <USBD_GetEpDesc>
 8006ff8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006ffa:	2101      	movs	r1, #1
 8006ffc:	4815      	ldr	r0, [pc, #84]	@ (8007054 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ffe:	f000 fd4a 	bl	8007a96 <USBD_GetEpDesc>
 8007002:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007004:	2181      	movs	r1, #129	@ 0x81
 8007006:	4813      	ldr	r0, [pc, #76]	@ (8007054 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007008:	f000 fd45 	bl	8007a96 <USBD_GetEpDesc>
 800700c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d002      	beq.n	800701a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	2210      	movs	r2, #16
 8007018:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d006      	beq.n	800702e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	2200      	movs	r2, #0
 8007024:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007028:	711a      	strb	r2, [r3, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d006      	beq.n	8007042 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800703c:	711a      	strb	r2, [r3, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2243      	movs	r2, #67	@ 0x43
 8007046:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007048:	4b02      	ldr	r3, [pc, #8]	@ (8007054 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800704a:	4618      	mov	r0, r3
 800704c:	3718      	adds	r7, #24
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	20000050 	.word	0x20000050

08007058 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007060:	2182      	movs	r1, #130	@ 0x82
 8007062:	4818      	ldr	r0, [pc, #96]	@ (80070c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007064:	f000 fd17 	bl	8007a96 <USBD_GetEpDesc>
 8007068:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800706a:	2101      	movs	r1, #1
 800706c:	4815      	ldr	r0, [pc, #84]	@ (80070c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800706e:	f000 fd12 	bl	8007a96 <USBD_GetEpDesc>
 8007072:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007074:	2181      	movs	r1, #129	@ 0x81
 8007076:	4813      	ldr	r0, [pc, #76]	@ (80070c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007078:	f000 fd0d 	bl	8007a96 <USBD_GetEpDesc>
 800707c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	2210      	movs	r2, #16
 8007088:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d006      	beq.n	800709e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	2200      	movs	r2, #0
 8007094:	711a      	strb	r2, [r3, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	f042 0202 	orr.w	r2, r2, #2
 800709c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d006      	beq.n	80070b2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	711a      	strb	r2, [r3, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f042 0202 	orr.w	r2, r2, #2
 80070b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2243      	movs	r2, #67	@ 0x43
 80070b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80070b8:	4b02      	ldr	r3, [pc, #8]	@ (80070c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3718      	adds	r7, #24
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	20000050 	.word	0x20000050

080070c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b086      	sub	sp, #24
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80070d0:	2182      	movs	r1, #130	@ 0x82
 80070d2:	4818      	ldr	r0, [pc, #96]	@ (8007134 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80070d4:	f000 fcdf 	bl	8007a96 <USBD_GetEpDesc>
 80070d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80070da:	2101      	movs	r1, #1
 80070dc:	4815      	ldr	r0, [pc, #84]	@ (8007134 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80070de:	f000 fcda 	bl	8007a96 <USBD_GetEpDesc>
 80070e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80070e4:	2181      	movs	r1, #129	@ 0x81
 80070e6:	4813      	ldr	r0, [pc, #76]	@ (8007134 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80070e8:	f000 fcd5 	bl	8007a96 <USBD_GetEpDesc>
 80070ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d002      	beq.n	80070fa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	2210      	movs	r2, #16
 80070f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d006      	beq.n	800710e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	2200      	movs	r2, #0
 8007104:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007108:	711a      	strb	r2, [r3, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d006      	beq.n	8007122 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800711c:	711a      	strb	r2, [r3, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2243      	movs	r2, #67	@ 0x43
 8007126:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007128:	4b02      	ldr	r3, [pc, #8]	@ (8007134 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800712a:	4618      	mov	r0, r3
 800712c:	3718      	adds	r7, #24
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	20000050 	.word	0x20000050

08007138 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	220a      	movs	r2, #10
 8007144:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007146:	4b03      	ldr	r3, [pc, #12]	@ (8007154 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007148:	4618      	mov	r0, r3
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr
 8007154:	2000000c 	.word	0x2000000c

08007158 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d101      	bne.n	800716c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007168:	2303      	movs	r3, #3
 800716a:	e009      	b.n	8007180 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	33b0      	adds	r3, #176	@ 0xb0
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	4413      	add	r3, r2
 800717a:	683a      	ldr	r2, [r7, #0]
 800717c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800718c:	b480      	push	{r7}
 800718e:	b087      	sub	sp, #28
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	32b0      	adds	r2, #176	@ 0xb0
 80071a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071a6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e008      	b.n	80071c4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	68ba      	ldr	r2, [r7, #8]
 80071b6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	371c      	adds	r7, #28
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	32b0      	adds	r2, #176	@ 0xb0
 80071e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d101      	bne.n	80071f4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e004      	b.n	80071fe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	683a      	ldr	r2, [r7, #0]
 80071f8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3714      	adds	r7, #20
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
	...

0800720c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	32b0      	adds	r2, #176	@ 0xb0
 800721e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007222:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007224:	2301      	movs	r3, #1
 8007226:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d101      	bne.n	8007232 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800722e:	2303      	movs	r3, #3
 8007230:	e025      	b.n	800727e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007238:	2b00      	cmp	r3, #0
 800723a:	d11f      	bne.n	800727c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	2201      	movs	r2, #1
 8007240:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007244:	4b10      	ldr	r3, [pc, #64]	@ (8007288 <USBD_CDC_TransmitPacket+0x7c>)
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	f003 020f 	and.w	r2, r3, #15
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	4613      	mov	r3, r2
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4413      	add	r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4403      	add	r3, r0
 800725e:	3318      	adds	r3, #24
 8007260:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007262:	4b09      	ldr	r3, [pc, #36]	@ (8007288 <USBD_CDC_TransmitPacket+0x7c>)
 8007264:	7819      	ldrb	r1, [r3, #0]
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f001 ffc3 	bl	80091fe <USBD_LL_Transmit>

    ret = USBD_OK;
 8007278:	2300      	movs	r3, #0
 800727a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800727c:	7bfb      	ldrb	r3, [r7, #15]
}
 800727e:	4618      	mov	r0, r3
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	20000093 	.word	0x20000093

0800728c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	32b0      	adds	r2, #176	@ 0xb0
 800729e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	32b0      	adds	r2, #176	@ 0xb0
 80072ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d101      	bne.n	80072ba <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e018      	b.n	80072ec <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	7c1b      	ldrb	r3, [r3, #16]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d10a      	bne.n	80072d8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80072c2:	4b0c      	ldr	r3, [pc, #48]	@ (80072f4 <USBD_CDC_ReceivePacket+0x68>)
 80072c4:	7819      	ldrb	r1, [r3, #0]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80072cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f001 ffb5 	bl	8009240 <USBD_LL_PrepareReceive>
 80072d6:	e008      	b.n	80072ea <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80072d8:	4b06      	ldr	r3, [pc, #24]	@ (80072f4 <USBD_CDC_ReceivePacket+0x68>)
 80072da:	7819      	ldrb	r1, [r3, #0]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80072e2:	2340      	movs	r3, #64	@ 0x40
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f001 ffab 	bl	8009240 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	20000094 	.word	0x20000094

080072f8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b086      	sub	sp, #24
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	4613      	mov	r3, r2
 8007304:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d101      	bne.n	8007310 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800730c:	2303      	movs	r3, #3
 800730e:	e01f      	b.n	8007350 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d003      	beq.n	8007336 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	68ba      	ldr	r2, [r7, #8]
 8007332:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2201      	movs	r2, #1
 800733a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	79fa      	ldrb	r2, [r7, #7]
 8007342:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f001 fe25 	bl	8008f94 <USBD_LL_Init>
 800734a:	4603      	mov	r3, r0
 800734c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800734e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007350:	4618      	mov	r0, r3
 8007352:	3718      	adds	r7, #24
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007362:	2300      	movs	r3, #0
 8007364:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d101      	bne.n	8007370 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800736c:	2303      	movs	r3, #3
 800736e:	e025      	b.n	80073bc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	683a      	ldr	r2, [r7, #0]
 8007374:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	32ae      	adds	r2, #174	@ 0xae
 8007382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00f      	beq.n	80073ac <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	32ae      	adds	r2, #174	@ 0xae
 8007396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800739a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800739c:	f107 020e 	add.w	r2, r7, #14
 80073a0:	4610      	mov	r0, r2
 80073a2:	4798      	blx	r3
 80073a4:	4602      	mov	r2, r0
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80073b2:	1c5a      	adds	r2, r3, #1
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f001 fe2d 	bl	800902c <USBD_LL_Start>
 80073d2:	4603      	mov	r3, r0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3708      	adds	r7, #8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80073e4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b084      	sub	sp, #16
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
 80073fa:	460b      	mov	r3, r1
 80073fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80073fe:	2300      	movs	r3, #0
 8007400:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007408:	2b00      	cmp	r3, #0
 800740a:	d009      	beq.n	8007420 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	78fa      	ldrb	r2, [r7, #3]
 8007416:	4611      	mov	r1, r2
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	4798      	blx	r3
 800741c:	4603      	mov	r3, r0
 800741e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007420:	7bfb      	ldrb	r3, [r7, #15]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b084      	sub	sp, #16
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
 8007432:	460b      	mov	r3, r1
 8007434:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	78fa      	ldrb	r2, [r7, #3]
 8007444:	4611      	mov	r1, r2
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	4798      	blx	r3
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d001      	beq.n	8007454 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007450:	2303      	movs	r3, #3
 8007452:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007454:	7bfb      	ldrb	r3, [r7, #15]
}
 8007456:	4618      	mov	r0, r3
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b084      	sub	sp, #16
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
 8007466:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	4618      	mov	r0, r3
 8007472:	f001 f90c 	bl	800868e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007484:	461a      	mov	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007492:	f003 031f 	and.w	r3, r3, #31
 8007496:	2b02      	cmp	r3, #2
 8007498:	d01a      	beq.n	80074d0 <USBD_LL_SetupStage+0x72>
 800749a:	2b02      	cmp	r3, #2
 800749c:	d822      	bhi.n	80074e4 <USBD_LL_SetupStage+0x86>
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d002      	beq.n	80074a8 <USBD_LL_SetupStage+0x4a>
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d00a      	beq.n	80074bc <USBD_LL_SetupStage+0x5e>
 80074a6:	e01d      	b.n	80074e4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80074ae:	4619      	mov	r1, r3
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fb63 	bl	8007b7c <USBD_StdDevReq>
 80074b6:	4603      	mov	r3, r0
 80074b8:	73fb      	strb	r3, [r7, #15]
      break;
 80074ba:	e020      	b.n	80074fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80074c2:	4619      	mov	r1, r3
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fbcb 	bl	8007c60 <USBD_StdItfReq>
 80074ca:	4603      	mov	r3, r0
 80074cc:	73fb      	strb	r3, [r7, #15]
      break;
 80074ce:	e016      	b.n	80074fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80074d6:	4619      	mov	r1, r3
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fc2d 	bl	8007d38 <USBD_StdEPReq>
 80074de:	4603      	mov	r3, r0
 80074e0:	73fb      	strb	r3, [r7, #15]
      break;
 80074e2:	e00c      	b.n	80074fe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80074ea:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	4619      	mov	r1, r3
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f001 fdfa 	bl	80090ec <USBD_LL_StallEP>
 80074f8:	4603      	mov	r3, r0
 80074fa:	73fb      	strb	r3, [r7, #15]
      break;
 80074fc:	bf00      	nop
  }

  return ret;
 80074fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007500:	4618      	mov	r0, r3
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	460b      	mov	r3, r1
 8007512:	607a      	str	r2, [r7, #4]
 8007514:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800751a:	7afb      	ldrb	r3, [r7, #11]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d16e      	bne.n	80075fe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007526:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800752e:	2b03      	cmp	r3, #3
 8007530:	f040 8098 	bne.w	8007664 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	689a      	ldr	r2, [r3, #8]
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	429a      	cmp	r2, r3
 800753e:	d913      	bls.n	8007568 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	689a      	ldr	r2, [r3, #8]
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	1ad2      	subs	r2, r2, r3
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	68da      	ldr	r2, [r3, #12]
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	4293      	cmp	r3, r2
 8007558:	bf28      	it	cs
 800755a:	4613      	movcs	r3, r2
 800755c:	461a      	mov	r2, r3
 800755e:	6879      	ldr	r1, [r7, #4]
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f001 f994 	bl	800888e <USBD_CtlContinueRx>
 8007566:	e07d      	b.n	8007664 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800756e:	f003 031f 	and.w	r3, r3, #31
 8007572:	2b02      	cmp	r3, #2
 8007574:	d014      	beq.n	80075a0 <USBD_LL_DataOutStage+0x98>
 8007576:	2b02      	cmp	r3, #2
 8007578:	d81d      	bhi.n	80075b6 <USBD_LL_DataOutStage+0xae>
 800757a:	2b00      	cmp	r3, #0
 800757c:	d002      	beq.n	8007584 <USBD_LL_DataOutStage+0x7c>
 800757e:	2b01      	cmp	r3, #1
 8007580:	d003      	beq.n	800758a <USBD_LL_DataOutStage+0x82>
 8007582:	e018      	b.n	80075b6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007584:	2300      	movs	r3, #0
 8007586:	75bb      	strb	r3, [r7, #22]
            break;
 8007588:	e018      	b.n	80075bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007590:	b2db      	uxtb	r3, r3
 8007592:	4619      	mov	r1, r3
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f000 fa64 	bl	8007a62 <USBD_CoreFindIF>
 800759a:	4603      	mov	r3, r0
 800759c:	75bb      	strb	r3, [r7, #22]
            break;
 800759e:	e00d      	b.n	80075bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	4619      	mov	r1, r3
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f000 fa66 	bl	8007a7c <USBD_CoreFindEP>
 80075b0:	4603      	mov	r3, r0
 80075b2:	75bb      	strb	r3, [r7, #22]
            break;
 80075b4:	e002      	b.n	80075bc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80075b6:	2300      	movs	r3, #0
 80075b8:	75bb      	strb	r3, [r7, #22]
            break;
 80075ba:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80075bc:	7dbb      	ldrb	r3, [r7, #22]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d119      	bne.n	80075f6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	2b03      	cmp	r3, #3
 80075cc:	d113      	bne.n	80075f6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80075ce:	7dba      	ldrb	r2, [r7, #22]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	32ae      	adds	r2, #174	@ 0xae
 80075d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00b      	beq.n	80075f6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80075de:	7dba      	ldrb	r2, [r7, #22]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80075e6:	7dba      	ldrb	r2, [r7, #22]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	32ae      	adds	r2, #174	@ 0xae
 80075ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	68f8      	ldr	r0, [r7, #12]
 80075f4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f001 f95a 	bl	80088b0 <USBD_CtlSendStatus>
 80075fc:	e032      	b.n	8007664 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80075fe:	7afb      	ldrb	r3, [r7, #11]
 8007600:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007604:	b2db      	uxtb	r3, r3
 8007606:	4619      	mov	r1, r3
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f000 fa37 	bl	8007a7c <USBD_CoreFindEP>
 800760e:	4603      	mov	r3, r0
 8007610:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007612:	7dbb      	ldrb	r3, [r7, #22]
 8007614:	2bff      	cmp	r3, #255	@ 0xff
 8007616:	d025      	beq.n	8007664 <USBD_LL_DataOutStage+0x15c>
 8007618:	7dbb      	ldrb	r3, [r7, #22]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d122      	bne.n	8007664 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007624:	b2db      	uxtb	r3, r3
 8007626:	2b03      	cmp	r3, #3
 8007628:	d117      	bne.n	800765a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800762a:	7dba      	ldrb	r2, [r7, #22]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	32ae      	adds	r2, #174	@ 0xae
 8007630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007634:	699b      	ldr	r3, [r3, #24]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00f      	beq.n	800765a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800763a:	7dba      	ldrb	r2, [r7, #22]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007642:	7dba      	ldrb	r2, [r7, #22]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	32ae      	adds	r2, #174	@ 0xae
 8007648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800764c:	699b      	ldr	r3, [r3, #24]
 800764e:	7afa      	ldrb	r2, [r7, #11]
 8007650:	4611      	mov	r1, r2
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	4798      	blx	r3
 8007656:	4603      	mov	r3, r0
 8007658:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800765a:	7dfb      	ldrb	r3, [r7, #23]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d001      	beq.n	8007664 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007660:	7dfb      	ldrb	r3, [r7, #23]
 8007662:	e000      	b.n	8007666 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3718      	adds	r7, #24
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b086      	sub	sp, #24
 8007672:	af00      	add	r7, sp, #0
 8007674:	60f8      	str	r0, [r7, #12]
 8007676:	460b      	mov	r3, r1
 8007678:	607a      	str	r2, [r7, #4]
 800767a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800767c:	7afb      	ldrb	r3, [r7, #11]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d16f      	bne.n	8007762 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	3314      	adds	r3, #20
 8007686:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800768e:	2b02      	cmp	r3, #2
 8007690:	d15a      	bne.n	8007748 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	689a      	ldr	r2, [r3, #8]
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	429a      	cmp	r2, r3
 800769c:	d914      	bls.n	80076c8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	689a      	ldr	r2, [r3, #8]
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	1ad2      	subs	r2, r2, r3
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	461a      	mov	r2, r3
 80076b2:	6879      	ldr	r1, [r7, #4]
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f001 f8bc 	bl	8008832 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076ba:	2300      	movs	r3, #0
 80076bc:	2200      	movs	r2, #0
 80076be:	2100      	movs	r1, #0
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f001 fdbd 	bl	8009240 <USBD_LL_PrepareReceive>
 80076c6:	e03f      	b.n	8007748 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	68da      	ldr	r2, [r3, #12]
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d11c      	bne.n	800770e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	685a      	ldr	r2, [r3, #4]
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80076dc:	429a      	cmp	r2, r3
 80076de:	d316      	bcc.n	800770e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	685a      	ldr	r2, [r3, #4]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d20f      	bcs.n	800770e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80076ee:	2200      	movs	r2, #0
 80076f0:	2100      	movs	r1, #0
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f001 f89d 	bl	8008832 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007700:	2300      	movs	r3, #0
 8007702:	2200      	movs	r2, #0
 8007704:	2100      	movs	r1, #0
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f001 fd9a 	bl	8009240 <USBD_LL_PrepareReceive>
 800770c:	e01c      	b.n	8007748 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007714:	b2db      	uxtb	r3, r3
 8007716:	2b03      	cmp	r3, #3
 8007718:	d10f      	bne.n	800773a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d009      	beq.n	800773a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800773a:	2180      	movs	r1, #128	@ 0x80
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f001 fcd5 	bl	80090ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f001 f8c7 	bl	80088d6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d03a      	beq.n	80077c8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f7ff fe42 	bl	80073dc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007760:	e032      	b.n	80077c8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007762:	7afb      	ldrb	r3, [r7, #11]
 8007764:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007768:	b2db      	uxtb	r3, r3
 800776a:	4619      	mov	r1, r3
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f000 f985 	bl	8007a7c <USBD_CoreFindEP>
 8007772:	4603      	mov	r3, r0
 8007774:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007776:	7dfb      	ldrb	r3, [r7, #23]
 8007778:	2bff      	cmp	r3, #255	@ 0xff
 800777a:	d025      	beq.n	80077c8 <USBD_LL_DataInStage+0x15a>
 800777c:	7dfb      	ldrb	r3, [r7, #23]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d122      	bne.n	80077c8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007788:	b2db      	uxtb	r3, r3
 800778a:	2b03      	cmp	r3, #3
 800778c:	d11c      	bne.n	80077c8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800778e:	7dfa      	ldrb	r2, [r7, #23]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	32ae      	adds	r2, #174	@ 0xae
 8007794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d014      	beq.n	80077c8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800779e:	7dfa      	ldrb	r2, [r7, #23]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80077a6:	7dfa      	ldrb	r2, [r7, #23]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	32ae      	adds	r2, #174	@ 0xae
 80077ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b0:	695b      	ldr	r3, [r3, #20]
 80077b2:	7afa      	ldrb	r2, [r7, #11]
 80077b4:	4611      	mov	r1, r2
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	4798      	blx	r3
 80077ba:	4603      	mov	r3, r0
 80077bc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80077be:	7dbb      	ldrb	r3, [r7, #22]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d001      	beq.n	80077c8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80077c4:	7dbb      	ldrb	r3, [r7, #22]
 80077c6:	e000      	b.n	80077ca <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3718      	adds	r7, #24
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b084      	sub	sp, #16
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80077da:	2300      	movs	r3, #0
 80077dc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800780a:	2b00      	cmp	r3, #0
 800780c:	d014      	beq.n	8007838 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00e      	beq.n	8007838 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	6852      	ldr	r2, [r2, #4]
 8007826:	b2d2      	uxtb	r2, r2
 8007828:	4611      	mov	r1, r2
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	4798      	blx	r3
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d001      	beq.n	8007838 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007834:	2303      	movs	r3, #3
 8007836:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007838:	2340      	movs	r3, #64	@ 0x40
 800783a:	2200      	movs	r2, #0
 800783c:	2100      	movs	r1, #0
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f001 fc0f 	bl	8009062 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2240      	movs	r2, #64	@ 0x40
 8007850:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007854:	2340      	movs	r3, #64	@ 0x40
 8007856:	2200      	movs	r2, #0
 8007858:	2180      	movs	r1, #128	@ 0x80
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f001 fc01 	bl	8009062 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2240      	movs	r2, #64	@ 0x40
 800786a:	621a      	str	r2, [r3, #32]

  return ret;
 800786c:	7bfb      	ldrb	r3, [r7, #15]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007876:	b480      	push	{r7}
 8007878:	b083      	sub	sp, #12
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
 800787e:	460b      	mov	r3, r1
 8007880:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	78fa      	ldrb	r2, [r7, #3]
 8007886:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	370c      	adds	r7, #12
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr

08007896 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007896:	b480      	push	{r7}
 8007898:	b083      	sub	sp, #12
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	2b04      	cmp	r3, #4
 80078a8:	d006      	beq.n	80078b8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2204      	movs	r2, #4
 80078bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr

080078ce <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80078ce:	b480      	push	{r7}
 80078d0:	b083      	sub	sp, #12
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	2b04      	cmp	r3, #4
 80078e0:	d106      	bne.n	80078f0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80078e8:	b2da      	uxtb	r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	370c      	adds	r7, #12
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr

080078fe <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b082      	sub	sp, #8
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b03      	cmp	r3, #3
 8007910:	d110      	bne.n	8007934 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00b      	beq.n	8007934 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007922:	69db      	ldr	r3, [r3, #28]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d005      	beq.n	8007934 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3708      	adds	r7, #8
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b082      	sub	sp, #8
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	460b      	mov	r3, r1
 8007948:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	32ae      	adds	r2, #174	@ 0xae
 8007954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d101      	bne.n	8007960 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800795c:	2303      	movs	r3, #3
 800795e:	e01c      	b.n	800799a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007966:	b2db      	uxtb	r3, r3
 8007968:	2b03      	cmp	r3, #3
 800796a:	d115      	bne.n	8007998 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	32ae      	adds	r2, #174	@ 0xae
 8007976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800797a:	6a1b      	ldr	r3, [r3, #32]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00b      	beq.n	8007998 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	32ae      	adds	r2, #174	@ 0xae
 800798a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800798e:	6a1b      	ldr	r3, [r3, #32]
 8007990:	78fa      	ldrb	r2, [r7, #3]
 8007992:	4611      	mov	r1, r2
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b082      	sub	sp, #8
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
 80079aa:	460b      	mov	r3, r1
 80079ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	32ae      	adds	r2, #174	@ 0xae
 80079b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d101      	bne.n	80079c4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e01c      	b.n	80079fe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	2b03      	cmp	r3, #3
 80079ce:	d115      	bne.n	80079fc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	32ae      	adds	r2, #174	@ 0xae
 80079da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00b      	beq.n	80079fc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	32ae      	adds	r2, #174	@ 0xae
 80079ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079f4:	78fa      	ldrb	r2, [r7, #3]
 80079f6:	4611      	mov	r1, r2
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3708      	adds	r7, #8
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007a06:	b480      	push	{r7}
 8007a08:	b083      	sub	sp, #12
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007a24:	2300      	movs	r3, #0
 8007a26:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00e      	beq.n	8007a58 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	6852      	ldr	r2, [r2, #4]
 8007a46:	b2d2      	uxtb	r2, r2
 8007a48:	4611      	mov	r1, r2
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	4798      	blx	r3
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d001      	beq.n	8007a58 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007a54:	2303      	movs	r3, #3
 8007a56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b083      	sub	sp, #12
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007a6e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	460b      	mov	r3, r1
 8007a86:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007a88:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	370c      	adds	r7, #12
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b086      	sub	sp, #24
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	885b      	ldrh	r3, [r3, #2]
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	7812      	ldrb	r2, [r2, #0]
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d91f      	bls.n	8007afc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007ac2:	e013      	b.n	8007aec <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007ac4:	f107 030a 	add.w	r3, r7, #10
 8007ac8:	4619      	mov	r1, r3
 8007aca:	6978      	ldr	r0, [r7, #20]
 8007acc:	f000 f81b 	bl	8007b06 <USBD_GetNextDesc>
 8007ad0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	785b      	ldrb	r3, [r3, #1]
 8007ad6:	2b05      	cmp	r3, #5
 8007ad8:	d108      	bne.n	8007aec <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	789b      	ldrb	r3, [r3, #2]
 8007ae2:	78fa      	ldrb	r2, [r7, #3]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d008      	beq.n	8007afa <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	885b      	ldrh	r3, [r3, #2]
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	897b      	ldrh	r3, [r7, #10]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d8e5      	bhi.n	8007ac4 <USBD_GetEpDesc+0x2e>
 8007af8:	e000      	b.n	8007afc <USBD_GetEpDesc+0x66>
          break;
 8007afa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007afc:	693b      	ldr	r3, [r7, #16]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3718      	adds	r7, #24
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007b06:	b480      	push	{r7}
 8007b08:	b085      	sub	sp, #20
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
 8007b0e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	881b      	ldrh	r3, [r3, #0]
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	7812      	ldrb	r2, [r2, #0]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	b29a      	uxth	r2, r3
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	461a      	mov	r2, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007b30:	68fb      	ldr	r3, [r7, #12]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3714      	adds	r7, #20
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr

08007b3e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b087      	sub	sp, #28
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	3301      	adds	r3, #1
 8007b54:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007b5c:	8a3b      	ldrh	r3, [r7, #16]
 8007b5e:	021b      	lsls	r3, r3, #8
 8007b60:	b21a      	sxth	r2, r3
 8007b62:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	b21b      	sxth	r3, r3
 8007b6a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007b6c:	89fb      	ldrh	r3, [r7, #14]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	371c      	adds	r7, #28
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr
	...

08007b7c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b86:	2300      	movs	r3, #0
 8007b88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b92:	2b40      	cmp	r3, #64	@ 0x40
 8007b94:	d005      	beq.n	8007ba2 <USBD_StdDevReq+0x26>
 8007b96:	2b40      	cmp	r3, #64	@ 0x40
 8007b98:	d857      	bhi.n	8007c4a <USBD_StdDevReq+0xce>
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00f      	beq.n	8007bbe <USBD_StdDevReq+0x42>
 8007b9e:	2b20      	cmp	r3, #32
 8007ba0:	d153      	bne.n	8007c4a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	32ae      	adds	r2, #174	@ 0xae
 8007bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	6839      	ldr	r1, [r7, #0]
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	4798      	blx	r3
 8007bb8:	4603      	mov	r3, r0
 8007bba:	73fb      	strb	r3, [r7, #15]
      break;
 8007bbc:	e04a      	b.n	8007c54 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	785b      	ldrb	r3, [r3, #1]
 8007bc2:	2b09      	cmp	r3, #9
 8007bc4:	d83b      	bhi.n	8007c3e <USBD_StdDevReq+0xc2>
 8007bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8007bcc <USBD_StdDevReq+0x50>)
 8007bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bcc:	08007c21 	.word	0x08007c21
 8007bd0:	08007c35 	.word	0x08007c35
 8007bd4:	08007c3f 	.word	0x08007c3f
 8007bd8:	08007c2b 	.word	0x08007c2b
 8007bdc:	08007c3f 	.word	0x08007c3f
 8007be0:	08007bff 	.word	0x08007bff
 8007be4:	08007bf5 	.word	0x08007bf5
 8007be8:	08007c3f 	.word	0x08007c3f
 8007bec:	08007c17 	.word	0x08007c17
 8007bf0:	08007c09 	.word	0x08007c09
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007bf4:	6839      	ldr	r1, [r7, #0]
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 fa3c 	bl	8008074 <USBD_GetDescriptor>
          break;
 8007bfc:	e024      	b.n	8007c48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007bfe:	6839      	ldr	r1, [r7, #0]
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 fba1 	bl	8008348 <USBD_SetAddress>
          break;
 8007c06:	e01f      	b.n	8007c48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007c08:	6839      	ldr	r1, [r7, #0]
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 fbe0 	bl	80083d0 <USBD_SetConfig>
 8007c10:	4603      	mov	r3, r0
 8007c12:	73fb      	strb	r3, [r7, #15]
          break;
 8007c14:	e018      	b.n	8007c48 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007c16:	6839      	ldr	r1, [r7, #0]
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 fc83 	bl	8008524 <USBD_GetConfig>
          break;
 8007c1e:	e013      	b.n	8007c48 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007c20:	6839      	ldr	r1, [r7, #0]
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 fcb4 	bl	8008590 <USBD_GetStatus>
          break;
 8007c28:	e00e      	b.n	8007c48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007c2a:	6839      	ldr	r1, [r7, #0]
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 fce3 	bl	80085f8 <USBD_SetFeature>
          break;
 8007c32:	e009      	b.n	8007c48 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007c34:	6839      	ldr	r1, [r7, #0]
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fd07 	bl	800864a <USBD_ClrFeature>
          break;
 8007c3c:	e004      	b.n	8007c48 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007c3e:	6839      	ldr	r1, [r7, #0]
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fd5e 	bl	8008702 <USBD_CtlError>
          break;
 8007c46:	bf00      	nop
      }
      break;
 8007c48:	e004      	b.n	8007c54 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007c4a:	6839      	ldr	r1, [r7, #0]
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 fd58 	bl	8008702 <USBD_CtlError>
      break;
 8007c52:	bf00      	nop
  }

  return ret;
 8007c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop

08007c60 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c76:	2b40      	cmp	r3, #64	@ 0x40
 8007c78:	d005      	beq.n	8007c86 <USBD_StdItfReq+0x26>
 8007c7a:	2b40      	cmp	r3, #64	@ 0x40
 8007c7c:	d852      	bhi.n	8007d24 <USBD_StdItfReq+0xc4>
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d001      	beq.n	8007c86 <USBD_StdItfReq+0x26>
 8007c82:	2b20      	cmp	r3, #32
 8007c84:	d14e      	bne.n	8007d24 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d840      	bhi.n	8007d16 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	889b      	ldrh	r3, [r3, #4]
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d836      	bhi.n	8007d0c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	889b      	ldrh	r3, [r3, #4]
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f7ff fedb 	bl	8007a62 <USBD_CoreFindIF>
 8007cac:	4603      	mov	r3, r0
 8007cae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007cb0:	7bbb      	ldrb	r3, [r7, #14]
 8007cb2:	2bff      	cmp	r3, #255	@ 0xff
 8007cb4:	d01d      	beq.n	8007cf2 <USBD_StdItfReq+0x92>
 8007cb6:	7bbb      	ldrb	r3, [r7, #14]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d11a      	bne.n	8007cf2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007cbc:	7bba      	ldrb	r2, [r7, #14]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	32ae      	adds	r2, #174	@ 0xae
 8007cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00f      	beq.n	8007cec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007ccc:	7bba      	ldrb	r2, [r7, #14]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007cd4:	7bba      	ldrb	r2, [r7, #14]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	32ae      	adds	r2, #174	@ 0xae
 8007cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	4798      	blx	r3
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007cea:	e004      	b.n	8007cf6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007cec:	2303      	movs	r3, #3
 8007cee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007cf0:	e001      	b.n	8007cf6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	88db      	ldrh	r3, [r3, #6]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d110      	bne.n	8007d20 <USBD_StdItfReq+0xc0>
 8007cfe:	7bfb      	ldrb	r3, [r7, #15]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10d      	bne.n	8007d20 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fdd3 	bl	80088b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007d0a:	e009      	b.n	8007d20 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fcf7 	bl	8008702 <USBD_CtlError>
          break;
 8007d14:	e004      	b.n	8007d20 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007d16:	6839      	ldr	r1, [r7, #0]
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 fcf2 	bl	8008702 <USBD_CtlError>
          break;
 8007d1e:	e000      	b.n	8007d22 <USBD_StdItfReq+0xc2>
          break;
 8007d20:	bf00      	nop
      }
      break;
 8007d22:	e004      	b.n	8007d2e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007d24:	6839      	ldr	r1, [r7, #0]
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fceb 	bl	8008702 <USBD_CtlError>
      break;
 8007d2c:	bf00      	nop
  }

  return ret;
 8007d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d42:	2300      	movs	r3, #0
 8007d44:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	889b      	ldrh	r3, [r3, #4]
 8007d4a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d54:	2b40      	cmp	r3, #64	@ 0x40
 8007d56:	d007      	beq.n	8007d68 <USBD_StdEPReq+0x30>
 8007d58:	2b40      	cmp	r3, #64	@ 0x40
 8007d5a:	f200 817f 	bhi.w	800805c <USBD_StdEPReq+0x324>
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d02a      	beq.n	8007db8 <USBD_StdEPReq+0x80>
 8007d62:	2b20      	cmp	r3, #32
 8007d64:	f040 817a 	bne.w	800805c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007d68:	7bbb      	ldrb	r3, [r7, #14]
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f7ff fe85 	bl	8007a7c <USBD_CoreFindEP>
 8007d72:	4603      	mov	r3, r0
 8007d74:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d76:	7b7b      	ldrb	r3, [r7, #13]
 8007d78:	2bff      	cmp	r3, #255	@ 0xff
 8007d7a:	f000 8174 	beq.w	8008066 <USBD_StdEPReq+0x32e>
 8007d7e:	7b7b      	ldrb	r3, [r7, #13]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f040 8170 	bne.w	8008066 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007d86:	7b7a      	ldrb	r2, [r7, #13]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007d8e:	7b7a      	ldrb	r2, [r7, #13]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	32ae      	adds	r2, #174	@ 0xae
 8007d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f000 8163 	beq.w	8008066 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007da0:	7b7a      	ldrb	r2, [r7, #13]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	32ae      	adds	r2, #174	@ 0xae
 8007da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	6839      	ldr	r1, [r7, #0]
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	4798      	blx	r3
 8007db2:	4603      	mov	r3, r0
 8007db4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007db6:	e156      	b.n	8008066 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	785b      	ldrb	r3, [r3, #1]
 8007dbc:	2b03      	cmp	r3, #3
 8007dbe:	d008      	beq.n	8007dd2 <USBD_StdEPReq+0x9a>
 8007dc0:	2b03      	cmp	r3, #3
 8007dc2:	f300 8145 	bgt.w	8008050 <USBD_StdEPReq+0x318>
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f000 809b 	beq.w	8007f02 <USBD_StdEPReq+0x1ca>
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d03c      	beq.n	8007e4a <USBD_StdEPReq+0x112>
 8007dd0:	e13e      	b.n	8008050 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d002      	beq.n	8007de4 <USBD_StdEPReq+0xac>
 8007dde:	2b03      	cmp	r3, #3
 8007de0:	d016      	beq.n	8007e10 <USBD_StdEPReq+0xd8>
 8007de2:	e02c      	b.n	8007e3e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007de4:	7bbb      	ldrb	r3, [r7, #14]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00d      	beq.n	8007e06 <USBD_StdEPReq+0xce>
 8007dea:	7bbb      	ldrb	r3, [r7, #14]
 8007dec:	2b80      	cmp	r3, #128	@ 0x80
 8007dee:	d00a      	beq.n	8007e06 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007df0:	7bbb      	ldrb	r3, [r7, #14]
 8007df2:	4619      	mov	r1, r3
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f001 f979 	bl	80090ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dfa:	2180      	movs	r1, #128	@ 0x80
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f001 f975 	bl	80090ec <USBD_LL_StallEP>
 8007e02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e04:	e020      	b.n	8007e48 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007e06:	6839      	ldr	r1, [r7, #0]
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 fc7a 	bl	8008702 <USBD_CtlError>
              break;
 8007e0e:	e01b      	b.n	8007e48 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	885b      	ldrh	r3, [r3, #2]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d10e      	bne.n	8007e36 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007e18:	7bbb      	ldrb	r3, [r7, #14]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00b      	beq.n	8007e36 <USBD_StdEPReq+0xfe>
 8007e1e:	7bbb      	ldrb	r3, [r7, #14]
 8007e20:	2b80      	cmp	r3, #128	@ 0x80
 8007e22:	d008      	beq.n	8007e36 <USBD_StdEPReq+0xfe>
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	88db      	ldrh	r3, [r3, #6]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d104      	bne.n	8007e36 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e2c:	7bbb      	ldrb	r3, [r7, #14]
 8007e2e:	4619      	mov	r1, r3
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f001 f95b 	bl	80090ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fd3a 	bl	80088b0 <USBD_CtlSendStatus>

              break;
 8007e3c:	e004      	b.n	8007e48 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007e3e:	6839      	ldr	r1, [r7, #0]
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 fc5e 	bl	8008702 <USBD_CtlError>
              break;
 8007e46:	bf00      	nop
          }
          break;
 8007e48:	e107      	b.n	800805a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	d002      	beq.n	8007e5c <USBD_StdEPReq+0x124>
 8007e56:	2b03      	cmp	r3, #3
 8007e58:	d016      	beq.n	8007e88 <USBD_StdEPReq+0x150>
 8007e5a:	e04b      	b.n	8007ef4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e5c:	7bbb      	ldrb	r3, [r7, #14]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00d      	beq.n	8007e7e <USBD_StdEPReq+0x146>
 8007e62:	7bbb      	ldrb	r3, [r7, #14]
 8007e64:	2b80      	cmp	r3, #128	@ 0x80
 8007e66:	d00a      	beq.n	8007e7e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e68:	7bbb      	ldrb	r3, [r7, #14]
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f001 f93d 	bl	80090ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e72:	2180      	movs	r1, #128	@ 0x80
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f001 f939 	bl	80090ec <USBD_LL_StallEP>
 8007e7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e7c:	e040      	b.n	8007f00 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007e7e:	6839      	ldr	r1, [r7, #0]
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 fc3e 	bl	8008702 <USBD_CtlError>
              break;
 8007e86:	e03b      	b.n	8007f00 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	885b      	ldrh	r3, [r3, #2]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d136      	bne.n	8007efe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007e90:	7bbb      	ldrb	r3, [r7, #14]
 8007e92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d004      	beq.n	8007ea4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e9a:	7bbb      	ldrb	r3, [r7, #14]
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f001 f943 	bl	800912a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fd03 	bl	80088b0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007eaa:	7bbb      	ldrb	r3, [r7, #14]
 8007eac:	4619      	mov	r1, r3
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7ff fde4 	bl	8007a7c <USBD_CoreFindEP>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007eb8:	7b7b      	ldrb	r3, [r7, #13]
 8007eba:	2bff      	cmp	r3, #255	@ 0xff
 8007ebc:	d01f      	beq.n	8007efe <USBD_StdEPReq+0x1c6>
 8007ebe:	7b7b      	ldrb	r3, [r7, #13]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d11c      	bne.n	8007efe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007ec4:	7b7a      	ldrb	r2, [r7, #13]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007ecc:	7b7a      	ldrb	r2, [r7, #13]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	32ae      	adds	r2, #174	@ 0xae
 8007ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d010      	beq.n	8007efe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007edc:	7b7a      	ldrb	r2, [r7, #13]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	32ae      	adds	r2, #174	@ 0xae
 8007ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	6839      	ldr	r1, [r7, #0]
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	4798      	blx	r3
 8007eee:	4603      	mov	r3, r0
 8007ef0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007ef2:	e004      	b.n	8007efe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007ef4:	6839      	ldr	r1, [r7, #0]
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fc03 	bl	8008702 <USBD_CtlError>
              break;
 8007efc:	e000      	b.n	8007f00 <USBD_StdEPReq+0x1c8>
              break;
 8007efe:	bf00      	nop
          }
          break;
 8007f00:	e0ab      	b.n	800805a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	d002      	beq.n	8007f14 <USBD_StdEPReq+0x1dc>
 8007f0e:	2b03      	cmp	r3, #3
 8007f10:	d032      	beq.n	8007f78 <USBD_StdEPReq+0x240>
 8007f12:	e097      	b.n	8008044 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f14:	7bbb      	ldrb	r3, [r7, #14]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d007      	beq.n	8007f2a <USBD_StdEPReq+0x1f2>
 8007f1a:	7bbb      	ldrb	r3, [r7, #14]
 8007f1c:	2b80      	cmp	r3, #128	@ 0x80
 8007f1e:	d004      	beq.n	8007f2a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007f20:	6839      	ldr	r1, [r7, #0]
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 fbed 	bl	8008702 <USBD_CtlError>
                break;
 8007f28:	e091      	b.n	800804e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	da0b      	bge.n	8007f4a <USBD_StdEPReq+0x212>
 8007f32:	7bbb      	ldrb	r3, [r7, #14]
 8007f34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f38:	4613      	mov	r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	4413      	add	r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	3310      	adds	r3, #16
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	4413      	add	r3, r2
 8007f46:	3304      	adds	r3, #4
 8007f48:	e00b      	b.n	8007f62 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f4a:	7bbb      	ldrb	r3, [r7, #14]
 8007f4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f50:	4613      	mov	r3, r2
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	4413      	add	r3, r2
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	4413      	add	r3, r2
 8007f60:	3304      	adds	r3, #4
 8007f62:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	2200      	movs	r2, #0
 8007f68:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	2202      	movs	r2, #2
 8007f6e:	4619      	mov	r1, r3
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fc43 	bl	80087fc <USBD_CtlSendData>
              break;
 8007f76:	e06a      	b.n	800804e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007f78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	da11      	bge.n	8007fa4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f80:	7bbb      	ldrb	r3, [r7, #14]
 8007f82:	f003 020f 	and.w	r2, r3, #15
 8007f86:	6879      	ldr	r1, [r7, #4]
 8007f88:	4613      	mov	r3, r2
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	4413      	add	r3, r2
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	440b      	add	r3, r1
 8007f92:	3324      	adds	r3, #36	@ 0x24
 8007f94:	881b      	ldrh	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d117      	bne.n	8007fca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007f9a:	6839      	ldr	r1, [r7, #0]
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 fbb0 	bl	8008702 <USBD_CtlError>
                  break;
 8007fa2:	e054      	b.n	800804e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007fa4:	7bbb      	ldrb	r3, [r7, #14]
 8007fa6:	f003 020f 	and.w	r2, r3, #15
 8007faa:	6879      	ldr	r1, [r7, #4]
 8007fac:	4613      	mov	r3, r2
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	4413      	add	r3, r2
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	440b      	add	r3, r1
 8007fb6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007fba:	881b      	ldrh	r3, [r3, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d104      	bne.n	8007fca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007fc0:	6839      	ldr	r1, [r7, #0]
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 fb9d 	bl	8008702 <USBD_CtlError>
                  break;
 8007fc8:	e041      	b.n	800804e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	da0b      	bge.n	8007fea <USBD_StdEPReq+0x2b2>
 8007fd2:	7bbb      	ldrb	r3, [r7, #14]
 8007fd4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007fd8:	4613      	mov	r3, r2
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	4413      	add	r3, r2
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	3310      	adds	r3, #16
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	3304      	adds	r3, #4
 8007fe8:	e00b      	b.n	8008002 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007fea:	7bbb      	ldrb	r3, [r7, #14]
 8007fec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	4413      	add	r3, r2
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	4413      	add	r3, r2
 8008000:	3304      	adds	r3, #4
 8008002:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008004:	7bbb      	ldrb	r3, [r7, #14]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d002      	beq.n	8008010 <USBD_StdEPReq+0x2d8>
 800800a:	7bbb      	ldrb	r3, [r7, #14]
 800800c:	2b80      	cmp	r3, #128	@ 0x80
 800800e:	d103      	bne.n	8008018 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	2200      	movs	r2, #0
 8008014:	601a      	str	r2, [r3, #0]
 8008016:	e00e      	b.n	8008036 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008018:	7bbb      	ldrb	r3, [r7, #14]
 800801a:	4619      	mov	r1, r3
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f001 f8a3 	bl	8009168 <USBD_LL_IsStallEP>
 8008022:	4603      	mov	r3, r0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d003      	beq.n	8008030 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	2201      	movs	r2, #1
 800802c:	601a      	str	r2, [r3, #0]
 800802e:	e002      	b.n	8008036 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	2200      	movs	r2, #0
 8008034:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	2202      	movs	r2, #2
 800803a:	4619      	mov	r1, r3
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fbdd 	bl	80087fc <USBD_CtlSendData>
              break;
 8008042:	e004      	b.n	800804e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008044:	6839      	ldr	r1, [r7, #0]
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fb5b 	bl	8008702 <USBD_CtlError>
              break;
 800804c:	bf00      	nop
          }
          break;
 800804e:	e004      	b.n	800805a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008050:	6839      	ldr	r1, [r7, #0]
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 fb55 	bl	8008702 <USBD_CtlError>
          break;
 8008058:	bf00      	nop
      }
      break;
 800805a:	e005      	b.n	8008068 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800805c:	6839      	ldr	r1, [r7, #0]
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fb4f 	bl	8008702 <USBD_CtlError>
      break;
 8008064:	e000      	b.n	8008068 <USBD_StdEPReq+0x330>
      break;
 8008066:	bf00      	nop
  }

  return ret;
 8008068:	7bfb      	ldrb	r3, [r7, #15]
}
 800806a:	4618      	mov	r0, r3
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
	...

08008074 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800807e:	2300      	movs	r3, #0
 8008080:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008082:	2300      	movs	r3, #0
 8008084:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008086:	2300      	movs	r3, #0
 8008088:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	885b      	ldrh	r3, [r3, #2]
 800808e:	0a1b      	lsrs	r3, r3, #8
 8008090:	b29b      	uxth	r3, r3
 8008092:	3b01      	subs	r3, #1
 8008094:	2b06      	cmp	r3, #6
 8008096:	f200 8128 	bhi.w	80082ea <USBD_GetDescriptor+0x276>
 800809a:	a201      	add	r2, pc, #4	@ (adr r2, 80080a0 <USBD_GetDescriptor+0x2c>)
 800809c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a0:	080080bd 	.word	0x080080bd
 80080a4:	080080d5 	.word	0x080080d5
 80080a8:	08008115 	.word	0x08008115
 80080ac:	080082eb 	.word	0x080082eb
 80080b0:	080082eb 	.word	0x080082eb
 80080b4:	0800828b 	.word	0x0800828b
 80080b8:	080082b7 	.word	0x080082b7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	7c12      	ldrb	r2, [r2, #16]
 80080c8:	f107 0108 	add.w	r1, r7, #8
 80080cc:	4610      	mov	r0, r2
 80080ce:	4798      	blx	r3
 80080d0:	60f8      	str	r0, [r7, #12]
      break;
 80080d2:	e112      	b.n	80082fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	7c1b      	ldrb	r3, [r3, #16]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d10d      	bne.n	80080f8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080e4:	f107 0208 	add.w	r2, r7, #8
 80080e8:	4610      	mov	r0, r2
 80080ea:	4798      	blx	r3
 80080ec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	3301      	adds	r3, #1
 80080f2:	2202      	movs	r2, #2
 80080f4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80080f6:	e100      	b.n	80082fa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008100:	f107 0208 	add.w	r2, r7, #8
 8008104:	4610      	mov	r0, r2
 8008106:	4798      	blx	r3
 8008108:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	3301      	adds	r3, #1
 800810e:	2202      	movs	r2, #2
 8008110:	701a      	strb	r2, [r3, #0]
      break;
 8008112:	e0f2      	b.n	80082fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	885b      	ldrh	r3, [r3, #2]
 8008118:	b2db      	uxtb	r3, r3
 800811a:	2b05      	cmp	r3, #5
 800811c:	f200 80ac 	bhi.w	8008278 <USBD_GetDescriptor+0x204>
 8008120:	a201      	add	r2, pc, #4	@ (adr r2, 8008128 <USBD_GetDescriptor+0xb4>)
 8008122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008126:	bf00      	nop
 8008128:	08008141 	.word	0x08008141
 800812c:	08008175 	.word	0x08008175
 8008130:	080081a9 	.word	0x080081a9
 8008134:	080081dd 	.word	0x080081dd
 8008138:	08008211 	.word	0x08008211
 800813c:	08008245 	.word	0x08008245
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00b      	beq.n	8008164 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	7c12      	ldrb	r2, [r2, #16]
 8008158:	f107 0108 	add.w	r1, r7, #8
 800815c:	4610      	mov	r0, r2
 800815e:	4798      	blx	r3
 8008160:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008162:	e091      	b.n	8008288 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008164:	6839      	ldr	r1, [r7, #0]
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 facb 	bl	8008702 <USBD_CtlError>
            err++;
 800816c:	7afb      	ldrb	r3, [r7, #11]
 800816e:	3301      	adds	r3, #1
 8008170:	72fb      	strb	r3, [r7, #11]
          break;
 8008172:	e089      	b.n	8008288 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d00b      	beq.n	8008198 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	7c12      	ldrb	r2, [r2, #16]
 800818c:	f107 0108 	add.w	r1, r7, #8
 8008190:	4610      	mov	r0, r2
 8008192:	4798      	blx	r3
 8008194:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008196:	e077      	b.n	8008288 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008198:	6839      	ldr	r1, [r7, #0]
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 fab1 	bl	8008702 <USBD_CtlError>
            err++;
 80081a0:	7afb      	ldrb	r3, [r7, #11]
 80081a2:	3301      	adds	r3, #1
 80081a4:	72fb      	strb	r3, [r7, #11]
          break;
 80081a6:	e06f      	b.n	8008288 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00b      	beq.n	80081cc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	7c12      	ldrb	r2, [r2, #16]
 80081c0:	f107 0108 	add.w	r1, r7, #8
 80081c4:	4610      	mov	r0, r2
 80081c6:	4798      	blx	r3
 80081c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081ca:	e05d      	b.n	8008288 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081cc:	6839      	ldr	r1, [r7, #0]
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 fa97 	bl	8008702 <USBD_CtlError>
            err++;
 80081d4:	7afb      	ldrb	r3, [r7, #11]
 80081d6:	3301      	adds	r3, #1
 80081d8:	72fb      	strb	r3, [r7, #11]
          break;
 80081da:	e055      	b.n	8008288 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00b      	beq.n	8008200 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081ee:	691b      	ldr	r3, [r3, #16]
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	7c12      	ldrb	r2, [r2, #16]
 80081f4:	f107 0108 	add.w	r1, r7, #8
 80081f8:	4610      	mov	r0, r2
 80081fa:	4798      	blx	r3
 80081fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081fe:	e043      	b.n	8008288 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008200:	6839      	ldr	r1, [r7, #0]
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 fa7d 	bl	8008702 <USBD_CtlError>
            err++;
 8008208:	7afb      	ldrb	r3, [r7, #11]
 800820a:	3301      	adds	r3, #1
 800820c:	72fb      	strb	r3, [r7, #11]
          break;
 800820e:	e03b      	b.n	8008288 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008216:	695b      	ldr	r3, [r3, #20]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d00b      	beq.n	8008234 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008222:	695b      	ldr	r3, [r3, #20]
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	7c12      	ldrb	r2, [r2, #16]
 8008228:	f107 0108 	add.w	r1, r7, #8
 800822c:	4610      	mov	r0, r2
 800822e:	4798      	blx	r3
 8008230:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008232:	e029      	b.n	8008288 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008234:	6839      	ldr	r1, [r7, #0]
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fa63 	bl	8008702 <USBD_CtlError>
            err++;
 800823c:	7afb      	ldrb	r3, [r7, #11]
 800823e:	3301      	adds	r3, #1
 8008240:	72fb      	strb	r3, [r7, #11]
          break;
 8008242:	e021      	b.n	8008288 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800824a:	699b      	ldr	r3, [r3, #24]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d00b      	beq.n	8008268 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	7c12      	ldrb	r2, [r2, #16]
 800825c:	f107 0108 	add.w	r1, r7, #8
 8008260:	4610      	mov	r0, r2
 8008262:	4798      	blx	r3
 8008264:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008266:	e00f      	b.n	8008288 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008268:	6839      	ldr	r1, [r7, #0]
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 fa49 	bl	8008702 <USBD_CtlError>
            err++;
 8008270:	7afb      	ldrb	r3, [r7, #11]
 8008272:	3301      	adds	r3, #1
 8008274:	72fb      	strb	r3, [r7, #11]
          break;
 8008276:	e007      	b.n	8008288 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008278:	6839      	ldr	r1, [r7, #0]
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fa41 	bl	8008702 <USBD_CtlError>
          err++;
 8008280:	7afb      	ldrb	r3, [r7, #11]
 8008282:	3301      	adds	r3, #1
 8008284:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008286:	bf00      	nop
      }
      break;
 8008288:	e037      	b.n	80082fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	7c1b      	ldrb	r3, [r3, #16]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d109      	bne.n	80082a6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800829a:	f107 0208 	add.w	r2, r7, #8
 800829e:	4610      	mov	r0, r2
 80082a0:	4798      	blx	r3
 80082a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082a4:	e029      	b.n	80082fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80082a6:	6839      	ldr	r1, [r7, #0]
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 fa2a 	bl	8008702 <USBD_CtlError>
        err++;
 80082ae:	7afb      	ldrb	r3, [r7, #11]
 80082b0:	3301      	adds	r3, #1
 80082b2:	72fb      	strb	r3, [r7, #11]
      break;
 80082b4:	e021      	b.n	80082fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	7c1b      	ldrb	r3, [r3, #16]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d10d      	bne.n	80082da <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082c6:	f107 0208 	add.w	r2, r7, #8
 80082ca:	4610      	mov	r0, r2
 80082cc:	4798      	blx	r3
 80082ce:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	3301      	adds	r3, #1
 80082d4:	2207      	movs	r2, #7
 80082d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082d8:	e00f      	b.n	80082fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80082da:	6839      	ldr	r1, [r7, #0]
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 fa10 	bl	8008702 <USBD_CtlError>
        err++;
 80082e2:	7afb      	ldrb	r3, [r7, #11]
 80082e4:	3301      	adds	r3, #1
 80082e6:	72fb      	strb	r3, [r7, #11]
      break;
 80082e8:	e007      	b.n	80082fa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80082ea:	6839      	ldr	r1, [r7, #0]
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 fa08 	bl	8008702 <USBD_CtlError>
      err++;
 80082f2:	7afb      	ldrb	r3, [r7, #11]
 80082f4:	3301      	adds	r3, #1
 80082f6:	72fb      	strb	r3, [r7, #11]
      break;
 80082f8:	bf00      	nop
  }

  if (err != 0U)
 80082fa:	7afb      	ldrb	r3, [r7, #11]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d11e      	bne.n	800833e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	88db      	ldrh	r3, [r3, #6]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d016      	beq.n	8008336 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008308:	893b      	ldrh	r3, [r7, #8]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00e      	beq.n	800832c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	88da      	ldrh	r2, [r3, #6]
 8008312:	893b      	ldrh	r3, [r7, #8]
 8008314:	4293      	cmp	r3, r2
 8008316:	bf28      	it	cs
 8008318:	4613      	movcs	r3, r2
 800831a:	b29b      	uxth	r3, r3
 800831c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800831e:	893b      	ldrh	r3, [r7, #8]
 8008320:	461a      	mov	r2, r3
 8008322:	68f9      	ldr	r1, [r7, #12]
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 fa69 	bl	80087fc <USBD_CtlSendData>
 800832a:	e009      	b.n	8008340 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800832c:	6839      	ldr	r1, [r7, #0]
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f9e7 	bl	8008702 <USBD_CtlError>
 8008334:	e004      	b.n	8008340 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 faba 	bl	80088b0 <USBD_CtlSendStatus>
 800833c:	e000      	b.n	8008340 <USBD_GetDescriptor+0x2cc>
    return;
 800833e:	bf00      	nop
  }
}
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop

08008348 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	889b      	ldrh	r3, [r3, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d131      	bne.n	80083be <USBD_SetAddress+0x76>
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	88db      	ldrh	r3, [r3, #6]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d12d      	bne.n	80083be <USBD_SetAddress+0x76>
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	885b      	ldrh	r3, [r3, #2]
 8008366:	2b7f      	cmp	r3, #127	@ 0x7f
 8008368:	d829      	bhi.n	80083be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	885b      	ldrh	r3, [r3, #2]
 800836e:	b2db      	uxtb	r3, r3
 8008370:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008374:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800837c:	b2db      	uxtb	r3, r3
 800837e:	2b03      	cmp	r3, #3
 8008380:	d104      	bne.n	800838c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008382:	6839      	ldr	r1, [r7, #0]
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 f9bc 	bl	8008702 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800838a:	e01d      	b.n	80083c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	7bfa      	ldrb	r2, [r7, #15]
 8008390:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008394:	7bfb      	ldrb	r3, [r7, #15]
 8008396:	4619      	mov	r1, r3
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 ff11 	bl	80091c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fa86 	bl	80088b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80083a4:	7bfb      	ldrb	r3, [r7, #15]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d004      	beq.n	80083b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2202      	movs	r2, #2
 80083ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083b2:	e009      	b.n	80083c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083bc:	e004      	b.n	80083c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80083be:	6839      	ldr	r1, [r7, #0]
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 f99e 	bl	8008702 <USBD_CtlError>
  }
}
 80083c6:	bf00      	nop
 80083c8:	bf00      	nop
 80083ca:	3710      	adds	r7, #16
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083da:	2300      	movs	r3, #0
 80083dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	885b      	ldrh	r3, [r3, #2]
 80083e2:	b2da      	uxtb	r2, r3
 80083e4:	4b4e      	ldr	r3, [pc, #312]	@ (8008520 <USBD_SetConfig+0x150>)
 80083e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80083e8:	4b4d      	ldr	r3, [pc, #308]	@ (8008520 <USBD_SetConfig+0x150>)
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d905      	bls.n	80083fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80083f0:	6839      	ldr	r1, [r7, #0]
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f985 	bl	8008702 <USBD_CtlError>
    return USBD_FAIL;
 80083f8:	2303      	movs	r3, #3
 80083fa:	e08c      	b.n	8008516 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008402:	b2db      	uxtb	r3, r3
 8008404:	2b02      	cmp	r3, #2
 8008406:	d002      	beq.n	800840e <USBD_SetConfig+0x3e>
 8008408:	2b03      	cmp	r3, #3
 800840a:	d029      	beq.n	8008460 <USBD_SetConfig+0x90>
 800840c:	e075      	b.n	80084fa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800840e:	4b44      	ldr	r3, [pc, #272]	@ (8008520 <USBD_SetConfig+0x150>)
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d020      	beq.n	8008458 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008416:	4b42      	ldr	r3, [pc, #264]	@ (8008520 <USBD_SetConfig+0x150>)
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	461a      	mov	r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008420:	4b3f      	ldr	r3, [pc, #252]	@ (8008520 <USBD_SetConfig+0x150>)
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	4619      	mov	r1, r3
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f7fe ffe3 	bl	80073f2 <USBD_SetClassConfig>
 800842c:	4603      	mov	r3, r0
 800842e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008430:	7bfb      	ldrb	r3, [r7, #15]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d008      	beq.n	8008448 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008436:	6839      	ldr	r1, [r7, #0]
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 f962 	bl	8008702 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2202      	movs	r2, #2
 8008442:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008446:	e065      	b.n	8008514 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fa31 	bl	80088b0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2203      	movs	r2, #3
 8008452:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008456:	e05d      	b.n	8008514 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 fa29 	bl	80088b0 <USBD_CtlSendStatus>
      break;
 800845e:	e059      	b.n	8008514 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008460:	4b2f      	ldr	r3, [pc, #188]	@ (8008520 <USBD_SetConfig+0x150>)
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d112      	bne.n	800848e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2202      	movs	r2, #2
 800846c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008470:	4b2b      	ldr	r3, [pc, #172]	@ (8008520 <USBD_SetConfig+0x150>)
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	461a      	mov	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800847a:	4b29      	ldr	r3, [pc, #164]	@ (8008520 <USBD_SetConfig+0x150>)
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	4619      	mov	r1, r3
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f7fe ffd2 	bl	800742a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 fa12 	bl	80088b0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800848c:	e042      	b.n	8008514 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800848e:	4b24      	ldr	r3, [pc, #144]	@ (8008520 <USBD_SetConfig+0x150>)
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	461a      	mov	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	429a      	cmp	r2, r3
 800849a:	d02a      	beq.n	80084f2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	4619      	mov	r1, r3
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f7fe ffc0 	bl	800742a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80084aa:	4b1d      	ldr	r3, [pc, #116]	@ (8008520 <USBD_SetConfig+0x150>)
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	461a      	mov	r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80084b4:	4b1a      	ldr	r3, [pc, #104]	@ (8008520 <USBD_SetConfig+0x150>)
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	4619      	mov	r1, r3
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f7fe ff99 	bl	80073f2 <USBD_SetClassConfig>
 80084c0:	4603      	mov	r3, r0
 80084c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80084c4:	7bfb      	ldrb	r3, [r7, #15]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00f      	beq.n	80084ea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80084ca:	6839      	ldr	r1, [r7, #0]
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 f918 	bl	8008702 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	4619      	mov	r1, r3
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f7fe ffa5 	bl	800742a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2202      	movs	r2, #2
 80084e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80084e8:	e014      	b.n	8008514 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 f9e0 	bl	80088b0 <USBD_CtlSendStatus>
      break;
 80084f0:	e010      	b.n	8008514 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 f9dc 	bl	80088b0 <USBD_CtlSendStatus>
      break;
 80084f8:	e00c      	b.n	8008514 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80084fa:	6839      	ldr	r1, [r7, #0]
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 f900 	bl	8008702 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008502:	4b07      	ldr	r3, [pc, #28]	@ (8008520 <USBD_SetConfig+0x150>)
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	4619      	mov	r1, r3
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f7fe ff8e 	bl	800742a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800850e:	2303      	movs	r3, #3
 8008510:	73fb      	strb	r3, [r7, #15]
      break;
 8008512:	bf00      	nop
  }

  return ret;
 8008514:	7bfb      	ldrb	r3, [r7, #15]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3710      	adds	r7, #16
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	2000025c 	.word	0x2000025c

08008524 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	88db      	ldrh	r3, [r3, #6]
 8008532:	2b01      	cmp	r3, #1
 8008534:	d004      	beq.n	8008540 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008536:	6839      	ldr	r1, [r7, #0]
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 f8e2 	bl	8008702 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800853e:	e023      	b.n	8008588 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008546:	b2db      	uxtb	r3, r3
 8008548:	2b02      	cmp	r3, #2
 800854a:	dc02      	bgt.n	8008552 <USBD_GetConfig+0x2e>
 800854c:	2b00      	cmp	r3, #0
 800854e:	dc03      	bgt.n	8008558 <USBD_GetConfig+0x34>
 8008550:	e015      	b.n	800857e <USBD_GetConfig+0x5a>
 8008552:	2b03      	cmp	r3, #3
 8008554:	d00b      	beq.n	800856e <USBD_GetConfig+0x4a>
 8008556:	e012      	b.n	800857e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	3308      	adds	r3, #8
 8008562:	2201      	movs	r2, #1
 8008564:	4619      	mov	r1, r3
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 f948 	bl	80087fc <USBD_CtlSendData>
        break;
 800856c:	e00c      	b.n	8008588 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	3304      	adds	r3, #4
 8008572:	2201      	movs	r2, #1
 8008574:	4619      	mov	r1, r3
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f940 	bl	80087fc <USBD_CtlSendData>
        break;
 800857c:	e004      	b.n	8008588 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800857e:	6839      	ldr	r1, [r7, #0]
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 f8be 	bl	8008702 <USBD_CtlError>
        break;
 8008586:	bf00      	nop
}
 8008588:	bf00      	nop
 800858a:	3708      	adds	r7, #8
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	3b01      	subs	r3, #1
 80085a4:	2b02      	cmp	r3, #2
 80085a6:	d81e      	bhi.n	80085e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	88db      	ldrh	r3, [r3, #6]
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	d004      	beq.n	80085ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80085b0:	6839      	ldr	r1, [r7, #0]
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 f8a5 	bl	8008702 <USBD_CtlError>
        break;
 80085b8:	e01a      	b.n	80085f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2201      	movs	r2, #1
 80085be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d005      	beq.n	80085d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	f043 0202 	orr.w	r2, r3, #2
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	330c      	adds	r3, #12
 80085da:	2202      	movs	r2, #2
 80085dc:	4619      	mov	r1, r3
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 f90c 	bl	80087fc <USBD_CtlSendData>
      break;
 80085e4:	e004      	b.n	80085f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80085e6:	6839      	ldr	r1, [r7, #0]
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 f88a 	bl	8008702 <USBD_CtlError>
      break;
 80085ee:	bf00      	nop
  }
}
 80085f0:	bf00      	nop
 80085f2:	3708      	adds	r7, #8
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	885b      	ldrh	r3, [r3, #2]
 8008606:	2b01      	cmp	r3, #1
 8008608:	d107      	bne.n	800861a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2201      	movs	r2, #1
 800860e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 f94c 	bl	80088b0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008618:	e013      	b.n	8008642 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	885b      	ldrh	r3, [r3, #2]
 800861e:	2b02      	cmp	r3, #2
 8008620:	d10b      	bne.n	800863a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	889b      	ldrh	r3, [r3, #4]
 8008626:	0a1b      	lsrs	r3, r3, #8
 8008628:	b29b      	uxth	r3, r3
 800862a:	b2da      	uxtb	r2, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 f93c 	bl	80088b0 <USBD_CtlSendStatus>
}
 8008638:	e003      	b.n	8008642 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800863a:	6839      	ldr	r1, [r7, #0]
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 f860 	bl	8008702 <USBD_CtlError>
}
 8008642:	bf00      	nop
 8008644:	3708      	adds	r7, #8
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800864a:	b580      	push	{r7, lr}
 800864c:	b082      	sub	sp, #8
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
 8008652:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800865a:	b2db      	uxtb	r3, r3
 800865c:	3b01      	subs	r3, #1
 800865e:	2b02      	cmp	r3, #2
 8008660:	d80b      	bhi.n	800867a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	885b      	ldrh	r3, [r3, #2]
 8008666:	2b01      	cmp	r3, #1
 8008668:	d10c      	bne.n	8008684 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 f91c 	bl	80088b0 <USBD_CtlSendStatus>
      }
      break;
 8008678:	e004      	b.n	8008684 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800867a:	6839      	ldr	r1, [r7, #0]
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 f840 	bl	8008702 <USBD_CtlError>
      break;
 8008682:	e000      	b.n	8008686 <USBD_ClrFeature+0x3c>
      break;
 8008684:	bf00      	nop
  }
}
 8008686:	bf00      	nop
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b084      	sub	sp, #16
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	781a      	ldrb	r2, [r3, #0]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	3301      	adds	r3, #1
 80086a8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	781a      	ldrb	r2, [r3, #0]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	3301      	adds	r3, #1
 80086b6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	f7ff fa40 	bl	8007b3e <SWAPBYTE>
 80086be:	4603      	mov	r3, r0
 80086c0:	461a      	mov	r2, r3
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	3301      	adds	r3, #1
 80086ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	3301      	adds	r3, #1
 80086d0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	f7ff fa33 	bl	8007b3e <SWAPBYTE>
 80086d8:	4603      	mov	r3, r0
 80086da:	461a      	mov	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	3301      	adds	r3, #1
 80086e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	3301      	adds	r3, #1
 80086ea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	f7ff fa26 	bl	8007b3e <SWAPBYTE>
 80086f2:	4603      	mov	r3, r0
 80086f4:	461a      	mov	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	80da      	strh	r2, [r3, #6]
}
 80086fa:	bf00      	nop
 80086fc:	3710      	adds	r7, #16
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b082      	sub	sp, #8
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
 800870a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800870c:	2180      	movs	r1, #128	@ 0x80
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 fcec 	bl	80090ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008714:	2100      	movs	r1, #0
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 fce8 	bl	80090ec <USBD_LL_StallEP>
}
 800871c:	bf00      	nop
 800871e:	3708      	adds	r7, #8
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b086      	sub	sp, #24
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008730:	2300      	movs	r3, #0
 8008732:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d042      	beq.n	80087c0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800873e:	6938      	ldr	r0, [r7, #16]
 8008740:	f000 f842 	bl	80087c8 <USBD_GetLen>
 8008744:	4603      	mov	r3, r0
 8008746:	3301      	adds	r3, #1
 8008748:	005b      	lsls	r3, r3, #1
 800874a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800874e:	d808      	bhi.n	8008762 <USBD_GetString+0x3e>
 8008750:	6938      	ldr	r0, [r7, #16]
 8008752:	f000 f839 	bl	80087c8 <USBD_GetLen>
 8008756:	4603      	mov	r3, r0
 8008758:	3301      	adds	r3, #1
 800875a:	b29b      	uxth	r3, r3
 800875c:	005b      	lsls	r3, r3, #1
 800875e:	b29a      	uxth	r2, r3
 8008760:	e001      	b.n	8008766 <USBD_GetString+0x42>
 8008762:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800876a:	7dfb      	ldrb	r3, [r7, #23]
 800876c:	68ba      	ldr	r2, [r7, #8]
 800876e:	4413      	add	r3, r2
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	7812      	ldrb	r2, [r2, #0]
 8008774:	701a      	strb	r2, [r3, #0]
  idx++;
 8008776:	7dfb      	ldrb	r3, [r7, #23]
 8008778:	3301      	adds	r3, #1
 800877a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800877c:	7dfb      	ldrb	r3, [r7, #23]
 800877e:	68ba      	ldr	r2, [r7, #8]
 8008780:	4413      	add	r3, r2
 8008782:	2203      	movs	r2, #3
 8008784:	701a      	strb	r2, [r3, #0]
  idx++;
 8008786:	7dfb      	ldrb	r3, [r7, #23]
 8008788:	3301      	adds	r3, #1
 800878a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800878c:	e013      	b.n	80087b6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800878e:	7dfb      	ldrb	r3, [r7, #23]
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	4413      	add	r3, r2
 8008794:	693a      	ldr	r2, [r7, #16]
 8008796:	7812      	ldrb	r2, [r2, #0]
 8008798:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	3301      	adds	r3, #1
 800879e:	613b      	str	r3, [r7, #16]
    idx++;
 80087a0:	7dfb      	ldrb	r3, [r7, #23]
 80087a2:	3301      	adds	r3, #1
 80087a4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80087a6:	7dfb      	ldrb	r3, [r7, #23]
 80087a8:	68ba      	ldr	r2, [r7, #8]
 80087aa:	4413      	add	r3, r2
 80087ac:	2200      	movs	r2, #0
 80087ae:	701a      	strb	r2, [r3, #0]
    idx++;
 80087b0:	7dfb      	ldrb	r3, [r7, #23]
 80087b2:	3301      	adds	r3, #1
 80087b4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d1e7      	bne.n	800878e <USBD_GetString+0x6a>
 80087be:	e000      	b.n	80087c2 <USBD_GetString+0x9e>
    return;
 80087c0:	bf00      	nop
  }
}
 80087c2:	3718      	adds	r7, #24
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b085      	sub	sp, #20
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80087d0:	2300      	movs	r3, #0
 80087d2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80087d8:	e005      	b.n	80087e6 <USBD_GetLen+0x1e>
  {
    len++;
 80087da:	7bfb      	ldrb	r3, [r7, #15]
 80087dc:	3301      	adds	r3, #1
 80087de:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	3301      	adds	r3, #1
 80087e4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1f5      	bne.n	80087da <USBD_GetLen+0x12>
  }

  return len;
 80087ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3714      	adds	r7, #20
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2202      	movs	r2, #2
 800880c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	68ba      	ldr	r2, [r7, #8]
 8008820:	2100      	movs	r1, #0
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f000 fceb 	bl	80091fe <USBD_LL_Transmit>

  return USBD_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b084      	sub	sp, #16
 8008836:	af00      	add	r7, sp, #0
 8008838:	60f8      	str	r0, [r7, #12]
 800883a:	60b9      	str	r1, [r7, #8]
 800883c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	68ba      	ldr	r2, [r7, #8]
 8008842:	2100      	movs	r1, #0
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f000 fcda 	bl	80091fe <USBD_LL_Transmit>

  return USBD_OK;
 800884a:	2300      	movs	r3, #0
}
 800884c:	4618      	mov	r0, r3
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2203      	movs	r2, #3
 8008864:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	68ba      	ldr	r2, [r7, #8]
 800887c:	2100      	movs	r1, #0
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f000 fcde 	bl	8009240 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b084      	sub	sp, #16
 8008892:	af00      	add	r7, sp, #0
 8008894:	60f8      	str	r0, [r7, #12]
 8008896:	60b9      	str	r1, [r7, #8]
 8008898:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	68ba      	ldr	r2, [r7, #8]
 800889e:	2100      	movs	r1, #0
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f000 fccd 	bl	8009240 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3710      	adds	r7, #16
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2204      	movs	r2, #4
 80088bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80088c0:	2300      	movs	r3, #0
 80088c2:	2200      	movs	r2, #0
 80088c4:	2100      	movs	r1, #0
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fc99 	bl	80091fe <USBD_LL_Transmit>

  return USBD_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b082      	sub	sp, #8
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2205      	movs	r2, #5
 80088e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088e6:	2300      	movs	r3, #0
 80088e8:	2200      	movs	r2, #0
 80088ea:	2100      	movs	r1, #0
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 fca7 	bl	8009240 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008900:	2200      	movs	r2, #0
 8008902:	4912      	ldr	r1, [pc, #72]	@ (800894c <MX_USB_DEVICE_Init+0x50>)
 8008904:	4812      	ldr	r0, [pc, #72]	@ (8008950 <MX_USB_DEVICE_Init+0x54>)
 8008906:	f7fe fcf7 	bl	80072f8 <USBD_Init>
 800890a:	4603      	mov	r3, r0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d001      	beq.n	8008914 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008910:	f7f8 f82c 	bl	800096c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008914:	490f      	ldr	r1, [pc, #60]	@ (8008954 <MX_USB_DEVICE_Init+0x58>)
 8008916:	480e      	ldr	r0, [pc, #56]	@ (8008950 <MX_USB_DEVICE_Init+0x54>)
 8008918:	f7fe fd1e 	bl	8007358 <USBD_RegisterClass>
 800891c:	4603      	mov	r3, r0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d001      	beq.n	8008926 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008922:	f7f8 f823 	bl	800096c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008926:	490c      	ldr	r1, [pc, #48]	@ (8008958 <MX_USB_DEVICE_Init+0x5c>)
 8008928:	4809      	ldr	r0, [pc, #36]	@ (8008950 <MX_USB_DEVICE_Init+0x54>)
 800892a:	f7fe fc15 	bl	8007158 <USBD_CDC_RegisterInterface>
 800892e:	4603      	mov	r3, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d001      	beq.n	8008938 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008934:	f7f8 f81a 	bl	800096c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008938:	4805      	ldr	r0, [pc, #20]	@ (8008950 <MX_USB_DEVICE_Init+0x54>)
 800893a:	f7fe fd43 	bl	80073c4 <USBD_Start>
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d001      	beq.n	8008948 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008944:	f7f8 f812 	bl	800096c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008948:	bf00      	nop
 800894a:	bd80      	pop	{r7, pc}
 800894c:	200000ac 	.word	0x200000ac
 8008950:	20000260 	.word	0x20000260
 8008954:	20000018 	.word	0x20000018
 8008958:	20000098 	.word	0x20000098

0800895c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008960:	2200      	movs	r2, #0
 8008962:	4905      	ldr	r1, [pc, #20]	@ (8008978 <CDC_Init_FS+0x1c>)
 8008964:	4805      	ldr	r0, [pc, #20]	@ (800897c <CDC_Init_FS+0x20>)
 8008966:	f7fe fc11 	bl	800718c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800896a:	4905      	ldr	r1, [pc, #20]	@ (8008980 <CDC_Init_FS+0x24>)
 800896c:	4803      	ldr	r0, [pc, #12]	@ (800897c <CDC_Init_FS+0x20>)
 800896e:	f7fe fc2f 	bl	80071d0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008972:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008974:	4618      	mov	r0, r3
 8008976:	bd80      	pop	{r7, pc}
 8008978:	20000d3c 	.word	0x20000d3c
 800897c:	20000260 	.word	0x20000260
 8008980:	2000053c 	.word	0x2000053c

08008984 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008984:	b480      	push	{r7}
 8008986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008988:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800898a:	4618      	mov	r0, r3
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	4603      	mov	r3, r0
 800899c:	6039      	str	r1, [r7, #0]
 800899e:	71fb      	strb	r3, [r7, #7]
 80089a0:	4613      	mov	r3, r2
 80089a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80089a4:	79fb      	ldrb	r3, [r7, #7]
 80089a6:	2b23      	cmp	r3, #35	@ 0x23
 80089a8:	d84a      	bhi.n	8008a40 <CDC_Control_FS+0xac>
 80089aa:	a201      	add	r2, pc, #4	@ (adr r2, 80089b0 <CDC_Control_FS+0x1c>)
 80089ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b0:	08008a41 	.word	0x08008a41
 80089b4:	08008a41 	.word	0x08008a41
 80089b8:	08008a41 	.word	0x08008a41
 80089bc:	08008a41 	.word	0x08008a41
 80089c0:	08008a41 	.word	0x08008a41
 80089c4:	08008a41 	.word	0x08008a41
 80089c8:	08008a41 	.word	0x08008a41
 80089cc:	08008a41 	.word	0x08008a41
 80089d0:	08008a41 	.word	0x08008a41
 80089d4:	08008a41 	.word	0x08008a41
 80089d8:	08008a41 	.word	0x08008a41
 80089dc:	08008a41 	.word	0x08008a41
 80089e0:	08008a41 	.word	0x08008a41
 80089e4:	08008a41 	.word	0x08008a41
 80089e8:	08008a41 	.word	0x08008a41
 80089ec:	08008a41 	.word	0x08008a41
 80089f0:	08008a41 	.word	0x08008a41
 80089f4:	08008a41 	.word	0x08008a41
 80089f8:	08008a41 	.word	0x08008a41
 80089fc:	08008a41 	.word	0x08008a41
 8008a00:	08008a41 	.word	0x08008a41
 8008a04:	08008a41 	.word	0x08008a41
 8008a08:	08008a41 	.word	0x08008a41
 8008a0c:	08008a41 	.word	0x08008a41
 8008a10:	08008a41 	.word	0x08008a41
 8008a14:	08008a41 	.word	0x08008a41
 8008a18:	08008a41 	.word	0x08008a41
 8008a1c:	08008a41 	.word	0x08008a41
 8008a20:	08008a41 	.word	0x08008a41
 8008a24:	08008a41 	.word	0x08008a41
 8008a28:	08008a41 	.word	0x08008a41
 8008a2c:	08008a41 	.word	0x08008a41
 8008a30:	08008a41 	.word	0x08008a41
 8008a34:	08008a41 	.word	0x08008a41
 8008a38:	08008a41 	.word	0x08008a41
 8008a3c:	08008a41 	.word	0x08008a41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008a40:	bf00      	nop
  }

  return (USBD_OK);
 8008a42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008a5a:	6879      	ldr	r1, [r7, #4]
 8008a5c:	4805      	ldr	r0, [pc, #20]	@ (8008a74 <CDC_Receive_FS+0x24>)
 8008a5e:	f7fe fbb7 	bl	80071d0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008a62:	4804      	ldr	r0, [pc, #16]	@ (8008a74 <CDC_Receive_FS+0x24>)
 8008a64:	f7fe fc12 	bl	800728c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008a68:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3708      	adds	r7, #8
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	20000260 	.word	0x20000260

08008a78 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	460b      	mov	r3, r1
 8008a82:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008a84:	2300      	movs	r3, #0
 8008a86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008a88:	4b0d      	ldr	r3, [pc, #52]	@ (8008ac0 <CDC_Transmit_FS+0x48>)
 8008a8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a8e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d001      	beq.n	8008a9e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e00b      	b.n	8008ab6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008a9e:	887b      	ldrh	r3, [r7, #2]
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	6879      	ldr	r1, [r7, #4]
 8008aa4:	4806      	ldr	r0, [pc, #24]	@ (8008ac0 <CDC_Transmit_FS+0x48>)
 8008aa6:	f7fe fb71 	bl	800718c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008aaa:	4805      	ldr	r0, [pc, #20]	@ (8008ac0 <CDC_Transmit_FS+0x48>)
 8008aac:	f7fe fbae 	bl	800720c <USBD_CDC_TransmitPacket>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	20000260 	.word	0x20000260

08008ac4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b087      	sub	sp, #28
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008ad6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	371c      	adds	r7, #28
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr
	...

08008ae8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	4603      	mov	r3, r0
 8008af0:	6039      	str	r1, [r7, #0]
 8008af2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	2212      	movs	r2, #18
 8008af8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008afa:	4b03      	ldr	r3, [pc, #12]	@ (8008b08 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr
 8008b08:	200000c8 	.word	0x200000c8

08008b0c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	4603      	mov	r3, r0
 8008b14:	6039      	str	r1, [r7, #0]
 8008b16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	2204      	movs	r2, #4
 8008b1c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008b1e:	4b03      	ldr	r3, [pc, #12]	@ (8008b2c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr
 8008b2c:	200000dc 	.word	0x200000dc

08008b30 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	4603      	mov	r3, r0
 8008b38:	6039      	str	r1, [r7, #0]
 8008b3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b3c:	79fb      	ldrb	r3, [r7, #7]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d105      	bne.n	8008b4e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b42:	683a      	ldr	r2, [r7, #0]
 8008b44:	4907      	ldr	r1, [pc, #28]	@ (8008b64 <USBD_FS_ProductStrDescriptor+0x34>)
 8008b46:	4808      	ldr	r0, [pc, #32]	@ (8008b68 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b48:	f7ff fdec 	bl	8008724 <USBD_GetString>
 8008b4c:	e004      	b.n	8008b58 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b4e:	683a      	ldr	r2, [r7, #0]
 8008b50:	4904      	ldr	r1, [pc, #16]	@ (8008b64 <USBD_FS_ProductStrDescriptor+0x34>)
 8008b52:	4805      	ldr	r0, [pc, #20]	@ (8008b68 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b54:	f7ff fde6 	bl	8008724 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b58:	4b02      	ldr	r3, [pc, #8]	@ (8008b64 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3708      	adds	r7, #8
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	2000153c 	.word	0x2000153c
 8008b68:	08009e00 	.word	0x08009e00

08008b6c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	4603      	mov	r3, r0
 8008b74:	6039      	str	r1, [r7, #0]
 8008b76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008b78:	683a      	ldr	r2, [r7, #0]
 8008b7a:	4904      	ldr	r1, [pc, #16]	@ (8008b8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008b7c:	4804      	ldr	r0, [pc, #16]	@ (8008b90 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008b7e:	f7ff fdd1 	bl	8008724 <USBD_GetString>
  return USBD_StrDesc;
 8008b82:	4b02      	ldr	r3, [pc, #8]	@ (8008b8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3708      	adds	r7, #8
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	2000153c 	.word	0x2000153c
 8008b90:	08009e18 	.word	0x08009e18

08008b94 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	6039      	str	r1, [r7, #0]
 8008b9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	221a      	movs	r2, #26
 8008ba4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008ba6:	f000 f843 	bl	8008c30 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008baa:	4b02      	ldr	r3, [pc, #8]	@ (8008bb4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3708      	adds	r7, #8
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	200000e0 	.word	0x200000e0

08008bb8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	6039      	str	r1, [r7, #0]
 8008bc2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008bc4:	79fb      	ldrb	r3, [r7, #7]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d105      	bne.n	8008bd6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008bca:	683a      	ldr	r2, [r7, #0]
 8008bcc:	4907      	ldr	r1, [pc, #28]	@ (8008bec <USBD_FS_ConfigStrDescriptor+0x34>)
 8008bce:	4808      	ldr	r0, [pc, #32]	@ (8008bf0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008bd0:	f7ff fda8 	bl	8008724 <USBD_GetString>
 8008bd4:	e004      	b.n	8008be0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008bd6:	683a      	ldr	r2, [r7, #0]
 8008bd8:	4904      	ldr	r1, [pc, #16]	@ (8008bec <USBD_FS_ConfigStrDescriptor+0x34>)
 8008bda:	4805      	ldr	r0, [pc, #20]	@ (8008bf0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008bdc:	f7ff fda2 	bl	8008724 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008be0:	4b02      	ldr	r3, [pc, #8]	@ (8008bec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3708      	adds	r7, #8
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	2000153c 	.word	0x2000153c
 8008bf0:	08009e2c 	.word	0x08009e2c

08008bf4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	6039      	str	r1, [r7, #0]
 8008bfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c00:	79fb      	ldrb	r3, [r7, #7]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d105      	bne.n	8008c12 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c06:	683a      	ldr	r2, [r7, #0]
 8008c08:	4907      	ldr	r1, [pc, #28]	@ (8008c28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c0a:	4808      	ldr	r0, [pc, #32]	@ (8008c2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c0c:	f7ff fd8a 	bl	8008724 <USBD_GetString>
 8008c10:	e004      	b.n	8008c1c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c12:	683a      	ldr	r2, [r7, #0]
 8008c14:	4904      	ldr	r1, [pc, #16]	@ (8008c28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c16:	4805      	ldr	r0, [pc, #20]	@ (8008c2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c18:	f7ff fd84 	bl	8008724 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c1c:	4b02      	ldr	r3, [pc, #8]	@ (8008c28 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3708      	adds	r7, #8
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	2000153c 	.word	0x2000153c
 8008c2c:	08009e38 	.word	0x08009e38

08008c30 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008c36:	4b0f      	ldr	r3, [pc, #60]	@ (8008c74 <Get_SerialNum+0x44>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8008c78 <Get_SerialNum+0x48>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008c42:	4b0e      	ldr	r3, [pc, #56]	@ (8008c7c <Get_SerialNum+0x4c>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d009      	beq.n	8008c6a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008c56:	2208      	movs	r2, #8
 8008c58:	4909      	ldr	r1, [pc, #36]	@ (8008c80 <Get_SerialNum+0x50>)
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	f000 f814 	bl	8008c88 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008c60:	2204      	movs	r2, #4
 8008c62:	4908      	ldr	r1, [pc, #32]	@ (8008c84 <Get_SerialNum+0x54>)
 8008c64:	68b8      	ldr	r0, [r7, #8]
 8008c66:	f000 f80f 	bl	8008c88 <IntToUnicode>
  }
}
 8008c6a:	bf00      	nop
 8008c6c:	3710      	adds	r7, #16
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	1fff7a10 	.word	0x1fff7a10
 8008c78:	1fff7a14 	.word	0x1fff7a14
 8008c7c:	1fff7a18 	.word	0x1fff7a18
 8008c80:	200000e2 	.word	0x200000e2
 8008c84:	200000f2 	.word	0x200000f2

08008c88 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b087      	sub	sp, #28
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	4613      	mov	r3, r2
 8008c94:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008c96:	2300      	movs	r3, #0
 8008c98:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	75fb      	strb	r3, [r7, #23]
 8008c9e:	e027      	b.n	8008cf0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	0f1b      	lsrs	r3, r3, #28
 8008ca4:	2b09      	cmp	r3, #9
 8008ca6:	d80b      	bhi.n	8008cc0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	0f1b      	lsrs	r3, r3, #28
 8008cac:	b2da      	uxtb	r2, r3
 8008cae:	7dfb      	ldrb	r3, [r7, #23]
 8008cb0:	005b      	lsls	r3, r3, #1
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	440b      	add	r3, r1
 8008cb8:	3230      	adds	r2, #48	@ 0x30
 8008cba:	b2d2      	uxtb	r2, r2
 8008cbc:	701a      	strb	r2, [r3, #0]
 8008cbe:	e00a      	b.n	8008cd6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	0f1b      	lsrs	r3, r3, #28
 8008cc4:	b2da      	uxtb	r2, r3
 8008cc6:	7dfb      	ldrb	r3, [r7, #23]
 8008cc8:	005b      	lsls	r3, r3, #1
 8008cca:	4619      	mov	r1, r3
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	440b      	add	r3, r1
 8008cd0:	3237      	adds	r2, #55	@ 0x37
 8008cd2:	b2d2      	uxtb	r2, r2
 8008cd4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	011b      	lsls	r3, r3, #4
 8008cda:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008cdc:	7dfb      	ldrb	r3, [r7, #23]
 8008cde:	005b      	lsls	r3, r3, #1
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	68ba      	ldr	r2, [r7, #8]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008cea:	7dfb      	ldrb	r3, [r7, #23]
 8008cec:	3301      	adds	r3, #1
 8008cee:	75fb      	strb	r3, [r7, #23]
 8008cf0:	7dfa      	ldrb	r2, [r7, #23]
 8008cf2:	79fb      	ldrb	r3, [r7, #7]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d3d3      	bcc.n	8008ca0 <IntToUnicode+0x18>
  }
}
 8008cf8:	bf00      	nop
 8008cfa:	bf00      	nop
 8008cfc:	371c      	adds	r7, #28
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr
	...

08008d08 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b08a      	sub	sp, #40	@ 0x28
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d10:	f107 0314 	add.w	r3, r7, #20
 8008d14:	2200      	movs	r2, #0
 8008d16:	601a      	str	r2, [r3, #0]
 8008d18:	605a      	str	r2, [r3, #4]
 8008d1a:	609a      	str	r2, [r3, #8]
 8008d1c:	60da      	str	r2, [r3, #12]
 8008d1e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d28:	d13a      	bne.n	8008da0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	613b      	str	r3, [r7, #16]
 8008d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8008da8 <HAL_PCD_MspInit+0xa0>)
 8008d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d32:	4a1d      	ldr	r2, [pc, #116]	@ (8008da8 <HAL_PCD_MspInit+0xa0>)
 8008d34:	f043 0301 	orr.w	r3, r3, #1
 8008d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8008d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8008da8 <HAL_PCD_MspInit+0xa0>)
 8008d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d3e:	f003 0301 	and.w	r3, r3, #1
 8008d42:	613b      	str	r3, [r7, #16]
 8008d44:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008d46:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d4c:	2302      	movs	r3, #2
 8008d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d50:	2300      	movs	r3, #0
 8008d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d54:	2303      	movs	r3, #3
 8008d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d58:	230a      	movs	r3, #10
 8008d5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d5c:	f107 0314 	add.w	r3, r7, #20
 8008d60:	4619      	mov	r1, r3
 8008d62:	4812      	ldr	r0, [pc, #72]	@ (8008dac <HAL_PCD_MspInit+0xa4>)
 8008d64:	f7f8 fbb8 	bl	80014d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d68:	4b0f      	ldr	r3, [pc, #60]	@ (8008da8 <HAL_PCD_MspInit+0xa0>)
 8008d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d6c:	4a0e      	ldr	r2, [pc, #56]	@ (8008da8 <HAL_PCD_MspInit+0xa0>)
 8008d6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d72:	6353      	str	r3, [r2, #52]	@ 0x34
 8008d74:	2300      	movs	r3, #0
 8008d76:	60fb      	str	r3, [r7, #12]
 8008d78:	4b0b      	ldr	r3, [pc, #44]	@ (8008da8 <HAL_PCD_MspInit+0xa0>)
 8008d7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8008da8 <HAL_PCD_MspInit+0xa0>)
 8008d7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008d82:	6453      	str	r3, [r2, #68]	@ 0x44
 8008d84:	4b08      	ldr	r3, [pc, #32]	@ (8008da8 <HAL_PCD_MspInit+0xa0>)
 8008d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d8c:	60fb      	str	r3, [r7, #12]
 8008d8e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008d90:	2200      	movs	r2, #0
 8008d92:	2100      	movs	r1, #0
 8008d94:	2043      	movs	r0, #67	@ 0x43
 8008d96:	f7f8 fad6 	bl	8001346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008d9a:	2043      	movs	r0, #67	@ 0x43
 8008d9c:	f7f8 faef 	bl	800137e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008da0:	bf00      	nop
 8008da2:	3728      	adds	r7, #40	@ 0x28
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	40023800 	.word	0x40023800
 8008dac:	40020000 	.word	0x40020000

08008db0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	4610      	mov	r0, r2
 8008dc8:	f7fe fb49 	bl	800745e <USBD_LL_SetupStage>
}
 8008dcc:	bf00      	nop
 8008dce:	3708      	adds	r7, #8
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	460b      	mov	r3, r1
 8008dde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008de6:	78fa      	ldrb	r2, [r7, #3]
 8008de8:	6879      	ldr	r1, [r7, #4]
 8008dea:	4613      	mov	r3, r2
 8008dec:	00db      	lsls	r3, r3, #3
 8008dee:	4413      	add	r3, r2
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	440b      	add	r3, r1
 8008df4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	78fb      	ldrb	r3, [r7, #3]
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	f7fe fb83 	bl	8007508 <USBD_LL_DataOutStage>
}
 8008e02:	bf00      	nop
 8008e04:	3708      	adds	r7, #8
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b082      	sub	sp, #8
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
 8008e12:	460b      	mov	r3, r1
 8008e14:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008e1c:	78fa      	ldrb	r2, [r7, #3]
 8008e1e:	6879      	ldr	r1, [r7, #4]
 8008e20:	4613      	mov	r3, r2
 8008e22:	00db      	lsls	r3, r3, #3
 8008e24:	4413      	add	r3, r2
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	440b      	add	r3, r1
 8008e2a:	3320      	adds	r3, #32
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	78fb      	ldrb	r3, [r7, #3]
 8008e30:	4619      	mov	r1, r3
 8008e32:	f7fe fc1c 	bl	800766e <USBD_LL_DataInStage>
}
 8008e36:	bf00      	nop
 8008e38:	3708      	adds	r7, #8
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b082      	sub	sp, #8
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7fe fd56 	bl	80078fe <USBD_LL_SOF>
}
 8008e52:	bf00      	nop
 8008e54:	3708      	adds	r7, #8
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b084      	sub	sp, #16
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e62:	2301      	movs	r3, #1
 8008e64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	79db      	ldrb	r3, [r3, #7]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d102      	bne.n	8008e74 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	73fb      	strb	r3, [r7, #15]
 8008e72:	e008      	b.n	8008e86 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	79db      	ldrb	r3, [r3, #7]
 8008e78:	2b02      	cmp	r3, #2
 8008e7a:	d102      	bne.n	8008e82 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	73fb      	strb	r3, [r7, #15]
 8008e80:	e001      	b.n	8008e86 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008e82:	f7f7 fd73 	bl	800096c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e8c:	7bfa      	ldrb	r2, [r7, #15]
 8008e8e:	4611      	mov	r1, r2
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7fe fcf0 	bl	8007876 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f7fe fc98 	bl	80077d2 <USBD_LL_Reset>
}
 8008ea2:	bf00      	nop
 8008ea4:	3710      	adds	r7, #16
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
	...

08008eac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7fe fceb 	bl	8007896 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	6812      	ldr	r2, [r2, #0]
 8008ece:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008ed2:	f043 0301 	orr.w	r3, r3, #1
 8008ed6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	7adb      	ldrb	r3, [r3, #11]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d005      	beq.n	8008eec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ee0:	4b04      	ldr	r3, [pc, #16]	@ (8008ef4 <HAL_PCD_SuspendCallback+0x48>)
 8008ee2:	691b      	ldr	r3, [r3, #16]
 8008ee4:	4a03      	ldr	r2, [pc, #12]	@ (8008ef4 <HAL_PCD_SuspendCallback+0x48>)
 8008ee6:	f043 0306 	orr.w	r3, r3, #6
 8008eea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008eec:	bf00      	nop
 8008eee:	3708      	adds	r7, #8
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}
 8008ef4:	e000ed00 	.word	0xe000ed00

08008ef8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7fe fce1 	bl	80078ce <USBD_LL_Resume>
}
 8008f0c:	bf00      	nop
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f26:	78fa      	ldrb	r2, [r7, #3]
 8008f28:	4611      	mov	r1, r2
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7fe fd39 	bl	80079a2 <USBD_LL_IsoOUTIncomplete>
}
 8008f30:	bf00      	nop
 8008f32:	3708      	adds	r7, #8
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	460b      	mov	r3, r1
 8008f42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f4a:	78fa      	ldrb	r2, [r7, #3]
 8008f4c:	4611      	mov	r1, r2
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7fe fcf5 	bl	800793e <USBD_LL_IsoINIncomplete>
}
 8008f54:	bf00      	nop
 8008f56:	3708      	adds	r7, #8
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fe fd4b 	bl	8007a06 <USBD_LL_DevConnected>
}
 8008f70:	bf00      	nop
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7fe fd48 	bl	8007a1c <USBD_LL_DevDisconnected>
}
 8008f8c:	bf00      	nop
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d13c      	bne.n	800901e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008fa4:	4a20      	ldr	r2, [pc, #128]	@ (8009028 <USBD_LL_Init+0x94>)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	4a1e      	ldr	r2, [pc, #120]	@ (8009028 <USBD_LL_Init+0x94>)
 8008fb0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8009028 <USBD_LL_Init+0x94>)
 8008fb6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008fba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8009028 <USBD_LL_Init+0x94>)
 8008fbe:	2204      	movs	r2, #4
 8008fc0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008fc2:	4b19      	ldr	r3, [pc, #100]	@ (8009028 <USBD_LL_Init+0x94>)
 8008fc4:	2202      	movs	r2, #2
 8008fc6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008fc8:	4b17      	ldr	r3, [pc, #92]	@ (8009028 <USBD_LL_Init+0x94>)
 8008fca:	2200      	movs	r2, #0
 8008fcc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008fce:	4b16      	ldr	r3, [pc, #88]	@ (8009028 <USBD_LL_Init+0x94>)
 8008fd0:	2202      	movs	r2, #2
 8008fd2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008fd4:	4b14      	ldr	r3, [pc, #80]	@ (8009028 <USBD_LL_Init+0x94>)
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008fda:	4b13      	ldr	r3, [pc, #76]	@ (8009028 <USBD_LL_Init+0x94>)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008fe0:	4b11      	ldr	r3, [pc, #68]	@ (8009028 <USBD_LL_Init+0x94>)
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008fe6:	4b10      	ldr	r3, [pc, #64]	@ (8009028 <USBD_LL_Init+0x94>)
 8008fe8:	2200      	movs	r2, #0
 8008fea:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008fec:	4b0e      	ldr	r3, [pc, #56]	@ (8009028 <USBD_LL_Init+0x94>)
 8008fee:	2200      	movs	r2, #0
 8008ff0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008ff2:	480d      	ldr	r0, [pc, #52]	@ (8009028 <USBD_LL_Init+0x94>)
 8008ff4:	f7f8 fc25 	bl	8001842 <HAL_PCD_Init>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d001      	beq.n	8009002 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008ffe:	f7f7 fcb5 	bl	800096c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009002:	2180      	movs	r1, #128	@ 0x80
 8009004:	4808      	ldr	r0, [pc, #32]	@ (8009028 <USBD_LL_Init+0x94>)
 8009006:	f7f9 fe52 	bl	8002cae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800900a:	2240      	movs	r2, #64	@ 0x40
 800900c:	2100      	movs	r1, #0
 800900e:	4806      	ldr	r0, [pc, #24]	@ (8009028 <USBD_LL_Init+0x94>)
 8009010:	f7f9 fe06 	bl	8002c20 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009014:	2280      	movs	r2, #128	@ 0x80
 8009016:	2101      	movs	r1, #1
 8009018:	4803      	ldr	r0, [pc, #12]	@ (8009028 <USBD_LL_Init+0x94>)
 800901a:	f7f9 fe01 	bl	8002c20 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800901e:	2300      	movs	r3, #0
}
 8009020:	4618      	mov	r0, r3
 8009022:	3708      	adds	r7, #8
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	2000173c 	.word	0x2000173c

0800902c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009034:	2300      	movs	r3, #0
 8009036:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009038:	2300      	movs	r3, #0
 800903a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009042:	4618      	mov	r0, r3
 8009044:	f7f8 fd0c 	bl	8001a60 <HAL_PCD_Start>
 8009048:	4603      	mov	r3, r0
 800904a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800904c:	7bfb      	ldrb	r3, [r7, #15]
 800904e:	4618      	mov	r0, r3
 8009050:	f000 f942 	bl	80092d8 <USBD_Get_USB_Status>
 8009054:	4603      	mov	r3, r0
 8009056:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009058:	7bbb      	ldrb	r3, [r7, #14]
}
 800905a:	4618      	mov	r0, r3
 800905c:	3710      	adds	r7, #16
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b084      	sub	sp, #16
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
 800906a:	4608      	mov	r0, r1
 800906c:	4611      	mov	r1, r2
 800906e:	461a      	mov	r2, r3
 8009070:	4603      	mov	r3, r0
 8009072:	70fb      	strb	r3, [r7, #3]
 8009074:	460b      	mov	r3, r1
 8009076:	70bb      	strb	r3, [r7, #2]
 8009078:	4613      	mov	r3, r2
 800907a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800907c:	2300      	movs	r3, #0
 800907e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009080:	2300      	movs	r3, #0
 8009082:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800908a:	78bb      	ldrb	r3, [r7, #2]
 800908c:	883a      	ldrh	r2, [r7, #0]
 800908e:	78f9      	ldrb	r1, [r7, #3]
 8009090:	f7f9 f9e0 	bl	8002454 <HAL_PCD_EP_Open>
 8009094:	4603      	mov	r3, r0
 8009096:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009098:	7bfb      	ldrb	r3, [r7, #15]
 800909a:	4618      	mov	r0, r3
 800909c:	f000 f91c 	bl	80092d8 <USBD_Get_USB_Status>
 80090a0:	4603      	mov	r3, r0
 80090a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b084      	sub	sp, #16
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
 80090b6:	460b      	mov	r3, r1
 80090b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090ba:	2300      	movs	r3, #0
 80090bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090be:	2300      	movs	r3, #0
 80090c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80090c8:	78fa      	ldrb	r2, [r7, #3]
 80090ca:	4611      	mov	r1, r2
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7f9 fa2b 	bl	8002528 <HAL_PCD_EP_Close>
 80090d2:	4603      	mov	r3, r0
 80090d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090d6:	7bfb      	ldrb	r3, [r7, #15]
 80090d8:	4618      	mov	r0, r3
 80090da:	f000 f8fd 	bl	80092d8 <USBD_Get_USB_Status>
 80090de:	4603      	mov	r3, r0
 80090e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3710      	adds	r7, #16
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	460b      	mov	r3, r1
 80090f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090f8:	2300      	movs	r3, #0
 80090fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090fc:	2300      	movs	r3, #0
 80090fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009106:	78fa      	ldrb	r2, [r7, #3]
 8009108:	4611      	mov	r1, r2
 800910a:	4618      	mov	r0, r3
 800910c:	f7f9 fae3 	bl	80026d6 <HAL_PCD_EP_SetStall>
 8009110:	4603      	mov	r3, r0
 8009112:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009114:	7bfb      	ldrb	r3, [r7, #15]
 8009116:	4618      	mov	r0, r3
 8009118:	f000 f8de 	bl	80092d8 <USBD_Get_USB_Status>
 800911c:	4603      	mov	r3, r0
 800911e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009120:	7bbb      	ldrb	r3, [r7, #14]
}
 8009122:	4618      	mov	r0, r3
 8009124:	3710      	adds	r7, #16
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b084      	sub	sp, #16
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
 8009132:	460b      	mov	r3, r1
 8009134:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009136:	2300      	movs	r3, #0
 8009138:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800913a:	2300      	movs	r3, #0
 800913c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009144:	78fa      	ldrb	r2, [r7, #3]
 8009146:	4611      	mov	r1, r2
 8009148:	4618      	mov	r0, r3
 800914a:	f7f9 fb27 	bl	800279c <HAL_PCD_EP_ClrStall>
 800914e:	4603      	mov	r3, r0
 8009150:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009152:	7bfb      	ldrb	r3, [r7, #15]
 8009154:	4618      	mov	r0, r3
 8009156:	f000 f8bf 	bl	80092d8 <USBD_Get_USB_Status>
 800915a:	4603      	mov	r3, r0
 800915c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800915e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009160:	4618      	mov	r0, r3
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009168:	b480      	push	{r7}
 800916a:	b085      	sub	sp, #20
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	460b      	mov	r3, r1
 8009172:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800917a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800917c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009180:	2b00      	cmp	r3, #0
 8009182:	da0b      	bge.n	800919c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009184:	78fb      	ldrb	r3, [r7, #3]
 8009186:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800918a:	68f9      	ldr	r1, [r7, #12]
 800918c:	4613      	mov	r3, r2
 800918e:	00db      	lsls	r3, r3, #3
 8009190:	4413      	add	r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	440b      	add	r3, r1
 8009196:	3316      	adds	r3, #22
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	e00b      	b.n	80091b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800919c:	78fb      	ldrb	r3, [r7, #3]
 800919e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80091a2:	68f9      	ldr	r1, [r7, #12]
 80091a4:	4613      	mov	r3, r2
 80091a6:	00db      	lsls	r3, r3, #3
 80091a8:	4413      	add	r3, r2
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	440b      	add	r3, r1
 80091ae:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80091b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3714      	adds	r7, #20
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	460b      	mov	r3, r1
 80091ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091cc:	2300      	movs	r3, #0
 80091ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091d0:	2300      	movs	r3, #0
 80091d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80091da:	78fa      	ldrb	r2, [r7, #3]
 80091dc:	4611      	mov	r1, r2
 80091de:	4618      	mov	r0, r3
 80091e0:	f7f9 f914 	bl	800240c <HAL_PCD_SetAddress>
 80091e4:	4603      	mov	r3, r0
 80091e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091e8:	7bfb      	ldrb	r3, [r7, #15]
 80091ea:	4618      	mov	r0, r3
 80091ec:	f000 f874 	bl	80092d8 <USBD_Get_USB_Status>
 80091f0:	4603      	mov	r3, r0
 80091f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3710      	adds	r7, #16
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}

080091fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80091fe:	b580      	push	{r7, lr}
 8009200:	b086      	sub	sp, #24
 8009202:	af00      	add	r7, sp, #0
 8009204:	60f8      	str	r0, [r7, #12]
 8009206:	607a      	str	r2, [r7, #4]
 8009208:	603b      	str	r3, [r7, #0]
 800920a:	460b      	mov	r3, r1
 800920c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800920e:	2300      	movs	r3, #0
 8009210:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009212:	2300      	movs	r3, #0
 8009214:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800921c:	7af9      	ldrb	r1, [r7, #11]
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	f7f9 fa1e 	bl	8002662 <HAL_PCD_EP_Transmit>
 8009226:	4603      	mov	r3, r0
 8009228:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800922a:	7dfb      	ldrb	r3, [r7, #23]
 800922c:	4618      	mov	r0, r3
 800922e:	f000 f853 	bl	80092d8 <USBD_Get_USB_Status>
 8009232:	4603      	mov	r3, r0
 8009234:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009236:	7dbb      	ldrb	r3, [r7, #22]
}
 8009238:	4618      	mov	r0, r3
 800923a:	3718      	adds	r7, #24
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b086      	sub	sp, #24
 8009244:	af00      	add	r7, sp, #0
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	607a      	str	r2, [r7, #4]
 800924a:	603b      	str	r3, [r7, #0]
 800924c:	460b      	mov	r3, r1
 800924e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009250:	2300      	movs	r3, #0
 8009252:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009254:	2300      	movs	r3, #0
 8009256:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800925e:	7af9      	ldrb	r1, [r7, #11]
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	f7f9 f9aa 	bl	80025bc <HAL_PCD_EP_Receive>
 8009268:	4603      	mov	r3, r0
 800926a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800926c:	7dfb      	ldrb	r3, [r7, #23]
 800926e:	4618      	mov	r0, r3
 8009270:	f000 f832 	bl	80092d8 <USBD_Get_USB_Status>
 8009274:	4603      	mov	r3, r0
 8009276:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009278:	7dbb      	ldrb	r3, [r7, #22]
}
 800927a:	4618      	mov	r0, r3
 800927c:	3718      	adds	r7, #24
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}

08009282 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b082      	sub	sp, #8
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
 800928a:	460b      	mov	r3, r1
 800928c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009294:	78fa      	ldrb	r2, [r7, #3]
 8009296:	4611      	mov	r1, r2
 8009298:	4618      	mov	r0, r3
 800929a:	f7f9 f9ca 	bl	8002632 <HAL_PCD_EP_GetRxCount>
 800929e:	4603      	mov	r3, r0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80092b0:	4b03      	ldr	r3, [pc, #12]	@ (80092c0 <USBD_static_malloc+0x18>)
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	370c      	adds	r7, #12
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr
 80092be:	bf00      	nop
 80092c0:	20001c20 	.word	0x20001c20

080092c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]

}
 80092cc:	bf00      	nop
 80092ce:	370c      	adds	r7, #12
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr

080092d8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80092d8:	b480      	push	{r7}
 80092da:	b085      	sub	sp, #20
 80092dc:	af00      	add	r7, sp, #0
 80092de:	4603      	mov	r3, r0
 80092e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092e2:	2300      	movs	r3, #0
 80092e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80092e6:	79fb      	ldrb	r3, [r7, #7]
 80092e8:	2b03      	cmp	r3, #3
 80092ea:	d817      	bhi.n	800931c <USBD_Get_USB_Status+0x44>
 80092ec:	a201      	add	r2, pc, #4	@ (adr r2, 80092f4 <USBD_Get_USB_Status+0x1c>)
 80092ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f2:	bf00      	nop
 80092f4:	08009305 	.word	0x08009305
 80092f8:	0800930b 	.word	0x0800930b
 80092fc:	08009311 	.word	0x08009311
 8009300:	08009317 	.word	0x08009317
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009304:	2300      	movs	r3, #0
 8009306:	73fb      	strb	r3, [r7, #15]
    break;
 8009308:	e00b      	b.n	8009322 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800930a:	2303      	movs	r3, #3
 800930c:	73fb      	strb	r3, [r7, #15]
    break;
 800930e:	e008      	b.n	8009322 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009310:	2301      	movs	r3, #1
 8009312:	73fb      	strb	r3, [r7, #15]
    break;
 8009314:	e005      	b.n	8009322 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009316:	2303      	movs	r3, #3
 8009318:	73fb      	strb	r3, [r7, #15]
    break;
 800931a:	e002      	b.n	8009322 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800931c:	2303      	movs	r3, #3
 800931e:	73fb      	strb	r3, [r7, #15]
    break;
 8009320:	bf00      	nop
  }
  return usb_status;
 8009322:	7bfb      	ldrb	r3, [r7, #15]
}
 8009324:	4618      	mov	r0, r3
 8009326:	3714      	adds	r7, #20
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <atoi>:
 8009330:	220a      	movs	r2, #10
 8009332:	2100      	movs	r1, #0
 8009334:	f000 b87a 	b.w	800942c <strtol>

08009338 <_strtol_l.constprop.0>:
 8009338:	2b24      	cmp	r3, #36	@ 0x24
 800933a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800933e:	4686      	mov	lr, r0
 8009340:	4690      	mov	r8, r2
 8009342:	d801      	bhi.n	8009348 <_strtol_l.constprop.0+0x10>
 8009344:	2b01      	cmp	r3, #1
 8009346:	d106      	bne.n	8009356 <_strtol_l.constprop.0+0x1e>
 8009348:	f000 fac0 	bl	80098cc <__errno>
 800934c:	2316      	movs	r3, #22
 800934e:	6003      	str	r3, [r0, #0]
 8009350:	2000      	movs	r0, #0
 8009352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009356:	4834      	ldr	r0, [pc, #208]	@ (8009428 <_strtol_l.constprop.0+0xf0>)
 8009358:	460d      	mov	r5, r1
 800935a:	462a      	mov	r2, r5
 800935c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009360:	5d06      	ldrb	r6, [r0, r4]
 8009362:	f016 0608 	ands.w	r6, r6, #8
 8009366:	d1f8      	bne.n	800935a <_strtol_l.constprop.0+0x22>
 8009368:	2c2d      	cmp	r4, #45	@ 0x2d
 800936a:	d12d      	bne.n	80093c8 <_strtol_l.constprop.0+0x90>
 800936c:	782c      	ldrb	r4, [r5, #0]
 800936e:	2601      	movs	r6, #1
 8009370:	1c95      	adds	r5, r2, #2
 8009372:	f033 0210 	bics.w	r2, r3, #16
 8009376:	d109      	bne.n	800938c <_strtol_l.constprop.0+0x54>
 8009378:	2c30      	cmp	r4, #48	@ 0x30
 800937a:	d12a      	bne.n	80093d2 <_strtol_l.constprop.0+0x9a>
 800937c:	782a      	ldrb	r2, [r5, #0]
 800937e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009382:	2a58      	cmp	r2, #88	@ 0x58
 8009384:	d125      	bne.n	80093d2 <_strtol_l.constprop.0+0x9a>
 8009386:	786c      	ldrb	r4, [r5, #1]
 8009388:	2310      	movs	r3, #16
 800938a:	3502      	adds	r5, #2
 800938c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009390:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009394:	2200      	movs	r2, #0
 8009396:	fbbc f9f3 	udiv	r9, ip, r3
 800939a:	4610      	mov	r0, r2
 800939c:	fb03 ca19 	mls	sl, r3, r9, ip
 80093a0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80093a4:	2f09      	cmp	r7, #9
 80093a6:	d81b      	bhi.n	80093e0 <_strtol_l.constprop.0+0xa8>
 80093a8:	463c      	mov	r4, r7
 80093aa:	42a3      	cmp	r3, r4
 80093ac:	dd27      	ble.n	80093fe <_strtol_l.constprop.0+0xc6>
 80093ae:	1c57      	adds	r7, r2, #1
 80093b0:	d007      	beq.n	80093c2 <_strtol_l.constprop.0+0x8a>
 80093b2:	4581      	cmp	r9, r0
 80093b4:	d320      	bcc.n	80093f8 <_strtol_l.constprop.0+0xc0>
 80093b6:	d101      	bne.n	80093bc <_strtol_l.constprop.0+0x84>
 80093b8:	45a2      	cmp	sl, r4
 80093ba:	db1d      	blt.n	80093f8 <_strtol_l.constprop.0+0xc0>
 80093bc:	fb00 4003 	mla	r0, r0, r3, r4
 80093c0:	2201      	movs	r2, #1
 80093c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80093c6:	e7eb      	b.n	80093a0 <_strtol_l.constprop.0+0x68>
 80093c8:	2c2b      	cmp	r4, #43	@ 0x2b
 80093ca:	bf04      	itt	eq
 80093cc:	782c      	ldrbeq	r4, [r5, #0]
 80093ce:	1c95      	addeq	r5, r2, #2
 80093d0:	e7cf      	b.n	8009372 <_strtol_l.constprop.0+0x3a>
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d1da      	bne.n	800938c <_strtol_l.constprop.0+0x54>
 80093d6:	2c30      	cmp	r4, #48	@ 0x30
 80093d8:	bf0c      	ite	eq
 80093da:	2308      	moveq	r3, #8
 80093dc:	230a      	movne	r3, #10
 80093de:	e7d5      	b.n	800938c <_strtol_l.constprop.0+0x54>
 80093e0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80093e4:	2f19      	cmp	r7, #25
 80093e6:	d801      	bhi.n	80093ec <_strtol_l.constprop.0+0xb4>
 80093e8:	3c37      	subs	r4, #55	@ 0x37
 80093ea:	e7de      	b.n	80093aa <_strtol_l.constprop.0+0x72>
 80093ec:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80093f0:	2f19      	cmp	r7, #25
 80093f2:	d804      	bhi.n	80093fe <_strtol_l.constprop.0+0xc6>
 80093f4:	3c57      	subs	r4, #87	@ 0x57
 80093f6:	e7d8      	b.n	80093aa <_strtol_l.constprop.0+0x72>
 80093f8:	f04f 32ff 	mov.w	r2, #4294967295
 80093fc:	e7e1      	b.n	80093c2 <_strtol_l.constprop.0+0x8a>
 80093fe:	1c53      	adds	r3, r2, #1
 8009400:	d108      	bne.n	8009414 <_strtol_l.constprop.0+0xdc>
 8009402:	2322      	movs	r3, #34	@ 0x22
 8009404:	f8ce 3000 	str.w	r3, [lr]
 8009408:	4660      	mov	r0, ip
 800940a:	f1b8 0f00 	cmp.w	r8, #0
 800940e:	d0a0      	beq.n	8009352 <_strtol_l.constprop.0+0x1a>
 8009410:	1e69      	subs	r1, r5, #1
 8009412:	e006      	b.n	8009422 <_strtol_l.constprop.0+0xea>
 8009414:	b106      	cbz	r6, 8009418 <_strtol_l.constprop.0+0xe0>
 8009416:	4240      	negs	r0, r0
 8009418:	f1b8 0f00 	cmp.w	r8, #0
 800941c:	d099      	beq.n	8009352 <_strtol_l.constprop.0+0x1a>
 800941e:	2a00      	cmp	r2, #0
 8009420:	d1f6      	bne.n	8009410 <_strtol_l.constprop.0+0xd8>
 8009422:	f8c8 1000 	str.w	r1, [r8]
 8009426:	e794      	b.n	8009352 <_strtol_l.constprop.0+0x1a>
 8009428:	08009e61 	.word	0x08009e61

0800942c <strtol>:
 800942c:	4613      	mov	r3, r2
 800942e:	460a      	mov	r2, r1
 8009430:	4601      	mov	r1, r0
 8009432:	4802      	ldr	r0, [pc, #8]	@ (800943c <strtol+0x10>)
 8009434:	6800      	ldr	r0, [r0, #0]
 8009436:	f7ff bf7f 	b.w	8009338 <_strtol_l.constprop.0>
 800943a:	bf00      	nop
 800943c:	20000108 	.word	0x20000108

08009440 <std>:
 8009440:	2300      	movs	r3, #0
 8009442:	b510      	push	{r4, lr}
 8009444:	4604      	mov	r4, r0
 8009446:	e9c0 3300 	strd	r3, r3, [r0]
 800944a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800944e:	6083      	str	r3, [r0, #8]
 8009450:	8181      	strh	r1, [r0, #12]
 8009452:	6643      	str	r3, [r0, #100]	@ 0x64
 8009454:	81c2      	strh	r2, [r0, #14]
 8009456:	6183      	str	r3, [r0, #24]
 8009458:	4619      	mov	r1, r3
 800945a:	2208      	movs	r2, #8
 800945c:	305c      	adds	r0, #92	@ 0x5c
 800945e:	f000 f9e7 	bl	8009830 <memset>
 8009462:	4b0d      	ldr	r3, [pc, #52]	@ (8009498 <std+0x58>)
 8009464:	6263      	str	r3, [r4, #36]	@ 0x24
 8009466:	4b0d      	ldr	r3, [pc, #52]	@ (800949c <std+0x5c>)
 8009468:	62a3      	str	r3, [r4, #40]	@ 0x28
 800946a:	4b0d      	ldr	r3, [pc, #52]	@ (80094a0 <std+0x60>)
 800946c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800946e:	4b0d      	ldr	r3, [pc, #52]	@ (80094a4 <std+0x64>)
 8009470:	6323      	str	r3, [r4, #48]	@ 0x30
 8009472:	4b0d      	ldr	r3, [pc, #52]	@ (80094a8 <std+0x68>)
 8009474:	6224      	str	r4, [r4, #32]
 8009476:	429c      	cmp	r4, r3
 8009478:	d006      	beq.n	8009488 <std+0x48>
 800947a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800947e:	4294      	cmp	r4, r2
 8009480:	d002      	beq.n	8009488 <std+0x48>
 8009482:	33d0      	adds	r3, #208	@ 0xd0
 8009484:	429c      	cmp	r4, r3
 8009486:	d105      	bne.n	8009494 <std+0x54>
 8009488:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800948c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009490:	f000 ba46 	b.w	8009920 <__retarget_lock_init_recursive>
 8009494:	bd10      	pop	{r4, pc}
 8009496:	bf00      	nop
 8009498:	08009681 	.word	0x08009681
 800949c:	080096a3 	.word	0x080096a3
 80094a0:	080096db 	.word	0x080096db
 80094a4:	080096ff 	.word	0x080096ff
 80094a8:	20001e40 	.word	0x20001e40

080094ac <stdio_exit_handler>:
 80094ac:	4a02      	ldr	r2, [pc, #8]	@ (80094b8 <stdio_exit_handler+0xc>)
 80094ae:	4903      	ldr	r1, [pc, #12]	@ (80094bc <stdio_exit_handler+0x10>)
 80094b0:	4803      	ldr	r0, [pc, #12]	@ (80094c0 <stdio_exit_handler+0x14>)
 80094b2:	f000 b869 	b.w	8009588 <_fwalk_sglue>
 80094b6:	bf00      	nop
 80094b8:	200000fc 	.word	0x200000fc
 80094bc:	08009c21 	.word	0x08009c21
 80094c0:	2000010c 	.word	0x2000010c

080094c4 <cleanup_stdio>:
 80094c4:	6841      	ldr	r1, [r0, #4]
 80094c6:	4b0c      	ldr	r3, [pc, #48]	@ (80094f8 <cleanup_stdio+0x34>)
 80094c8:	4299      	cmp	r1, r3
 80094ca:	b510      	push	{r4, lr}
 80094cc:	4604      	mov	r4, r0
 80094ce:	d001      	beq.n	80094d4 <cleanup_stdio+0x10>
 80094d0:	f000 fba6 	bl	8009c20 <_fflush_r>
 80094d4:	68a1      	ldr	r1, [r4, #8]
 80094d6:	4b09      	ldr	r3, [pc, #36]	@ (80094fc <cleanup_stdio+0x38>)
 80094d8:	4299      	cmp	r1, r3
 80094da:	d002      	beq.n	80094e2 <cleanup_stdio+0x1e>
 80094dc:	4620      	mov	r0, r4
 80094de:	f000 fb9f 	bl	8009c20 <_fflush_r>
 80094e2:	68e1      	ldr	r1, [r4, #12]
 80094e4:	4b06      	ldr	r3, [pc, #24]	@ (8009500 <cleanup_stdio+0x3c>)
 80094e6:	4299      	cmp	r1, r3
 80094e8:	d004      	beq.n	80094f4 <cleanup_stdio+0x30>
 80094ea:	4620      	mov	r0, r4
 80094ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094f0:	f000 bb96 	b.w	8009c20 <_fflush_r>
 80094f4:	bd10      	pop	{r4, pc}
 80094f6:	bf00      	nop
 80094f8:	20001e40 	.word	0x20001e40
 80094fc:	20001ea8 	.word	0x20001ea8
 8009500:	20001f10 	.word	0x20001f10

08009504 <global_stdio_init.part.0>:
 8009504:	b510      	push	{r4, lr}
 8009506:	4b0b      	ldr	r3, [pc, #44]	@ (8009534 <global_stdio_init.part.0+0x30>)
 8009508:	4c0b      	ldr	r4, [pc, #44]	@ (8009538 <global_stdio_init.part.0+0x34>)
 800950a:	4a0c      	ldr	r2, [pc, #48]	@ (800953c <global_stdio_init.part.0+0x38>)
 800950c:	601a      	str	r2, [r3, #0]
 800950e:	4620      	mov	r0, r4
 8009510:	2200      	movs	r2, #0
 8009512:	2104      	movs	r1, #4
 8009514:	f7ff ff94 	bl	8009440 <std>
 8009518:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800951c:	2201      	movs	r2, #1
 800951e:	2109      	movs	r1, #9
 8009520:	f7ff ff8e 	bl	8009440 <std>
 8009524:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009528:	2202      	movs	r2, #2
 800952a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800952e:	2112      	movs	r1, #18
 8009530:	f7ff bf86 	b.w	8009440 <std>
 8009534:	20001f78 	.word	0x20001f78
 8009538:	20001e40 	.word	0x20001e40
 800953c:	080094ad 	.word	0x080094ad

08009540 <__sfp_lock_acquire>:
 8009540:	4801      	ldr	r0, [pc, #4]	@ (8009548 <__sfp_lock_acquire+0x8>)
 8009542:	f000 b9ee 	b.w	8009922 <__retarget_lock_acquire_recursive>
 8009546:	bf00      	nop
 8009548:	20001f81 	.word	0x20001f81

0800954c <__sfp_lock_release>:
 800954c:	4801      	ldr	r0, [pc, #4]	@ (8009554 <__sfp_lock_release+0x8>)
 800954e:	f000 b9e9 	b.w	8009924 <__retarget_lock_release_recursive>
 8009552:	bf00      	nop
 8009554:	20001f81 	.word	0x20001f81

08009558 <__sinit>:
 8009558:	b510      	push	{r4, lr}
 800955a:	4604      	mov	r4, r0
 800955c:	f7ff fff0 	bl	8009540 <__sfp_lock_acquire>
 8009560:	6a23      	ldr	r3, [r4, #32]
 8009562:	b11b      	cbz	r3, 800956c <__sinit+0x14>
 8009564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009568:	f7ff bff0 	b.w	800954c <__sfp_lock_release>
 800956c:	4b04      	ldr	r3, [pc, #16]	@ (8009580 <__sinit+0x28>)
 800956e:	6223      	str	r3, [r4, #32]
 8009570:	4b04      	ldr	r3, [pc, #16]	@ (8009584 <__sinit+0x2c>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d1f5      	bne.n	8009564 <__sinit+0xc>
 8009578:	f7ff ffc4 	bl	8009504 <global_stdio_init.part.0>
 800957c:	e7f2      	b.n	8009564 <__sinit+0xc>
 800957e:	bf00      	nop
 8009580:	080094c5 	.word	0x080094c5
 8009584:	20001f78 	.word	0x20001f78

08009588 <_fwalk_sglue>:
 8009588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800958c:	4607      	mov	r7, r0
 800958e:	4688      	mov	r8, r1
 8009590:	4614      	mov	r4, r2
 8009592:	2600      	movs	r6, #0
 8009594:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009598:	f1b9 0901 	subs.w	r9, r9, #1
 800959c:	d505      	bpl.n	80095aa <_fwalk_sglue+0x22>
 800959e:	6824      	ldr	r4, [r4, #0]
 80095a0:	2c00      	cmp	r4, #0
 80095a2:	d1f7      	bne.n	8009594 <_fwalk_sglue+0xc>
 80095a4:	4630      	mov	r0, r6
 80095a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095aa:	89ab      	ldrh	r3, [r5, #12]
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d907      	bls.n	80095c0 <_fwalk_sglue+0x38>
 80095b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095b4:	3301      	adds	r3, #1
 80095b6:	d003      	beq.n	80095c0 <_fwalk_sglue+0x38>
 80095b8:	4629      	mov	r1, r5
 80095ba:	4638      	mov	r0, r7
 80095bc:	47c0      	blx	r8
 80095be:	4306      	orrs	r6, r0
 80095c0:	3568      	adds	r5, #104	@ 0x68
 80095c2:	e7e9      	b.n	8009598 <_fwalk_sglue+0x10>

080095c4 <_puts_r>:
 80095c4:	6a03      	ldr	r3, [r0, #32]
 80095c6:	b570      	push	{r4, r5, r6, lr}
 80095c8:	6884      	ldr	r4, [r0, #8]
 80095ca:	4605      	mov	r5, r0
 80095cc:	460e      	mov	r6, r1
 80095ce:	b90b      	cbnz	r3, 80095d4 <_puts_r+0x10>
 80095d0:	f7ff ffc2 	bl	8009558 <__sinit>
 80095d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80095d6:	07db      	lsls	r3, r3, #31
 80095d8:	d405      	bmi.n	80095e6 <_puts_r+0x22>
 80095da:	89a3      	ldrh	r3, [r4, #12]
 80095dc:	0598      	lsls	r0, r3, #22
 80095de:	d402      	bmi.n	80095e6 <_puts_r+0x22>
 80095e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095e2:	f000 f99e 	bl	8009922 <__retarget_lock_acquire_recursive>
 80095e6:	89a3      	ldrh	r3, [r4, #12]
 80095e8:	0719      	lsls	r1, r3, #28
 80095ea:	d502      	bpl.n	80095f2 <_puts_r+0x2e>
 80095ec:	6923      	ldr	r3, [r4, #16]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d135      	bne.n	800965e <_puts_r+0x9a>
 80095f2:	4621      	mov	r1, r4
 80095f4:	4628      	mov	r0, r5
 80095f6:	f000 f8c5 	bl	8009784 <__swsetup_r>
 80095fa:	b380      	cbz	r0, 800965e <_puts_r+0x9a>
 80095fc:	f04f 35ff 	mov.w	r5, #4294967295
 8009600:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009602:	07da      	lsls	r2, r3, #31
 8009604:	d405      	bmi.n	8009612 <_puts_r+0x4e>
 8009606:	89a3      	ldrh	r3, [r4, #12]
 8009608:	059b      	lsls	r3, r3, #22
 800960a:	d402      	bmi.n	8009612 <_puts_r+0x4e>
 800960c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800960e:	f000 f989 	bl	8009924 <__retarget_lock_release_recursive>
 8009612:	4628      	mov	r0, r5
 8009614:	bd70      	pop	{r4, r5, r6, pc}
 8009616:	2b00      	cmp	r3, #0
 8009618:	da04      	bge.n	8009624 <_puts_r+0x60>
 800961a:	69a2      	ldr	r2, [r4, #24]
 800961c:	429a      	cmp	r2, r3
 800961e:	dc17      	bgt.n	8009650 <_puts_r+0x8c>
 8009620:	290a      	cmp	r1, #10
 8009622:	d015      	beq.n	8009650 <_puts_r+0x8c>
 8009624:	6823      	ldr	r3, [r4, #0]
 8009626:	1c5a      	adds	r2, r3, #1
 8009628:	6022      	str	r2, [r4, #0]
 800962a:	7019      	strb	r1, [r3, #0]
 800962c:	68a3      	ldr	r3, [r4, #8]
 800962e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009632:	3b01      	subs	r3, #1
 8009634:	60a3      	str	r3, [r4, #8]
 8009636:	2900      	cmp	r1, #0
 8009638:	d1ed      	bne.n	8009616 <_puts_r+0x52>
 800963a:	2b00      	cmp	r3, #0
 800963c:	da11      	bge.n	8009662 <_puts_r+0x9e>
 800963e:	4622      	mov	r2, r4
 8009640:	210a      	movs	r1, #10
 8009642:	4628      	mov	r0, r5
 8009644:	f000 f85f 	bl	8009706 <__swbuf_r>
 8009648:	3001      	adds	r0, #1
 800964a:	d0d7      	beq.n	80095fc <_puts_r+0x38>
 800964c:	250a      	movs	r5, #10
 800964e:	e7d7      	b.n	8009600 <_puts_r+0x3c>
 8009650:	4622      	mov	r2, r4
 8009652:	4628      	mov	r0, r5
 8009654:	f000 f857 	bl	8009706 <__swbuf_r>
 8009658:	3001      	adds	r0, #1
 800965a:	d1e7      	bne.n	800962c <_puts_r+0x68>
 800965c:	e7ce      	b.n	80095fc <_puts_r+0x38>
 800965e:	3e01      	subs	r6, #1
 8009660:	e7e4      	b.n	800962c <_puts_r+0x68>
 8009662:	6823      	ldr	r3, [r4, #0]
 8009664:	1c5a      	adds	r2, r3, #1
 8009666:	6022      	str	r2, [r4, #0]
 8009668:	220a      	movs	r2, #10
 800966a:	701a      	strb	r2, [r3, #0]
 800966c:	e7ee      	b.n	800964c <_puts_r+0x88>
	...

08009670 <puts>:
 8009670:	4b02      	ldr	r3, [pc, #8]	@ (800967c <puts+0xc>)
 8009672:	4601      	mov	r1, r0
 8009674:	6818      	ldr	r0, [r3, #0]
 8009676:	f7ff bfa5 	b.w	80095c4 <_puts_r>
 800967a:	bf00      	nop
 800967c:	20000108 	.word	0x20000108

08009680 <__sread>:
 8009680:	b510      	push	{r4, lr}
 8009682:	460c      	mov	r4, r1
 8009684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009688:	f000 f8fc 	bl	8009884 <_read_r>
 800968c:	2800      	cmp	r0, #0
 800968e:	bfab      	itete	ge
 8009690:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009692:	89a3      	ldrhlt	r3, [r4, #12]
 8009694:	181b      	addge	r3, r3, r0
 8009696:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800969a:	bfac      	ite	ge
 800969c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800969e:	81a3      	strhlt	r3, [r4, #12]
 80096a0:	bd10      	pop	{r4, pc}

080096a2 <__swrite>:
 80096a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096a6:	461f      	mov	r7, r3
 80096a8:	898b      	ldrh	r3, [r1, #12]
 80096aa:	05db      	lsls	r3, r3, #23
 80096ac:	4605      	mov	r5, r0
 80096ae:	460c      	mov	r4, r1
 80096b0:	4616      	mov	r6, r2
 80096b2:	d505      	bpl.n	80096c0 <__swrite+0x1e>
 80096b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096b8:	2302      	movs	r3, #2
 80096ba:	2200      	movs	r2, #0
 80096bc:	f000 f8d0 	bl	8009860 <_lseek_r>
 80096c0:	89a3      	ldrh	r3, [r4, #12]
 80096c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80096ca:	81a3      	strh	r3, [r4, #12]
 80096cc:	4632      	mov	r2, r6
 80096ce:	463b      	mov	r3, r7
 80096d0:	4628      	mov	r0, r5
 80096d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096d6:	f000 b8e7 	b.w	80098a8 <_write_r>

080096da <__sseek>:
 80096da:	b510      	push	{r4, lr}
 80096dc:	460c      	mov	r4, r1
 80096de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096e2:	f000 f8bd 	bl	8009860 <_lseek_r>
 80096e6:	1c43      	adds	r3, r0, #1
 80096e8:	89a3      	ldrh	r3, [r4, #12]
 80096ea:	bf15      	itete	ne
 80096ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80096ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80096f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80096f6:	81a3      	strheq	r3, [r4, #12]
 80096f8:	bf18      	it	ne
 80096fa:	81a3      	strhne	r3, [r4, #12]
 80096fc:	bd10      	pop	{r4, pc}

080096fe <__sclose>:
 80096fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009702:	f000 b89d 	b.w	8009840 <_close_r>

08009706 <__swbuf_r>:
 8009706:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009708:	460e      	mov	r6, r1
 800970a:	4614      	mov	r4, r2
 800970c:	4605      	mov	r5, r0
 800970e:	b118      	cbz	r0, 8009718 <__swbuf_r+0x12>
 8009710:	6a03      	ldr	r3, [r0, #32]
 8009712:	b90b      	cbnz	r3, 8009718 <__swbuf_r+0x12>
 8009714:	f7ff ff20 	bl	8009558 <__sinit>
 8009718:	69a3      	ldr	r3, [r4, #24]
 800971a:	60a3      	str	r3, [r4, #8]
 800971c:	89a3      	ldrh	r3, [r4, #12]
 800971e:	071a      	lsls	r2, r3, #28
 8009720:	d501      	bpl.n	8009726 <__swbuf_r+0x20>
 8009722:	6923      	ldr	r3, [r4, #16]
 8009724:	b943      	cbnz	r3, 8009738 <__swbuf_r+0x32>
 8009726:	4621      	mov	r1, r4
 8009728:	4628      	mov	r0, r5
 800972a:	f000 f82b 	bl	8009784 <__swsetup_r>
 800972e:	b118      	cbz	r0, 8009738 <__swbuf_r+0x32>
 8009730:	f04f 37ff 	mov.w	r7, #4294967295
 8009734:	4638      	mov	r0, r7
 8009736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009738:	6823      	ldr	r3, [r4, #0]
 800973a:	6922      	ldr	r2, [r4, #16]
 800973c:	1a98      	subs	r0, r3, r2
 800973e:	6963      	ldr	r3, [r4, #20]
 8009740:	b2f6      	uxtb	r6, r6
 8009742:	4283      	cmp	r3, r0
 8009744:	4637      	mov	r7, r6
 8009746:	dc05      	bgt.n	8009754 <__swbuf_r+0x4e>
 8009748:	4621      	mov	r1, r4
 800974a:	4628      	mov	r0, r5
 800974c:	f000 fa68 	bl	8009c20 <_fflush_r>
 8009750:	2800      	cmp	r0, #0
 8009752:	d1ed      	bne.n	8009730 <__swbuf_r+0x2a>
 8009754:	68a3      	ldr	r3, [r4, #8]
 8009756:	3b01      	subs	r3, #1
 8009758:	60a3      	str	r3, [r4, #8]
 800975a:	6823      	ldr	r3, [r4, #0]
 800975c:	1c5a      	adds	r2, r3, #1
 800975e:	6022      	str	r2, [r4, #0]
 8009760:	701e      	strb	r6, [r3, #0]
 8009762:	6962      	ldr	r2, [r4, #20]
 8009764:	1c43      	adds	r3, r0, #1
 8009766:	429a      	cmp	r2, r3
 8009768:	d004      	beq.n	8009774 <__swbuf_r+0x6e>
 800976a:	89a3      	ldrh	r3, [r4, #12]
 800976c:	07db      	lsls	r3, r3, #31
 800976e:	d5e1      	bpl.n	8009734 <__swbuf_r+0x2e>
 8009770:	2e0a      	cmp	r6, #10
 8009772:	d1df      	bne.n	8009734 <__swbuf_r+0x2e>
 8009774:	4621      	mov	r1, r4
 8009776:	4628      	mov	r0, r5
 8009778:	f000 fa52 	bl	8009c20 <_fflush_r>
 800977c:	2800      	cmp	r0, #0
 800977e:	d0d9      	beq.n	8009734 <__swbuf_r+0x2e>
 8009780:	e7d6      	b.n	8009730 <__swbuf_r+0x2a>
	...

08009784 <__swsetup_r>:
 8009784:	b538      	push	{r3, r4, r5, lr}
 8009786:	4b29      	ldr	r3, [pc, #164]	@ (800982c <__swsetup_r+0xa8>)
 8009788:	4605      	mov	r5, r0
 800978a:	6818      	ldr	r0, [r3, #0]
 800978c:	460c      	mov	r4, r1
 800978e:	b118      	cbz	r0, 8009798 <__swsetup_r+0x14>
 8009790:	6a03      	ldr	r3, [r0, #32]
 8009792:	b90b      	cbnz	r3, 8009798 <__swsetup_r+0x14>
 8009794:	f7ff fee0 	bl	8009558 <__sinit>
 8009798:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800979c:	0719      	lsls	r1, r3, #28
 800979e:	d422      	bmi.n	80097e6 <__swsetup_r+0x62>
 80097a0:	06da      	lsls	r2, r3, #27
 80097a2:	d407      	bmi.n	80097b4 <__swsetup_r+0x30>
 80097a4:	2209      	movs	r2, #9
 80097a6:	602a      	str	r2, [r5, #0]
 80097a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097ac:	81a3      	strh	r3, [r4, #12]
 80097ae:	f04f 30ff 	mov.w	r0, #4294967295
 80097b2:	e033      	b.n	800981c <__swsetup_r+0x98>
 80097b4:	0758      	lsls	r0, r3, #29
 80097b6:	d512      	bpl.n	80097de <__swsetup_r+0x5a>
 80097b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097ba:	b141      	cbz	r1, 80097ce <__swsetup_r+0x4a>
 80097bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80097c0:	4299      	cmp	r1, r3
 80097c2:	d002      	beq.n	80097ca <__swsetup_r+0x46>
 80097c4:	4628      	mov	r0, r5
 80097c6:	f000 f8af 	bl	8009928 <_free_r>
 80097ca:	2300      	movs	r3, #0
 80097cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80097ce:	89a3      	ldrh	r3, [r4, #12]
 80097d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80097d4:	81a3      	strh	r3, [r4, #12]
 80097d6:	2300      	movs	r3, #0
 80097d8:	6063      	str	r3, [r4, #4]
 80097da:	6923      	ldr	r3, [r4, #16]
 80097dc:	6023      	str	r3, [r4, #0]
 80097de:	89a3      	ldrh	r3, [r4, #12]
 80097e0:	f043 0308 	orr.w	r3, r3, #8
 80097e4:	81a3      	strh	r3, [r4, #12]
 80097e6:	6923      	ldr	r3, [r4, #16]
 80097e8:	b94b      	cbnz	r3, 80097fe <__swsetup_r+0x7a>
 80097ea:	89a3      	ldrh	r3, [r4, #12]
 80097ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80097f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097f4:	d003      	beq.n	80097fe <__swsetup_r+0x7a>
 80097f6:	4621      	mov	r1, r4
 80097f8:	4628      	mov	r0, r5
 80097fa:	f000 fa5f 	bl	8009cbc <__smakebuf_r>
 80097fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009802:	f013 0201 	ands.w	r2, r3, #1
 8009806:	d00a      	beq.n	800981e <__swsetup_r+0x9a>
 8009808:	2200      	movs	r2, #0
 800980a:	60a2      	str	r2, [r4, #8]
 800980c:	6962      	ldr	r2, [r4, #20]
 800980e:	4252      	negs	r2, r2
 8009810:	61a2      	str	r2, [r4, #24]
 8009812:	6922      	ldr	r2, [r4, #16]
 8009814:	b942      	cbnz	r2, 8009828 <__swsetup_r+0xa4>
 8009816:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800981a:	d1c5      	bne.n	80097a8 <__swsetup_r+0x24>
 800981c:	bd38      	pop	{r3, r4, r5, pc}
 800981e:	0799      	lsls	r1, r3, #30
 8009820:	bf58      	it	pl
 8009822:	6962      	ldrpl	r2, [r4, #20]
 8009824:	60a2      	str	r2, [r4, #8]
 8009826:	e7f4      	b.n	8009812 <__swsetup_r+0x8e>
 8009828:	2000      	movs	r0, #0
 800982a:	e7f7      	b.n	800981c <__swsetup_r+0x98>
 800982c:	20000108 	.word	0x20000108

08009830 <memset>:
 8009830:	4402      	add	r2, r0
 8009832:	4603      	mov	r3, r0
 8009834:	4293      	cmp	r3, r2
 8009836:	d100      	bne.n	800983a <memset+0xa>
 8009838:	4770      	bx	lr
 800983a:	f803 1b01 	strb.w	r1, [r3], #1
 800983e:	e7f9      	b.n	8009834 <memset+0x4>

08009840 <_close_r>:
 8009840:	b538      	push	{r3, r4, r5, lr}
 8009842:	4d06      	ldr	r5, [pc, #24]	@ (800985c <_close_r+0x1c>)
 8009844:	2300      	movs	r3, #0
 8009846:	4604      	mov	r4, r0
 8009848:	4608      	mov	r0, r1
 800984a:	602b      	str	r3, [r5, #0]
 800984c:	f7f7 fb63 	bl	8000f16 <_close>
 8009850:	1c43      	adds	r3, r0, #1
 8009852:	d102      	bne.n	800985a <_close_r+0x1a>
 8009854:	682b      	ldr	r3, [r5, #0]
 8009856:	b103      	cbz	r3, 800985a <_close_r+0x1a>
 8009858:	6023      	str	r3, [r4, #0]
 800985a:	bd38      	pop	{r3, r4, r5, pc}
 800985c:	20001f7c 	.word	0x20001f7c

08009860 <_lseek_r>:
 8009860:	b538      	push	{r3, r4, r5, lr}
 8009862:	4d07      	ldr	r5, [pc, #28]	@ (8009880 <_lseek_r+0x20>)
 8009864:	4604      	mov	r4, r0
 8009866:	4608      	mov	r0, r1
 8009868:	4611      	mov	r1, r2
 800986a:	2200      	movs	r2, #0
 800986c:	602a      	str	r2, [r5, #0]
 800986e:	461a      	mov	r2, r3
 8009870:	f7f7 fb78 	bl	8000f64 <_lseek>
 8009874:	1c43      	adds	r3, r0, #1
 8009876:	d102      	bne.n	800987e <_lseek_r+0x1e>
 8009878:	682b      	ldr	r3, [r5, #0]
 800987a:	b103      	cbz	r3, 800987e <_lseek_r+0x1e>
 800987c:	6023      	str	r3, [r4, #0]
 800987e:	bd38      	pop	{r3, r4, r5, pc}
 8009880:	20001f7c 	.word	0x20001f7c

08009884 <_read_r>:
 8009884:	b538      	push	{r3, r4, r5, lr}
 8009886:	4d07      	ldr	r5, [pc, #28]	@ (80098a4 <_read_r+0x20>)
 8009888:	4604      	mov	r4, r0
 800988a:	4608      	mov	r0, r1
 800988c:	4611      	mov	r1, r2
 800988e:	2200      	movs	r2, #0
 8009890:	602a      	str	r2, [r5, #0]
 8009892:	461a      	mov	r2, r3
 8009894:	f7f7 fb06 	bl	8000ea4 <_read>
 8009898:	1c43      	adds	r3, r0, #1
 800989a:	d102      	bne.n	80098a2 <_read_r+0x1e>
 800989c:	682b      	ldr	r3, [r5, #0]
 800989e:	b103      	cbz	r3, 80098a2 <_read_r+0x1e>
 80098a0:	6023      	str	r3, [r4, #0]
 80098a2:	bd38      	pop	{r3, r4, r5, pc}
 80098a4:	20001f7c 	.word	0x20001f7c

080098a8 <_write_r>:
 80098a8:	b538      	push	{r3, r4, r5, lr}
 80098aa:	4d07      	ldr	r5, [pc, #28]	@ (80098c8 <_write_r+0x20>)
 80098ac:	4604      	mov	r4, r0
 80098ae:	4608      	mov	r0, r1
 80098b0:	4611      	mov	r1, r2
 80098b2:	2200      	movs	r2, #0
 80098b4:	602a      	str	r2, [r5, #0]
 80098b6:	461a      	mov	r2, r3
 80098b8:	f7f7 fb11 	bl	8000ede <_write>
 80098bc:	1c43      	adds	r3, r0, #1
 80098be:	d102      	bne.n	80098c6 <_write_r+0x1e>
 80098c0:	682b      	ldr	r3, [r5, #0]
 80098c2:	b103      	cbz	r3, 80098c6 <_write_r+0x1e>
 80098c4:	6023      	str	r3, [r4, #0]
 80098c6:	bd38      	pop	{r3, r4, r5, pc}
 80098c8:	20001f7c 	.word	0x20001f7c

080098cc <__errno>:
 80098cc:	4b01      	ldr	r3, [pc, #4]	@ (80098d4 <__errno+0x8>)
 80098ce:	6818      	ldr	r0, [r3, #0]
 80098d0:	4770      	bx	lr
 80098d2:	bf00      	nop
 80098d4:	20000108 	.word	0x20000108

080098d8 <__libc_init_array>:
 80098d8:	b570      	push	{r4, r5, r6, lr}
 80098da:	4d0d      	ldr	r5, [pc, #52]	@ (8009910 <__libc_init_array+0x38>)
 80098dc:	4c0d      	ldr	r4, [pc, #52]	@ (8009914 <__libc_init_array+0x3c>)
 80098de:	1b64      	subs	r4, r4, r5
 80098e0:	10a4      	asrs	r4, r4, #2
 80098e2:	2600      	movs	r6, #0
 80098e4:	42a6      	cmp	r6, r4
 80098e6:	d109      	bne.n	80098fc <__libc_init_array+0x24>
 80098e8:	4d0b      	ldr	r5, [pc, #44]	@ (8009918 <__libc_init_array+0x40>)
 80098ea:	4c0c      	ldr	r4, [pc, #48]	@ (800991c <__libc_init_array+0x44>)
 80098ec:	f000 fa54 	bl	8009d98 <_init>
 80098f0:	1b64      	subs	r4, r4, r5
 80098f2:	10a4      	asrs	r4, r4, #2
 80098f4:	2600      	movs	r6, #0
 80098f6:	42a6      	cmp	r6, r4
 80098f8:	d105      	bne.n	8009906 <__libc_init_array+0x2e>
 80098fa:	bd70      	pop	{r4, r5, r6, pc}
 80098fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009900:	4798      	blx	r3
 8009902:	3601      	adds	r6, #1
 8009904:	e7ee      	b.n	80098e4 <__libc_init_array+0xc>
 8009906:	f855 3b04 	ldr.w	r3, [r5], #4
 800990a:	4798      	blx	r3
 800990c:	3601      	adds	r6, #1
 800990e:	e7f2      	b.n	80098f6 <__libc_init_array+0x1e>
 8009910:	08009f6c 	.word	0x08009f6c
 8009914:	08009f6c 	.word	0x08009f6c
 8009918:	08009f6c 	.word	0x08009f6c
 800991c:	08009f70 	.word	0x08009f70

08009920 <__retarget_lock_init_recursive>:
 8009920:	4770      	bx	lr

08009922 <__retarget_lock_acquire_recursive>:
 8009922:	4770      	bx	lr

08009924 <__retarget_lock_release_recursive>:
 8009924:	4770      	bx	lr
	...

08009928 <_free_r>:
 8009928:	b538      	push	{r3, r4, r5, lr}
 800992a:	4605      	mov	r5, r0
 800992c:	2900      	cmp	r1, #0
 800992e:	d041      	beq.n	80099b4 <_free_r+0x8c>
 8009930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009934:	1f0c      	subs	r4, r1, #4
 8009936:	2b00      	cmp	r3, #0
 8009938:	bfb8      	it	lt
 800993a:	18e4      	addlt	r4, r4, r3
 800993c:	f000 f8e0 	bl	8009b00 <__malloc_lock>
 8009940:	4a1d      	ldr	r2, [pc, #116]	@ (80099b8 <_free_r+0x90>)
 8009942:	6813      	ldr	r3, [r2, #0]
 8009944:	b933      	cbnz	r3, 8009954 <_free_r+0x2c>
 8009946:	6063      	str	r3, [r4, #4]
 8009948:	6014      	str	r4, [r2, #0]
 800994a:	4628      	mov	r0, r5
 800994c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009950:	f000 b8dc 	b.w	8009b0c <__malloc_unlock>
 8009954:	42a3      	cmp	r3, r4
 8009956:	d908      	bls.n	800996a <_free_r+0x42>
 8009958:	6820      	ldr	r0, [r4, #0]
 800995a:	1821      	adds	r1, r4, r0
 800995c:	428b      	cmp	r3, r1
 800995e:	bf01      	itttt	eq
 8009960:	6819      	ldreq	r1, [r3, #0]
 8009962:	685b      	ldreq	r3, [r3, #4]
 8009964:	1809      	addeq	r1, r1, r0
 8009966:	6021      	streq	r1, [r4, #0]
 8009968:	e7ed      	b.n	8009946 <_free_r+0x1e>
 800996a:	461a      	mov	r2, r3
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	b10b      	cbz	r3, 8009974 <_free_r+0x4c>
 8009970:	42a3      	cmp	r3, r4
 8009972:	d9fa      	bls.n	800996a <_free_r+0x42>
 8009974:	6811      	ldr	r1, [r2, #0]
 8009976:	1850      	adds	r0, r2, r1
 8009978:	42a0      	cmp	r0, r4
 800997a:	d10b      	bne.n	8009994 <_free_r+0x6c>
 800997c:	6820      	ldr	r0, [r4, #0]
 800997e:	4401      	add	r1, r0
 8009980:	1850      	adds	r0, r2, r1
 8009982:	4283      	cmp	r3, r0
 8009984:	6011      	str	r1, [r2, #0]
 8009986:	d1e0      	bne.n	800994a <_free_r+0x22>
 8009988:	6818      	ldr	r0, [r3, #0]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	6053      	str	r3, [r2, #4]
 800998e:	4408      	add	r0, r1
 8009990:	6010      	str	r0, [r2, #0]
 8009992:	e7da      	b.n	800994a <_free_r+0x22>
 8009994:	d902      	bls.n	800999c <_free_r+0x74>
 8009996:	230c      	movs	r3, #12
 8009998:	602b      	str	r3, [r5, #0]
 800999a:	e7d6      	b.n	800994a <_free_r+0x22>
 800999c:	6820      	ldr	r0, [r4, #0]
 800999e:	1821      	adds	r1, r4, r0
 80099a0:	428b      	cmp	r3, r1
 80099a2:	bf04      	itt	eq
 80099a4:	6819      	ldreq	r1, [r3, #0]
 80099a6:	685b      	ldreq	r3, [r3, #4]
 80099a8:	6063      	str	r3, [r4, #4]
 80099aa:	bf04      	itt	eq
 80099ac:	1809      	addeq	r1, r1, r0
 80099ae:	6021      	streq	r1, [r4, #0]
 80099b0:	6054      	str	r4, [r2, #4]
 80099b2:	e7ca      	b.n	800994a <_free_r+0x22>
 80099b4:	bd38      	pop	{r3, r4, r5, pc}
 80099b6:	bf00      	nop
 80099b8:	20001f88 	.word	0x20001f88

080099bc <sbrk_aligned>:
 80099bc:	b570      	push	{r4, r5, r6, lr}
 80099be:	4e0f      	ldr	r6, [pc, #60]	@ (80099fc <sbrk_aligned+0x40>)
 80099c0:	460c      	mov	r4, r1
 80099c2:	6831      	ldr	r1, [r6, #0]
 80099c4:	4605      	mov	r5, r0
 80099c6:	b911      	cbnz	r1, 80099ce <sbrk_aligned+0x12>
 80099c8:	f000 f9d6 	bl	8009d78 <_sbrk_r>
 80099cc:	6030      	str	r0, [r6, #0]
 80099ce:	4621      	mov	r1, r4
 80099d0:	4628      	mov	r0, r5
 80099d2:	f000 f9d1 	bl	8009d78 <_sbrk_r>
 80099d6:	1c43      	adds	r3, r0, #1
 80099d8:	d103      	bne.n	80099e2 <sbrk_aligned+0x26>
 80099da:	f04f 34ff 	mov.w	r4, #4294967295
 80099de:	4620      	mov	r0, r4
 80099e0:	bd70      	pop	{r4, r5, r6, pc}
 80099e2:	1cc4      	adds	r4, r0, #3
 80099e4:	f024 0403 	bic.w	r4, r4, #3
 80099e8:	42a0      	cmp	r0, r4
 80099ea:	d0f8      	beq.n	80099de <sbrk_aligned+0x22>
 80099ec:	1a21      	subs	r1, r4, r0
 80099ee:	4628      	mov	r0, r5
 80099f0:	f000 f9c2 	bl	8009d78 <_sbrk_r>
 80099f4:	3001      	adds	r0, #1
 80099f6:	d1f2      	bne.n	80099de <sbrk_aligned+0x22>
 80099f8:	e7ef      	b.n	80099da <sbrk_aligned+0x1e>
 80099fa:	bf00      	nop
 80099fc:	20001f84 	.word	0x20001f84

08009a00 <_malloc_r>:
 8009a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a04:	1ccd      	adds	r5, r1, #3
 8009a06:	f025 0503 	bic.w	r5, r5, #3
 8009a0a:	3508      	adds	r5, #8
 8009a0c:	2d0c      	cmp	r5, #12
 8009a0e:	bf38      	it	cc
 8009a10:	250c      	movcc	r5, #12
 8009a12:	2d00      	cmp	r5, #0
 8009a14:	4606      	mov	r6, r0
 8009a16:	db01      	blt.n	8009a1c <_malloc_r+0x1c>
 8009a18:	42a9      	cmp	r1, r5
 8009a1a:	d904      	bls.n	8009a26 <_malloc_r+0x26>
 8009a1c:	230c      	movs	r3, #12
 8009a1e:	6033      	str	r3, [r6, #0]
 8009a20:	2000      	movs	r0, #0
 8009a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009afc <_malloc_r+0xfc>
 8009a2a:	f000 f869 	bl	8009b00 <__malloc_lock>
 8009a2e:	f8d8 3000 	ldr.w	r3, [r8]
 8009a32:	461c      	mov	r4, r3
 8009a34:	bb44      	cbnz	r4, 8009a88 <_malloc_r+0x88>
 8009a36:	4629      	mov	r1, r5
 8009a38:	4630      	mov	r0, r6
 8009a3a:	f7ff ffbf 	bl	80099bc <sbrk_aligned>
 8009a3e:	1c43      	adds	r3, r0, #1
 8009a40:	4604      	mov	r4, r0
 8009a42:	d158      	bne.n	8009af6 <_malloc_r+0xf6>
 8009a44:	f8d8 4000 	ldr.w	r4, [r8]
 8009a48:	4627      	mov	r7, r4
 8009a4a:	2f00      	cmp	r7, #0
 8009a4c:	d143      	bne.n	8009ad6 <_malloc_r+0xd6>
 8009a4e:	2c00      	cmp	r4, #0
 8009a50:	d04b      	beq.n	8009aea <_malloc_r+0xea>
 8009a52:	6823      	ldr	r3, [r4, #0]
 8009a54:	4639      	mov	r1, r7
 8009a56:	4630      	mov	r0, r6
 8009a58:	eb04 0903 	add.w	r9, r4, r3
 8009a5c:	f000 f98c 	bl	8009d78 <_sbrk_r>
 8009a60:	4581      	cmp	r9, r0
 8009a62:	d142      	bne.n	8009aea <_malloc_r+0xea>
 8009a64:	6821      	ldr	r1, [r4, #0]
 8009a66:	1a6d      	subs	r5, r5, r1
 8009a68:	4629      	mov	r1, r5
 8009a6a:	4630      	mov	r0, r6
 8009a6c:	f7ff ffa6 	bl	80099bc <sbrk_aligned>
 8009a70:	3001      	adds	r0, #1
 8009a72:	d03a      	beq.n	8009aea <_malloc_r+0xea>
 8009a74:	6823      	ldr	r3, [r4, #0]
 8009a76:	442b      	add	r3, r5
 8009a78:	6023      	str	r3, [r4, #0]
 8009a7a:	f8d8 3000 	ldr.w	r3, [r8]
 8009a7e:	685a      	ldr	r2, [r3, #4]
 8009a80:	bb62      	cbnz	r2, 8009adc <_malloc_r+0xdc>
 8009a82:	f8c8 7000 	str.w	r7, [r8]
 8009a86:	e00f      	b.n	8009aa8 <_malloc_r+0xa8>
 8009a88:	6822      	ldr	r2, [r4, #0]
 8009a8a:	1b52      	subs	r2, r2, r5
 8009a8c:	d420      	bmi.n	8009ad0 <_malloc_r+0xd0>
 8009a8e:	2a0b      	cmp	r2, #11
 8009a90:	d917      	bls.n	8009ac2 <_malloc_r+0xc2>
 8009a92:	1961      	adds	r1, r4, r5
 8009a94:	42a3      	cmp	r3, r4
 8009a96:	6025      	str	r5, [r4, #0]
 8009a98:	bf18      	it	ne
 8009a9a:	6059      	strne	r1, [r3, #4]
 8009a9c:	6863      	ldr	r3, [r4, #4]
 8009a9e:	bf08      	it	eq
 8009aa0:	f8c8 1000 	streq.w	r1, [r8]
 8009aa4:	5162      	str	r2, [r4, r5]
 8009aa6:	604b      	str	r3, [r1, #4]
 8009aa8:	4630      	mov	r0, r6
 8009aaa:	f000 f82f 	bl	8009b0c <__malloc_unlock>
 8009aae:	f104 000b 	add.w	r0, r4, #11
 8009ab2:	1d23      	adds	r3, r4, #4
 8009ab4:	f020 0007 	bic.w	r0, r0, #7
 8009ab8:	1ac2      	subs	r2, r0, r3
 8009aba:	bf1c      	itt	ne
 8009abc:	1a1b      	subne	r3, r3, r0
 8009abe:	50a3      	strne	r3, [r4, r2]
 8009ac0:	e7af      	b.n	8009a22 <_malloc_r+0x22>
 8009ac2:	6862      	ldr	r2, [r4, #4]
 8009ac4:	42a3      	cmp	r3, r4
 8009ac6:	bf0c      	ite	eq
 8009ac8:	f8c8 2000 	streq.w	r2, [r8]
 8009acc:	605a      	strne	r2, [r3, #4]
 8009ace:	e7eb      	b.n	8009aa8 <_malloc_r+0xa8>
 8009ad0:	4623      	mov	r3, r4
 8009ad2:	6864      	ldr	r4, [r4, #4]
 8009ad4:	e7ae      	b.n	8009a34 <_malloc_r+0x34>
 8009ad6:	463c      	mov	r4, r7
 8009ad8:	687f      	ldr	r7, [r7, #4]
 8009ada:	e7b6      	b.n	8009a4a <_malloc_r+0x4a>
 8009adc:	461a      	mov	r2, r3
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	42a3      	cmp	r3, r4
 8009ae2:	d1fb      	bne.n	8009adc <_malloc_r+0xdc>
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	6053      	str	r3, [r2, #4]
 8009ae8:	e7de      	b.n	8009aa8 <_malloc_r+0xa8>
 8009aea:	230c      	movs	r3, #12
 8009aec:	6033      	str	r3, [r6, #0]
 8009aee:	4630      	mov	r0, r6
 8009af0:	f000 f80c 	bl	8009b0c <__malloc_unlock>
 8009af4:	e794      	b.n	8009a20 <_malloc_r+0x20>
 8009af6:	6005      	str	r5, [r0, #0]
 8009af8:	e7d6      	b.n	8009aa8 <_malloc_r+0xa8>
 8009afa:	bf00      	nop
 8009afc:	20001f88 	.word	0x20001f88

08009b00 <__malloc_lock>:
 8009b00:	4801      	ldr	r0, [pc, #4]	@ (8009b08 <__malloc_lock+0x8>)
 8009b02:	f7ff bf0e 	b.w	8009922 <__retarget_lock_acquire_recursive>
 8009b06:	bf00      	nop
 8009b08:	20001f80 	.word	0x20001f80

08009b0c <__malloc_unlock>:
 8009b0c:	4801      	ldr	r0, [pc, #4]	@ (8009b14 <__malloc_unlock+0x8>)
 8009b0e:	f7ff bf09 	b.w	8009924 <__retarget_lock_release_recursive>
 8009b12:	bf00      	nop
 8009b14:	20001f80 	.word	0x20001f80

08009b18 <__sflush_r>:
 8009b18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b20:	0716      	lsls	r6, r2, #28
 8009b22:	4605      	mov	r5, r0
 8009b24:	460c      	mov	r4, r1
 8009b26:	d454      	bmi.n	8009bd2 <__sflush_r+0xba>
 8009b28:	684b      	ldr	r3, [r1, #4]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	dc02      	bgt.n	8009b34 <__sflush_r+0x1c>
 8009b2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	dd48      	ble.n	8009bc6 <__sflush_r+0xae>
 8009b34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009b36:	2e00      	cmp	r6, #0
 8009b38:	d045      	beq.n	8009bc6 <__sflush_r+0xae>
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009b40:	682f      	ldr	r7, [r5, #0]
 8009b42:	6a21      	ldr	r1, [r4, #32]
 8009b44:	602b      	str	r3, [r5, #0]
 8009b46:	d030      	beq.n	8009baa <__sflush_r+0x92>
 8009b48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009b4a:	89a3      	ldrh	r3, [r4, #12]
 8009b4c:	0759      	lsls	r1, r3, #29
 8009b4e:	d505      	bpl.n	8009b5c <__sflush_r+0x44>
 8009b50:	6863      	ldr	r3, [r4, #4]
 8009b52:	1ad2      	subs	r2, r2, r3
 8009b54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009b56:	b10b      	cbz	r3, 8009b5c <__sflush_r+0x44>
 8009b58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009b5a:	1ad2      	subs	r2, r2, r3
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009b60:	6a21      	ldr	r1, [r4, #32]
 8009b62:	4628      	mov	r0, r5
 8009b64:	47b0      	blx	r6
 8009b66:	1c43      	adds	r3, r0, #1
 8009b68:	89a3      	ldrh	r3, [r4, #12]
 8009b6a:	d106      	bne.n	8009b7a <__sflush_r+0x62>
 8009b6c:	6829      	ldr	r1, [r5, #0]
 8009b6e:	291d      	cmp	r1, #29
 8009b70:	d82b      	bhi.n	8009bca <__sflush_r+0xb2>
 8009b72:	4a2a      	ldr	r2, [pc, #168]	@ (8009c1c <__sflush_r+0x104>)
 8009b74:	410a      	asrs	r2, r1
 8009b76:	07d6      	lsls	r6, r2, #31
 8009b78:	d427      	bmi.n	8009bca <__sflush_r+0xb2>
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	6062      	str	r2, [r4, #4]
 8009b7e:	04d9      	lsls	r1, r3, #19
 8009b80:	6922      	ldr	r2, [r4, #16]
 8009b82:	6022      	str	r2, [r4, #0]
 8009b84:	d504      	bpl.n	8009b90 <__sflush_r+0x78>
 8009b86:	1c42      	adds	r2, r0, #1
 8009b88:	d101      	bne.n	8009b8e <__sflush_r+0x76>
 8009b8a:	682b      	ldr	r3, [r5, #0]
 8009b8c:	b903      	cbnz	r3, 8009b90 <__sflush_r+0x78>
 8009b8e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009b90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b92:	602f      	str	r7, [r5, #0]
 8009b94:	b1b9      	cbz	r1, 8009bc6 <__sflush_r+0xae>
 8009b96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b9a:	4299      	cmp	r1, r3
 8009b9c:	d002      	beq.n	8009ba4 <__sflush_r+0x8c>
 8009b9e:	4628      	mov	r0, r5
 8009ba0:	f7ff fec2 	bl	8009928 <_free_r>
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ba8:	e00d      	b.n	8009bc6 <__sflush_r+0xae>
 8009baa:	2301      	movs	r3, #1
 8009bac:	4628      	mov	r0, r5
 8009bae:	47b0      	blx	r6
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	1c50      	adds	r0, r2, #1
 8009bb4:	d1c9      	bne.n	8009b4a <__sflush_r+0x32>
 8009bb6:	682b      	ldr	r3, [r5, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d0c6      	beq.n	8009b4a <__sflush_r+0x32>
 8009bbc:	2b1d      	cmp	r3, #29
 8009bbe:	d001      	beq.n	8009bc4 <__sflush_r+0xac>
 8009bc0:	2b16      	cmp	r3, #22
 8009bc2:	d11e      	bne.n	8009c02 <__sflush_r+0xea>
 8009bc4:	602f      	str	r7, [r5, #0]
 8009bc6:	2000      	movs	r0, #0
 8009bc8:	e022      	b.n	8009c10 <__sflush_r+0xf8>
 8009bca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bce:	b21b      	sxth	r3, r3
 8009bd0:	e01b      	b.n	8009c0a <__sflush_r+0xf2>
 8009bd2:	690f      	ldr	r7, [r1, #16]
 8009bd4:	2f00      	cmp	r7, #0
 8009bd6:	d0f6      	beq.n	8009bc6 <__sflush_r+0xae>
 8009bd8:	0793      	lsls	r3, r2, #30
 8009bda:	680e      	ldr	r6, [r1, #0]
 8009bdc:	bf08      	it	eq
 8009bde:	694b      	ldreq	r3, [r1, #20]
 8009be0:	600f      	str	r7, [r1, #0]
 8009be2:	bf18      	it	ne
 8009be4:	2300      	movne	r3, #0
 8009be6:	eba6 0807 	sub.w	r8, r6, r7
 8009bea:	608b      	str	r3, [r1, #8]
 8009bec:	f1b8 0f00 	cmp.w	r8, #0
 8009bf0:	dde9      	ble.n	8009bc6 <__sflush_r+0xae>
 8009bf2:	6a21      	ldr	r1, [r4, #32]
 8009bf4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009bf6:	4643      	mov	r3, r8
 8009bf8:	463a      	mov	r2, r7
 8009bfa:	4628      	mov	r0, r5
 8009bfc:	47b0      	blx	r6
 8009bfe:	2800      	cmp	r0, #0
 8009c00:	dc08      	bgt.n	8009c14 <__sflush_r+0xfc>
 8009c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c0a:	81a3      	strh	r3, [r4, #12]
 8009c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c14:	4407      	add	r7, r0
 8009c16:	eba8 0800 	sub.w	r8, r8, r0
 8009c1a:	e7e7      	b.n	8009bec <__sflush_r+0xd4>
 8009c1c:	dfbffffe 	.word	0xdfbffffe

08009c20 <_fflush_r>:
 8009c20:	b538      	push	{r3, r4, r5, lr}
 8009c22:	690b      	ldr	r3, [r1, #16]
 8009c24:	4605      	mov	r5, r0
 8009c26:	460c      	mov	r4, r1
 8009c28:	b913      	cbnz	r3, 8009c30 <_fflush_r+0x10>
 8009c2a:	2500      	movs	r5, #0
 8009c2c:	4628      	mov	r0, r5
 8009c2e:	bd38      	pop	{r3, r4, r5, pc}
 8009c30:	b118      	cbz	r0, 8009c3a <_fflush_r+0x1a>
 8009c32:	6a03      	ldr	r3, [r0, #32]
 8009c34:	b90b      	cbnz	r3, 8009c3a <_fflush_r+0x1a>
 8009c36:	f7ff fc8f 	bl	8009558 <__sinit>
 8009c3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d0f3      	beq.n	8009c2a <_fflush_r+0xa>
 8009c42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009c44:	07d0      	lsls	r0, r2, #31
 8009c46:	d404      	bmi.n	8009c52 <_fflush_r+0x32>
 8009c48:	0599      	lsls	r1, r3, #22
 8009c4a:	d402      	bmi.n	8009c52 <_fflush_r+0x32>
 8009c4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c4e:	f7ff fe68 	bl	8009922 <__retarget_lock_acquire_recursive>
 8009c52:	4628      	mov	r0, r5
 8009c54:	4621      	mov	r1, r4
 8009c56:	f7ff ff5f 	bl	8009b18 <__sflush_r>
 8009c5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c5c:	07da      	lsls	r2, r3, #31
 8009c5e:	4605      	mov	r5, r0
 8009c60:	d4e4      	bmi.n	8009c2c <_fflush_r+0xc>
 8009c62:	89a3      	ldrh	r3, [r4, #12]
 8009c64:	059b      	lsls	r3, r3, #22
 8009c66:	d4e1      	bmi.n	8009c2c <_fflush_r+0xc>
 8009c68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c6a:	f7ff fe5b 	bl	8009924 <__retarget_lock_release_recursive>
 8009c6e:	e7dd      	b.n	8009c2c <_fflush_r+0xc>

08009c70 <__swhatbuf_r>:
 8009c70:	b570      	push	{r4, r5, r6, lr}
 8009c72:	460c      	mov	r4, r1
 8009c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c78:	2900      	cmp	r1, #0
 8009c7a:	b096      	sub	sp, #88	@ 0x58
 8009c7c:	4615      	mov	r5, r2
 8009c7e:	461e      	mov	r6, r3
 8009c80:	da0d      	bge.n	8009c9e <__swhatbuf_r+0x2e>
 8009c82:	89a3      	ldrh	r3, [r4, #12]
 8009c84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009c88:	f04f 0100 	mov.w	r1, #0
 8009c8c:	bf14      	ite	ne
 8009c8e:	2340      	movne	r3, #64	@ 0x40
 8009c90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009c94:	2000      	movs	r0, #0
 8009c96:	6031      	str	r1, [r6, #0]
 8009c98:	602b      	str	r3, [r5, #0]
 8009c9a:	b016      	add	sp, #88	@ 0x58
 8009c9c:	bd70      	pop	{r4, r5, r6, pc}
 8009c9e:	466a      	mov	r2, sp
 8009ca0:	f000 f848 	bl	8009d34 <_fstat_r>
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	dbec      	blt.n	8009c82 <__swhatbuf_r+0x12>
 8009ca8:	9901      	ldr	r1, [sp, #4]
 8009caa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009cae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009cb2:	4259      	negs	r1, r3
 8009cb4:	4159      	adcs	r1, r3
 8009cb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009cba:	e7eb      	b.n	8009c94 <__swhatbuf_r+0x24>

08009cbc <__smakebuf_r>:
 8009cbc:	898b      	ldrh	r3, [r1, #12]
 8009cbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cc0:	079d      	lsls	r5, r3, #30
 8009cc2:	4606      	mov	r6, r0
 8009cc4:	460c      	mov	r4, r1
 8009cc6:	d507      	bpl.n	8009cd8 <__smakebuf_r+0x1c>
 8009cc8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009ccc:	6023      	str	r3, [r4, #0]
 8009cce:	6123      	str	r3, [r4, #16]
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	6163      	str	r3, [r4, #20]
 8009cd4:	b003      	add	sp, #12
 8009cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cd8:	ab01      	add	r3, sp, #4
 8009cda:	466a      	mov	r2, sp
 8009cdc:	f7ff ffc8 	bl	8009c70 <__swhatbuf_r>
 8009ce0:	9f00      	ldr	r7, [sp, #0]
 8009ce2:	4605      	mov	r5, r0
 8009ce4:	4639      	mov	r1, r7
 8009ce6:	4630      	mov	r0, r6
 8009ce8:	f7ff fe8a 	bl	8009a00 <_malloc_r>
 8009cec:	b948      	cbnz	r0, 8009d02 <__smakebuf_r+0x46>
 8009cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cf2:	059a      	lsls	r2, r3, #22
 8009cf4:	d4ee      	bmi.n	8009cd4 <__smakebuf_r+0x18>
 8009cf6:	f023 0303 	bic.w	r3, r3, #3
 8009cfa:	f043 0302 	orr.w	r3, r3, #2
 8009cfe:	81a3      	strh	r3, [r4, #12]
 8009d00:	e7e2      	b.n	8009cc8 <__smakebuf_r+0xc>
 8009d02:	89a3      	ldrh	r3, [r4, #12]
 8009d04:	6020      	str	r0, [r4, #0]
 8009d06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d0a:	81a3      	strh	r3, [r4, #12]
 8009d0c:	9b01      	ldr	r3, [sp, #4]
 8009d0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009d12:	b15b      	cbz	r3, 8009d2c <__smakebuf_r+0x70>
 8009d14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d18:	4630      	mov	r0, r6
 8009d1a:	f000 f81d 	bl	8009d58 <_isatty_r>
 8009d1e:	b128      	cbz	r0, 8009d2c <__smakebuf_r+0x70>
 8009d20:	89a3      	ldrh	r3, [r4, #12]
 8009d22:	f023 0303 	bic.w	r3, r3, #3
 8009d26:	f043 0301 	orr.w	r3, r3, #1
 8009d2a:	81a3      	strh	r3, [r4, #12]
 8009d2c:	89a3      	ldrh	r3, [r4, #12]
 8009d2e:	431d      	orrs	r5, r3
 8009d30:	81a5      	strh	r5, [r4, #12]
 8009d32:	e7cf      	b.n	8009cd4 <__smakebuf_r+0x18>

08009d34 <_fstat_r>:
 8009d34:	b538      	push	{r3, r4, r5, lr}
 8009d36:	4d07      	ldr	r5, [pc, #28]	@ (8009d54 <_fstat_r+0x20>)
 8009d38:	2300      	movs	r3, #0
 8009d3a:	4604      	mov	r4, r0
 8009d3c:	4608      	mov	r0, r1
 8009d3e:	4611      	mov	r1, r2
 8009d40:	602b      	str	r3, [r5, #0]
 8009d42:	f7f7 f8f4 	bl	8000f2e <_fstat>
 8009d46:	1c43      	adds	r3, r0, #1
 8009d48:	d102      	bne.n	8009d50 <_fstat_r+0x1c>
 8009d4a:	682b      	ldr	r3, [r5, #0]
 8009d4c:	b103      	cbz	r3, 8009d50 <_fstat_r+0x1c>
 8009d4e:	6023      	str	r3, [r4, #0]
 8009d50:	bd38      	pop	{r3, r4, r5, pc}
 8009d52:	bf00      	nop
 8009d54:	20001f7c 	.word	0x20001f7c

08009d58 <_isatty_r>:
 8009d58:	b538      	push	{r3, r4, r5, lr}
 8009d5a:	4d06      	ldr	r5, [pc, #24]	@ (8009d74 <_isatty_r+0x1c>)
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	4604      	mov	r4, r0
 8009d60:	4608      	mov	r0, r1
 8009d62:	602b      	str	r3, [r5, #0]
 8009d64:	f7f7 f8f3 	bl	8000f4e <_isatty>
 8009d68:	1c43      	adds	r3, r0, #1
 8009d6a:	d102      	bne.n	8009d72 <_isatty_r+0x1a>
 8009d6c:	682b      	ldr	r3, [r5, #0]
 8009d6e:	b103      	cbz	r3, 8009d72 <_isatty_r+0x1a>
 8009d70:	6023      	str	r3, [r4, #0]
 8009d72:	bd38      	pop	{r3, r4, r5, pc}
 8009d74:	20001f7c 	.word	0x20001f7c

08009d78 <_sbrk_r>:
 8009d78:	b538      	push	{r3, r4, r5, lr}
 8009d7a:	4d06      	ldr	r5, [pc, #24]	@ (8009d94 <_sbrk_r+0x1c>)
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	4604      	mov	r4, r0
 8009d80:	4608      	mov	r0, r1
 8009d82:	602b      	str	r3, [r5, #0]
 8009d84:	f7f7 f8fc 	bl	8000f80 <_sbrk>
 8009d88:	1c43      	adds	r3, r0, #1
 8009d8a:	d102      	bne.n	8009d92 <_sbrk_r+0x1a>
 8009d8c:	682b      	ldr	r3, [r5, #0]
 8009d8e:	b103      	cbz	r3, 8009d92 <_sbrk_r+0x1a>
 8009d90:	6023      	str	r3, [r4, #0]
 8009d92:	bd38      	pop	{r3, r4, r5, pc}
 8009d94:	20001f7c 	.word	0x20001f7c

08009d98 <_init>:
 8009d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d9a:	bf00      	nop
 8009d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d9e:	bc08      	pop	{r3}
 8009da0:	469e      	mov	lr, r3
 8009da2:	4770      	bx	lr

08009da4 <_fini>:
 8009da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009da6:	bf00      	nop
 8009da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009daa:	bc08      	pop	{r3}
 8009dac:	469e      	mov	lr, r3
 8009dae:	4770      	bx	lr
